#include <cmath>
#include <vector>
#include <iostream>

namespace mech {

  int    mm = 6;
  int    kk = 57;
  int    ii = 268;
  int    ff = 23;
  double OneAtm      = 1.01325e5;
  double OneThird    = 1.0 / 3.0;
  double GasConstant = 8314.4621;

  std::vector<double> mw = { 2.801348e+01, 3.994800e+01, 4.002600e+00, 1.007940e+00, 3.199880e+01, 1.700734e+01, 1.599940e+01, 2.015880e+00, 1.801528e+01, 3.300674e+01, 3.401468e+01, 2.801040e+01, 4.400980e+01, 2.901834e+01, 1.503482e+01, 1.604276e+01, 3.002628e+01, 1.402688e+01, 1.402688e+01, 2.805376e+01, 3.103422e+01, 2.906170e+01, 3.006964e+01, 1.301894e+01, 2.603788e+01, 6.106050e+01, 7.605196e+01, 2.704582e+01, 4.304522e+01, 4.405316e+01, 4.102934e+01, 4.203728e+01, 2.502994e+01, 3.103422e+01, 3.204216e+01, 4.405316e+01, 4.304522e+01, 4.606904e+01, 4.506110e+01, 4.506110e+01, 4.506110e+01, 4.006476e+01, 3.905682e+01, 4.107270e+01, 4.208064e+01, 4.409652e+01, 4.308858e+01, 4.308858e+01, 7.508738e+01, 9.007884e+01, 5.812340e+01, 5.711546e+01, 5.711546e+01, 5.610752e+01, 8.911426e+01, 8.911426e+01, 1.041057e+02 };

  void getSpecificHeats_R(double& T, std::vector<double>& cp0_R) {

    double tt0 = T;
    double tt1 = T * tt0;
    double tt2 = T * tt1;
    double tt3 = T * tt2;
    double tt4 = 1.0 / T;
    double tt5 = tt4 / T;

    if(tt0 > 1.000000e+03) {
      cp0_R[0] = 2.926640e+00 + 1.487977e-03 * tt0 - 5.684760e-07 * tt1 + 1.009704e-10 * tt2 - 6.753351e-15 * tt3;
    } else {
      cp0_R[0] = 3.298677e+00 + 1.408240e-03 * tt0 - 3.963222e-06 * tt1 + 5.641515e-09 * tt2 - 2.444854e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[1] = 2.500000e+00 - 0.000000e+00 * tt0 - 0.000000e+00 * tt1 - 0.000000e+00 * tt2 - 0.000000e+00 * tt3;
    } else {
      cp0_R[1] = 2.500000e+00 - 0.000000e+00 * tt0 - 0.000000e+00 * tt1 - 0.000000e+00 * tt2 - 0.000000e+00 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[2] = 2.500000e+00 - 0.000000e+00 * tt0 - 0.000000e+00 * tt1 - 0.000000e+00 * tt2 - 0.000000e+00 * tt3;
    } else {
      cp0_R[2] = 2.500000e+00 - 0.000000e+00 * tt0 - 0.000000e+00 * tt1 - 0.000000e+00 * tt2 - 0.000000e+00 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[3] = 2.500000e+00 - 2.308430e-11 * tt0 + 1.615619e-14 * tt1 - 4.735152e-18 * tt2 + 4.981974e-22 * tt3;
    } else {
      cp0_R[3] = 2.500000e+00 + 7.053328e-13 * tt0 - 1.995920e-15 * tt1 + 2.300816e-18 * tt2 - 9.277323e-22 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[4] = 3.282538e+00 + 1.483088e-03 * tt0 - 7.579667e-07 * tt1 + 2.094706e-10 * tt2 - 2.167178e-14 * tt3;
    } else {
      cp0_R[4] = 3.782456e+00 - 2.996734e-03 * tt0 + 9.847302e-06 * tt1 - 9.681295e-09 * tt2 + 3.243728e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[5] = 2.864729e+00 + 1.056504e-03 * tt0 - 2.590828e-07 * tt1 + 3.052187e-11 * tt2 - 1.331959e-15 * tt3;
    } else {
      cp0_R[5] = 4.125306e+00 - 3.225449e-03 * tt0 + 6.527647e-06 * tt1 - 5.798536e-09 * tt2 + 2.062374e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[6] = 2.569421e+00 - 8.597411e-05 * tt0 + 4.194846e-08 * tt1 - 1.001778e-11 * tt2 + 1.228337e-15 * tt3;
    } else {
      cp0_R[6] = 3.168267e+00 - 3.279319e-03 * tt0 + 6.643064e-06 * tt1 - 6.128066e-09 * tt2 + 2.112660e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[7] = 3.337279e+00 - 4.940247e-05 * tt0 + 4.994568e-07 * tt1 - 1.795664e-10 * tt2 + 2.002554e-14 * tt3;
    } else {
      cp0_R[7] = 2.344331e+00 + 7.980521e-03 * tt0 - 1.947815e-05 * tt1 + 2.015721e-08 * tt2 - 7.376118e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[8] = 3.033992e+00 + 2.176918e-03 * tt0 - 1.640725e-07 * tt1 - 9.704199e-11 * tt2 + 1.682010e-14 * tt3;
    } else {
      cp0_R[8] = 4.198641e+00 - 2.036434e-03 * tt0 + 6.520402e-06 * tt1 - 5.487971e-09 * tt2 + 1.771978e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[9] = 4.017211e+00 + 2.239820e-03 * tt0 - 6.336581e-07 * tt1 + 1.142464e-10 * tt2 - 1.079085e-14 * tt3;
    } else {
      cp0_R[9] = 4.301798e+00 - 4.749121e-03 * tt0 + 2.115829e-05 * tt1 - 2.427639e-08 * tt2 + 9.292251e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[10] = 4.165003e+00 + 4.908317e-03 * tt0 - 1.901392e-06 * tt1 + 3.711860e-10 * tt2 - 2.879083e-14 * tt3;
    } else {
      cp0_R[10] = 4.276113e+00 - 5.428224e-04 * tt0 + 1.673357e-05 * tt1 - 2.157708e-08 * tt2 + 8.624544e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[11] = 2.715186e+00 + 2.062527e-03 * tt0 - 9.988258e-07 * tt1 + 2.300530e-10 * tt2 - 2.036477e-14 * tt3;
    } else {
      cp0_R[11] = 3.579533e+00 - 6.103537e-04 * tt0 + 1.016814e-06 * tt1 + 9.070059e-10 * tt2 - 9.044245e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[12] = 3.857460e+00 + 4.414370e-03 * tt0 - 2.214814e-06 * tt1 + 5.234902e-10 * tt2 - 4.720842e-14 * tt3;
    } else {
      cp0_R[12] = 2.356774e+00 + 8.984597e-03 * tt0 - 7.123563e-06 * tt1 + 2.459190e-09 * tt2 - 1.436995e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[13] = 2.772174e+00 + 4.956955e-03 * tt0 - 2.484456e-06 * tt1 + 5.891618e-10 * tt2 - 5.335087e-14 * tt3;
    } else {
      cp0_R[13] = 4.221186e+00 - 3.243925e-03 * tt0 + 1.377994e-05 * tt1 - 1.331441e-08 * tt2 + 4.337689e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[14] = 2.285718e+00 + 7.239900e-03 * tt0 - 2.987143e-06 * tt1 + 5.956846e-10 * tt2 - 4.671544e-14 * tt3;
    } else {
      cp0_R[14] = 3.673590e+00 + 2.010952e-03 * tt0 + 5.730219e-06 * tt1 - 6.871174e-09 * tt2 + 2.543857e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[15] = 7.485150e-02 + 1.339095e-02 * tt0 - 5.732858e-06 * tt1 + 1.222925e-09 * tt2 - 1.018152e-13 * tt3;
    } else {
      cp0_R[15] = 5.149876e+00 - 1.367098e-02 * tt0 + 4.918006e-05 * tt1 - 4.847430e-08 * tt2 + 1.666940e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[16] = 1.760690e+00 + 9.200001e-03 * tt0 - 4.422588e-06 * tt1 + 1.006412e-09 * tt2 - 8.838556e-14 * tt3;
    } else {
      cp0_R[16] = 4.793723e+00 - 9.908334e-03 * tt0 + 3.732200e-05 * tt1 - 3.792853e-08 * tt2 + 1.317727e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[17] = 2.874101e+00 + 3.656393e-03 * tt0 - 1.408946e-06 * tt1 + 2.601795e-10 * tt2 - 1.877276e-14 * tt3;
    } else {
      cp0_R[17] = 3.762679e+00 + 9.688721e-04 * tt0 + 2.794898e-06 * tt1 - 3.850912e-09 * tt2 + 1.687417e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[18] = 2.292038e+00 + 4.655886e-03 * tt0 - 2.011919e-06 * tt1 + 4.179060e-10 * tt2 - 3.397164e-14 * tt3;
    } else {
      cp0_R[18] = 4.198604e+00 - 2.366614e-03 * tt0 + 8.232962e-06 * tt1 - 6.688160e-09 * tt2 + 1.943147e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[19] = 2.036111e+00 + 1.464542e-02 * tt0 - 6.710779e-06 * tt1 + 1.472229e-09 * tt2 - 1.257061e-13 * tt3;
    } else {
      cp0_R[19] = 3.959201e+00 - 7.570522e-03 * tt0 + 5.709903e-05 * tt1 - 6.915888e-08 * tt2 + 2.698844e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[20] = 4.757792e+00 + 7.441425e-03 * tt0 - 2.697052e-06 * tt1 + 4.380905e-10 * tt2 - 2.635371e-14 * tt3;
    } else {
      cp0_R[20] = 3.711805e+00 - 2.804633e-03 * tt0 + 3.765510e-05 * tt1 - 4.730721e-08 * tt2 + 1.865884e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[21] = 1.954656e+00 + 1.739727e-02 * tt0 - 7.982067e-06 * tt1 + 1.752177e-09 * tt2 - 1.496416e-13 * tt3;
    } else {
      cp0_R[21] = 4.306466e+00 - 4.186589e-03 * tt0 + 4.971428e-05 * tt1 - 5.991266e-08 * tt2 + 2.305090e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[22] = 1.071881e+00 + 2.168527e-02 * tt0 - 1.002561e-05 * tt1 + 2.214120e-09 * tt2 - 1.900029e-13 * tt3;
    } else {
      cp0_R[22] = 4.291425e+00 - 5.501543e-03 * tt0 + 5.994383e-05 * tt1 - 7.084663e-08 * tt2 + 2.686858e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[23] = 2.878465e+00 + 9.709137e-04 * tt0 + 1.444457e-07 * tt1 - 1.306878e-10 * tt2 + 1.760794e-14 * tt3;
    } else {
      cp0_R[23] = 3.489817e+00 + 3.238355e-04 * tt0 - 1.688991e-06 * tt1 + 3.162173e-09 * tt2 - 1.406091e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[24] = 4.147570e+00 + 5.961667e-03 * tt0 - 2.372949e-06 * tt1 + 4.674122e-10 * tt2 - 3.612352e-14 * tt3;
    } else {
      cp0_R[24] = 8.086811e-01 + 2.336156e-02 * tt0 - 3.551718e-05 * tt1 + 2.801524e-08 * tt2 - 8.500730e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[25] = 1.162587e+01 + 1.008263e-02 * tt0 - 3.479344e-06 * tt1 + 5.433942e-10 * tt2 - 3.165693e-14 * tt3;
    } else {
      cp0_R[25] = 8.132378e-01 + 3.900634e-02 * tt0 - 3.406439e-05 * tt1 + 1.550662e-08 * tt2 - 2.840698e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[26] = 1.240643e+01 + 9.472338e-03 * tt0 - 3.281079e-06 * tt1 + 5.137722e-10 * tt2 - 2.998728e-14 * tt3;
    } else {
      cp0_R[26] = 5.523825e+00 + 2.420683e-02 * tt0 - 1.528990e-05 * tt1 + 5.017284e-09 * tt2 - 6.964064e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[27] = 3.016724e+00 + 1.033023e-02 * tt0 - 4.680823e-06 * tt1 + 1.017633e-09 * tt2 - 8.626070e-14 * tt3;
    } else {
      cp0_R[27] = 3.212466e+00 + 1.514792e-03 * tt0 + 2.592094e-05 * tt1 - 3.576578e-08 * tt2 + 1.471509e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[28] = 5.166201e+00 + 1.084783e-02 * tt0 - 4.465837e-06 * tt1 + 8.062855e-10 * tt2 - 4.841019e-14 * tt3;
    } else {
      cp0_R[28] = 1.013400e+00 + 2.268147e-02 * tt0 - 1.573394e-05 * tt1 + 4.049150e-09 * tt2 + 2.959901e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[29] = 5.404111e+00 + 1.172306e-02 * tt0 - 4.226314e-06 * tt1 + 6.837245e-10 * tt2 - 4.098486e-14 * tt3;
    } else {
      cp0_R[29] = 4.729459e+00 - 3.193286e-03 * tt0 + 4.753492e-05 * tt1 - 5.745861e-08 * tt2 + 2.193111e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[30] = 5.628206e+00 + 4.085340e-03 * tt0 - 1.593455e-06 * tt1 + 2.862605e-10 * tt2 - 1.940783e-14 * tt3;
    } else {
      cp0_R[30] = 2.251721e+00 + 1.765502e-02 * tt0 - 2.372910e-05 * tt1 + 1.727576e-08 * tt2 - 5.066481e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[31] = 4.511297e+00 + 9.003597e-03 * tt0 - 4.169396e-06 * tt1 + 9.233459e-10 * tt2 - 7.948382e-14 * tt3;
    } else {
      cp0_R[31] = 2.135836e+00 + 1.811887e-02 * tt0 - 1.739475e-05 * tt1 + 9.343976e-09 * tt2 - 2.014576e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[32] = 3.167807e+00 + 4.752219e-03 * tt0 - 1.837871e-06 * tt1 + 3.041903e-10 * tt2 - 1.772328e-14 * tt3;
    } else {
      cp0_R[32] = 2.889657e+00 + 1.340996e-02 * tt0 - 2.847695e-05 * tt1 + 2.947910e-08 * tt2 - 1.093315e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[33] = 5.093120e+00 + 5.947585e-03 * tt0 - 2.064965e-06 * tt1 + 3.230067e-10 * tt2 - 1.881251e-14 * tt3;
    } else {
      cp0_R[33] = 4.478323e+00 - 1.350697e-03 * tt0 + 2.784837e-05 * tt1 - 3.648674e-08 * tt2 + 1.479068e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[34] = 1.789708e+00 + 1.409383e-02 * tt0 - 6.365008e-06 * tt1 + 1.381711e-09 * tt2 - 1.170602e-13 * tt3;
    } else {
      cp0_R[34] = 5.715396e+00 - 1.523091e-02 * tt0 + 6.524412e-05 * tt1 - 7.108069e-08 * tt2 + 2.613527e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[35] = 5.404111e+00 + 1.172306e-02 * tt0 - 4.226314e-06 * tt1 + 6.837245e-10 * tt2 - 4.098486e-14 * tt3;
    } else {
      cp0_R[35] = 4.729459e+00 - 3.193286e-03 * tt0 + 4.753492e-05 * tt1 - 5.745861e-08 * tt2 + 2.193111e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[36] = 5.944773e+00 + 7.866721e-03 * tt0 - 2.886588e-06 * tt1 + 4.727088e-10 * tt2 - 2.859986e-14 * tt3;
    } else {
      cp0_R[36] = 4.163426e+00 - 2.326161e-04 * tt0 + 3.426782e-05 * tt1 - 4.410523e-08 * tt2 + 1.727561e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[37] = 4.347171e+00 + 1.862880e-02 * tt0 - 6.779467e-06 * tt1 + 8.165926e-10 * tt2 - 0.000000e+00 * tt3;
    } else {
      cp0_R[37] = 5.765358e-01 + 2.894512e-02 * tt0 - 1.610020e-05 * tt1 + 3.591641e-09 * tt2 - 0.000000e+00 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[38] = 7.522447e+00 + 1.104927e-02 * tt0 - 3.725765e-06 * tt1 + 5.728274e-10 * tt2 - 3.300618e-14 * tt3;
    } else {
      cp0_R[38] = 1.177147e+00 + 2.481157e-02 * tt0 - 1.502995e-05 * tt1 + 4.790068e-09 * tt2 - 6.409942e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[39] = 7.265703e+00 + 1.095889e-02 * tt0 - 3.636628e-06 * tt1 + 5.536598e-10 * tt2 - 3.170123e-14 * tt3;
    } else {
      cp0_R[39] = 1.839746e+00 + 1.877894e-02 * tt0 - 4.605443e-06 * tt1 - 2.131170e-09 * tt2 + 9.437727e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[40] = 8.311824e+00 + 1.034263e-02 * tt0 - 3.391861e-06 * tt1 + 5.122126e-10 * tt2 - 2.916017e-14 * tt3;
    } else {
      cp0_R[40] = -2.712964e-01 + 2.988398e-02 * tt0 - 1.970905e-05 * tt1 + 6.373399e-09 * tt2 - 7.779651e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[41] = 6.316872e+00 + 1.113373e-02 * tt0 - 3.962938e-06 * tt1 + 6.356424e-10 * tt2 - 3.787554e-14 * tt3;
    } else {
      cp0_R[41] = 2.613044e+00 + 1.212258e-02 * tt0 + 1.853988e-05 * tt1 - 3.452515e-08 * tt2 + 1.533508e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[42] = 7.142219e+00 + 7.619020e-03 * tt0 - 2.674600e-06 * tt1 + 4.249148e-10 * tt2 - 2.514754e-14 * tt3;
    } else {
      cp0_R[42] = 1.351109e+00 + 3.274112e-02 * tt0 - 4.738271e-05 * tt1 + 3.763098e-08 * tt2 - 1.185409e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[43] = 6.500788e+00 + 1.432473e-02 * tt0 - 5.678163e-06 * tt1 + 1.108080e-09 * tt2 - 9.036389e-14 * tt3;
    } else {
      cp0_R[43] = 1.363184e+00 + 1.981382e-02 * tt0 + 1.249706e-05 * tt1 - 3.335555e-08 * tt2 + 1.584657e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[44] = 6.732257e+00 + 1.490834e-02 * tt0 - 4.949899e-06 * tt1 + 7.212022e-10 * tt2 - 3.766204e-14 * tt3;
    } else {
      cp0_R[44] = 1.493307e+00 + 2.092518e-02 * tt0 + 4.486794e-06 * tt1 - 1.668912e-08 * tt2 + 7.158146e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[45] = 7.524415e+00 + 1.889828e-02 * tt0 - 6.292104e-06 * tt1 + 9.216146e-10 * tt2 - 4.868448e-14 * tt3;
    } else {
      cp0_R[45] = 9.285109e-01 + 2.646057e-02 * tt0 + 6.033245e-06 * tt1 - 2.191495e-08 * tt2 + 9.496154e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[46] = 6.519274e+00 + 1.722010e-02 * tt0 - 5.736422e-06 * tt1 + 8.413073e-10 * tt2 - 4.456591e-14 * tt3;
    } else {
      cp0_R[46] = 1.444920e+00 + 2.099911e-02 * tt0 + 7.703622e-06 * tt1 - 1.847625e-08 * tt2 + 7.128296e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[47] = 7.709748e+00 + 1.603149e-02 * tt0 - 5.272024e-06 * tt1 + 7.588835e-10 * tt2 - 3.886272e-14 * tt3;
    } else {
      cp0_R[47] = 1.049117e+00 + 2.600897e-02 * tt0 + 2.354252e-06 * tt1 - 1.959513e-08 * tt2 + 9.372021e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[48] = 1.461400e+01 + 1.437230e-02 * tt0 - 4.886351e-06 * tt1 + 7.565196e-10 * tt2 - 4.383650e-14 * tt3;
    } else {
      cp0_R[48] = 1.910050e+00 + 4.116668e-02 * tt0 - 2.516302e-05 * tt1 + 7.118569e-09 * tt2 - 6.988387e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[49] = 1.702853e+01 + 1.307168e-02 * tt0 - 4.593109e-06 * tt1 + 7.261352e-10 * tt2 - 4.266583e-14 * tt3;
    } else {
      cp0_R[49] = 7.689330e-01 + 5.469059e-02 * tt0 - 4.650724e-05 * tt1 + 2.031596e-08 * tt2 - 3.583990e-12 * tt3;
    };

    if(tt0 > 1.392000e+03) {
      cp0_R[50] = 1.249402e+01 + 2.177263e-02 * tt0 - 7.442722e-06 * tt1 + 1.154870e-09 * tt2 - 6.697129e-14 * tt3;
    } else {
      cp0_R[50] = -4.557568e-01 + 4.803234e-02 * tt0 - 2.654976e-05 * tt1 + 6.925447e-09 * tt2 - 6.383175e-13 * tt3;
    };

    if(tt0 > 1.391000e+03) {
      cp0_R[51] = 1.207797e+01 + 1.962648e-02 * tt0 - 6.713022e-06 * tt1 + 1.042064e-09 * tt2 - 6.044693e-14 * tt3;
    } else {
      cp0_R[51] = 3.207309e-01 + 4.346545e-02 * tt0 - 2.405850e-05 * tt1 + 6.282453e-09 * tt2 - 5.801132e-13 * tt3;
    };

    if(tt0 > 1.381000e+03) {
      cp0_R[52] = 1.169343e+01 + 1.964023e-02 * tt0 - 6.653065e-06 * tt1 + 1.026319e-09 * tt2 - 5.928263e-14 * tt3;
    } else {
      cp0_R[52] = 8.491600e-01 + 3.820853e-02 * tt0 - 1.496268e-05 * tt1 + 2.044992e-10 * tt2 + 8.242544e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[53] = 2.053584e+00 + 3.435050e-02 * tt0 - 1.588320e-05 * tt1 + 3.308966e-09 * tt2 - 2.536104e-13 * tt3;
    } else {
      cp0_R[53] = 1.181138e+00 + 3.085338e-02 * tt0 + 5.086524e-06 * tt1 - 2.465488e-08 * tt2 + 1.111019e-11 * tt3;
    };

    if(tt0 > 1.389000e+03) {
      cp0_R[54] = 1.640311e+01 + 2.093610e-02 * tt0 - 7.233930e-06 * tt1 + 1.130590e-09 * tt2 - 6.589387e-14 * tt3;
    } else {
      cp0_R[54] = 1.326890e+00 + 5.627856e-02 * tt0 - 4.017178e-05 * tt1 + 1.571210e-08 * tt2 - 2.629484e-12 * tt3;
    };

    if(tt0 > 1.377000e+03) {
      cp0_R[55] = 1.764422e+01 + 1.917065e-02 * tt0 - 6.571686e-06 * tt1 + 1.022466e-09 * tt2 - 5.943047e-14 * tt3;
    } else {
      cp0_R[55] = 1.941063e+00 + 5.187894e-02 * tt0 - 3.104117e-05 * tt1 + 8.635689e-09 * tt2 - 8.428420e-13 * tt3;
    };

    if(tt0 > 1.386000e+03) {
      cp0_R[56] = 1.964308e+01 + 1.809406e-02 * tt0 - 6.330632e-06 * tt1 + 9.978604e-10 * tt2 - 5.850765e-14 * tt3;
    } else {
      cp0_R[56] = 2.748835e+00 + 5.869367e-02 * tt0 - 4.496059e-05 * tt1 + 1.832001e-08 * tt2 - 3.117654e-12 * tt3;
    };

  };

  void getEnthalpies_RT(double& T, std::vector<double>& h0_RT) {

    double tt0 = T;
    double tt1 = T * tt0;
    double tt2 = T * tt1;
    double tt3 = T * tt2;
    double tt4 = 1.0 / T;
    double tt5 = tt4 / T;
    double tt6 = std::log(tt0) * tt4;

    if(tt0 > 1.000000e+03) {
      h0_RT[0] = 2.926640e+00 + 1.487977e-03 * 0.50 * tt0 - 5.684760e-07 * OneThird * tt1 + 1.009704e-10 * 0.25 * tt2 - 6.753351e-15 * 0.20 * tt3 - 9.227977e+02 * tt4;
    } else {
      h0_RT[0] = 3.298677e+00 + 1.408240e-03 * 0.50 * tt0 - 3.963222e-06 * OneThird * tt1 + 5.641515e-09 * 0.25 * tt2 - 2.444854e-12 * 0.20 * tt3 - 1.020900e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[1] = 2.500000e+00 - 0.000000e+00 * 0.50 * tt0 - 0.000000e+00 * OneThird * tt1 - 0.000000e+00 * 0.25 * tt2 - 0.000000e+00 * 0.20 * tt3 - 7.453750e+02 * tt4;
    } else {
      h0_RT[1] = 2.500000e+00 - 0.000000e+00 * 0.50 * tt0 - 0.000000e+00 * OneThird * tt1 - 0.000000e+00 * 0.25 * tt2 - 0.000000e+00 * 0.20 * tt3 - 7.453750e+02 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[2] = 2.500000e+00 - 0.000000e+00 * 0.50 * tt0 - 0.000000e+00 * OneThird * tt1 - 0.000000e+00 * 0.25 * tt2 - 0.000000e+00 * 0.20 * tt3 - 7.453750e+02 * tt4;
    } else {
      h0_RT[2] = 2.500000e+00 - 0.000000e+00 * 0.50 * tt0 - 0.000000e+00 * OneThird * tt1 - 0.000000e+00 * 0.25 * tt2 - 0.000000e+00 * 0.20 * tt3 - 7.453750e+02 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[3] = 2.500000e+00 - 2.308430e-11 * 0.50 * tt0 + 1.615619e-14 * OneThird * tt1 - 4.735152e-18 * 0.25 * tt2 + 4.981974e-22 * 0.20 * tt3 + 2.547366e+04 * tt4;
    } else {
      h0_RT[3] = 2.500000e+00 + 7.053328e-13 * 0.50 * tt0 - 1.995920e-15 * OneThird * tt1 + 2.300816e-18 * 0.25 * tt2 - 9.277323e-22 * 0.20 * tt3 + 2.547366e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[4] = 3.282538e+00 + 1.483088e-03 * 0.50 * tt0 - 7.579667e-07 * OneThird * tt1 + 2.094706e-10 * 0.25 * tt2 - 2.167178e-14 * 0.20 * tt3 - 1.088458e+03 * tt4;
    } else {
      h0_RT[4] = 3.782456e+00 - 2.996734e-03 * 0.50 * tt0 + 9.847302e-06 * OneThird * tt1 - 9.681295e-09 * 0.25 * tt2 + 3.243728e-12 * 0.20 * tt3 - 1.063944e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[5] = 2.864729e+00 + 1.056504e-03 * 0.50 * tt0 - 2.590828e-07 * OneThird * tt1 + 3.052187e-11 * 0.25 * tt2 - 1.331959e-15 * 0.20 * tt3 + 3.718858e+03 * tt4;
    } else {
      h0_RT[5] = 4.125306e+00 - 3.225449e-03 * 0.50 * tt0 + 6.527647e-06 * OneThird * tt1 - 5.798536e-09 * 0.25 * tt2 + 2.062374e-12 * 0.20 * tt3 + 3.381538e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[6] = 2.569421e+00 - 8.597411e-05 * 0.50 * tt0 + 4.194846e-08 * OneThird * tt1 - 1.001778e-11 * 0.25 * tt2 + 1.228337e-15 * 0.20 * tt3 + 2.921758e+04 * tt4;
    } else {
      h0_RT[6] = 3.168267e+00 - 3.279319e-03 * 0.50 * tt0 + 6.643064e-06 * OneThird * tt1 - 6.128066e-09 * 0.25 * tt2 + 2.112660e-12 * 0.20 * tt3 + 2.912226e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[7] = 3.337279e+00 - 4.940247e-05 * 0.50 * tt0 + 4.994568e-07 * OneThird * tt1 - 1.795664e-10 * 0.25 * tt2 + 2.002554e-14 * 0.20 * tt3 - 9.501589e+02 * tt4;
    } else {
      h0_RT[7] = 2.344331e+00 + 7.980521e-03 * 0.50 * tt0 - 1.947815e-05 * OneThird * tt1 + 2.015721e-08 * 0.25 * tt2 - 7.376118e-12 * 0.20 * tt3 - 9.179352e+02 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[8] = 3.033992e+00 + 2.176918e-03 * 0.50 * tt0 - 1.640725e-07 * OneThird * tt1 - 9.704199e-11 * 0.25 * tt2 + 1.682010e-14 * 0.20 * tt3 - 3.000430e+04 * tt4;
    } else {
      h0_RT[8] = 4.198641e+00 - 2.036434e-03 * 0.50 * tt0 + 6.520402e-06 * OneThird * tt1 - 5.487971e-09 * 0.25 * tt2 + 1.771978e-12 * 0.20 * tt3 - 3.029373e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[9] = 4.017211e+00 + 2.239820e-03 * 0.50 * tt0 - 6.336581e-07 * OneThird * tt1 + 1.142464e-10 * 0.25 * tt2 - 1.079085e-14 * 0.20 * tt3 + 1.118567e+02 * tt4;
    } else {
      h0_RT[9] = 4.301798e+00 - 4.749121e-03 * 0.50 * tt0 + 2.115829e-05 * OneThird * tt1 - 2.427639e-08 * 0.25 * tt2 + 9.292251e-12 * 0.20 * tt3 + 2.948080e+02 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[10] = 4.165003e+00 + 4.908317e-03 * 0.50 * tt0 - 1.901392e-06 * OneThird * tt1 + 3.711860e-10 * 0.25 * tt2 - 2.879083e-14 * 0.20 * tt3 - 1.786179e+04 * tt4;
    } else {
      h0_RT[10] = 4.276113e+00 - 5.428224e-04 * 0.50 * tt0 + 1.673357e-05 * OneThird * tt1 - 2.157708e-08 * 0.25 * tt2 + 8.624544e-12 * 0.20 * tt3 - 1.770258e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[11] = 2.715186e+00 + 2.062527e-03 * 0.50 * tt0 - 9.988258e-07 * OneThird * tt1 + 2.300530e-10 * 0.25 * tt2 - 2.036477e-14 * 0.20 * tt3 - 1.415187e+04 * tt4;
    } else {
      h0_RT[11] = 3.579533e+00 - 6.103537e-04 * 0.50 * tt0 + 1.016814e-06 * OneThird * tt1 + 9.070059e-10 * 0.25 * tt2 - 9.044245e-13 * 0.20 * tt3 - 1.434409e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[12] = 3.857460e+00 + 4.414370e-03 * 0.50 * tt0 - 2.214814e-06 * OneThird * tt1 + 5.234902e-10 * 0.25 * tt2 - 4.720842e-14 * 0.20 * tt3 - 4.875917e+04 * tt4;
    } else {
      h0_RT[12] = 2.356774e+00 + 8.984597e-03 * 0.50 * tt0 - 7.123563e-06 * OneThird * tt1 + 2.459190e-09 * 0.25 * tt2 - 1.436995e-13 * 0.20 * tt3 - 4.837197e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[13] = 2.772174e+00 + 4.956955e-03 * 0.50 * tt0 - 2.484456e-06 * OneThird * tt1 + 5.891618e-10 * 0.25 * tt2 - 5.335087e-14 * 0.20 * tt3 + 4.011918e+03 * tt4;
    } else {
      h0_RT[13] = 4.221186e+00 - 3.243925e-03 * 0.50 * tt0 + 1.377994e-05 * OneThird * tt1 - 1.331441e-08 * 0.25 * tt2 + 4.337689e-12 * 0.20 * tt3 + 3.839565e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[14] = 2.285718e+00 + 7.239900e-03 * 0.50 * tt0 - 2.987143e-06 * OneThird * tt1 + 5.956846e-10 * 0.25 * tt2 - 4.671544e-14 * 0.20 * tt3 + 1.677558e+04 * tt4;
    } else {
      h0_RT[14] = 3.673590e+00 + 2.010952e-03 * 0.50 * tt0 + 5.730219e-06 * OneThird * tt1 - 6.871174e-09 * 0.25 * tt2 + 2.543857e-12 * 0.20 * tt3 + 1.644500e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[15] = 7.485150e-02 + 1.339095e-02 * 0.50 * tt0 - 5.732858e-06 * OneThird * tt1 + 1.222925e-09 * 0.25 * tt2 - 1.018152e-13 * 0.20 * tt3 - 9.468345e+03 * tt4;
    } else {
      h0_RT[15] = 5.149876e+00 - 1.367098e-02 * 0.50 * tt0 + 4.918006e-05 * OneThird * tt1 - 4.847430e-08 * 0.25 * tt2 + 1.666940e-11 * 0.20 * tt3 - 1.024665e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[16] = 1.760690e+00 + 9.200001e-03 * 0.50 * tt0 - 4.422588e-06 * OneThird * tt1 + 1.006412e-09 * 0.25 * tt2 - 8.838556e-14 * 0.20 * tt3 - 1.399583e+04 * tt4;
    } else {
      h0_RT[16] = 4.793723e+00 - 9.908334e-03 * 0.50 * tt0 + 3.732200e-05 * OneThird * tt1 - 3.792853e-08 * 0.25 * tt2 + 1.317727e-11 * 0.20 * tt3 - 1.430896e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[17] = 2.874101e+00 + 3.656393e-03 * 0.50 * tt0 - 1.408946e-06 * OneThird * tt1 + 2.601795e-10 * 0.25 * tt2 - 1.877276e-14 * 0.20 * tt3 + 4.626360e+04 * tt4;
    } else {
      h0_RT[17] = 3.762679e+00 + 9.688721e-04 * 0.50 * tt0 + 2.794898e-06 * OneThird * tt1 - 3.850912e-09 * 0.25 * tt2 + 1.687417e-12 * 0.20 * tt3 + 4.600404e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[18] = 2.292038e+00 + 4.655886e-03 * 0.50 * tt0 - 2.011919e-06 * OneThird * tt1 + 4.179060e-10 * 0.25 * tt2 - 3.397164e-14 * 0.20 * tt3 + 5.092600e+04 * tt4;
    } else {
      h0_RT[18] = 4.198604e+00 - 2.366614e-03 * 0.50 * tt0 + 8.232962e-06 * OneThird * tt1 - 6.688160e-09 * 0.25 * tt2 + 1.943147e-12 * 0.20 * tt3 + 5.049682e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[19] = 2.036111e+00 + 1.464542e-02 * 0.50 * tt0 - 6.710779e-06 * OneThird * tt1 + 1.472229e-09 * 0.25 * tt2 - 1.257061e-13 * 0.20 * tt3 + 4.939886e+03 * tt4;
    } else {
      h0_RT[19] = 3.959201e+00 - 7.570522e-03 * 0.50 * tt0 + 5.709903e-05 * OneThird * tt1 - 6.915888e-08 * 0.25 * tt2 + 2.698844e-11 * 0.20 * tt3 + 5.089776e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[20] = 4.757792e+00 + 7.441425e-03 * 0.50 * tt0 - 2.697052e-06 * OneThird * tt1 + 4.380905e-10 * 0.25 * tt2 - 2.635371e-14 * 0.20 * tt3 + 3.901392e+02 * tt4;
    } else {
      h0_RT[20] = 3.711805e+00 - 2.804633e-03 * 0.50 * tt0 + 3.765510e-05 * OneThird * tt1 - 4.730721e-08 * 0.25 * tt2 + 1.865884e-11 * 0.20 * tt3 + 1.307725e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[21] = 1.954656e+00 + 1.739727e-02 * 0.50 * tt0 - 7.982067e-06 * OneThird * tt1 + 1.752177e-09 * 0.25 * tt2 - 1.496416e-13 * 0.20 * tt3 + 1.285752e+04 * tt4;
    } else {
      h0_RT[21] = 4.306466e+00 - 4.186589e-03 * 0.50 * tt0 + 4.971428e-05 * OneThird * tt1 - 5.991266e-08 * 0.25 * tt2 + 2.305090e-11 * 0.20 * tt3 + 1.284163e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[22] = 1.071881e+00 + 2.168527e-02 * 0.50 * tt0 - 1.002561e-05 * OneThird * tt1 + 2.214120e-09 * 0.25 * tt2 - 1.900029e-13 * 0.20 * tt3 - 1.142639e+04 * tt4;
    } else {
      h0_RT[22] = 4.291425e+00 - 5.501543e-03 * 0.50 * tt0 + 5.994383e-05 * OneThird * tt1 - 7.084663e-08 * 0.25 * tt2 + 2.686858e-11 * 0.20 * tt3 - 1.152221e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[23] = 2.878465e+00 + 9.709137e-04 * 0.50 * tt0 + 1.444457e-07 * OneThird * tt1 - 1.306878e-10 * 0.25 * tt2 + 1.760794e-14 * 0.20 * tt3 + 7.101244e+04 * tt4;
    } else {
      h0_RT[23] = 3.489817e+00 + 3.238355e-04 * 0.50 * tt0 - 1.688991e-06 * OneThird * tt1 + 3.162173e-09 * 0.25 * tt2 - 1.406091e-12 * 0.20 * tt3 + 7.079729e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[24] = 4.147570e+00 + 5.961667e-03 * 0.50 * tt0 - 2.372949e-06 * OneThird * tt1 + 4.674122e-10 * 0.25 * tt2 - 3.612352e-14 * 0.20 * tt3 + 2.593600e+04 * tt4;
    } else {
      h0_RT[24] = 8.086811e-01 + 2.336156e-02 * 0.50 * tt0 - 3.551718e-05 * OneThird * tt1 + 2.801524e-08 * 0.25 * tt2 - 8.500730e-12 * 0.20 * tt3 + 2.642898e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[25] = 1.162587e+01 + 1.008263e-02 * 0.50 * tt0 - 3.479344e-06 * OneThird * tt1 + 5.433942e-10 * 0.25 * tt2 - 3.165693e-14 * 0.20 * tt3 - 9.105683e+02 * tt4;
    } else {
      h0_RT[25] = 8.132378e-01 + 3.900634e-02 * 0.50 * tt0 - 3.406439e-05 * OneThird * tt1 + 1.550662e-08 * 0.25 * tt2 - 2.840698e-12 * 0.20 * tt3 + 2.507858e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[26] = 1.240643e+01 + 9.472338e-03 * 0.50 * tt0 - 3.281079e-06 * OneThird * tt1 + 5.137722e-10 * 0.25 * tt2 - 2.998728e-14 * 0.20 * tt3 - 3.491231e+04 * tt4;
    } else {
      h0_RT[26] = 5.523825e+00 + 2.420683e-02 * 0.50 * tt0 - 1.528990e-05 * OneThird * tt1 + 5.017284e-09 * 0.25 * tt2 - 6.964064e-13 * 0.20 * tt3 - 3.234068e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[27] = 3.016724e+00 + 1.033023e-02 * 0.50 * tt0 - 4.680823e-06 * OneThird * tt1 + 1.017633e-09 * 0.25 * tt2 - 8.626070e-14 * 0.20 * tt3 + 3.461287e+04 * tt4;
    } else {
      h0_RT[27] = 3.212466e+00 + 1.514792e-03 * 0.50 * tt0 + 2.592094e-05 * OneThird * tt1 - 3.576578e-08 * 0.25 * tt2 + 1.471509e-11 * 0.20 * tt3 + 3.485985e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[28] = 5.166201e+00 + 1.084783e-02 * 0.50 * tt0 - 4.465837e-06 * OneThird * tt1 + 8.062855e-10 * 0.25 * tt2 - 4.841019e-14 * 0.20 * tt3 - 7.319935e+02 * tt4;
    } else {
      h0_RT[28] = 1.013400e+00 + 2.268147e-02 * 0.50 * tt0 - 1.573394e-05 * OneThird * tt1 + 4.049150e-09 * 0.25 * tt2 + 2.959901e-13 * 0.20 * tt3 + 3.804285e+02 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[29] = 5.404111e+00 + 1.172306e-02 * 0.50 * tt0 - 4.226314e-06 * OneThird * tt1 + 6.837245e-10 * 0.25 * tt2 - 4.098486e-14 * 0.20 * tt3 - 2.259312e+04 * tt4;
    } else {
      h0_RT[29] = 4.729459e+00 - 3.193286e-03 * 0.50 * tt0 + 4.753492e-05 * OneThird * tt1 - 5.745861e-08 * 0.25 * tt2 + 2.193111e-11 * 0.20 * tt3 - 2.157288e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[30] = 5.628206e+00 + 4.085340e-03 * 0.50 * tt0 - 1.593455e-06 * OneThird * tt1 + 2.862605e-10 * 0.25 * tt2 - 1.940783e-14 * 0.20 * tt3 + 1.932722e+04 * tt4;
    } else {
      h0_RT[30] = 2.251721e+00 + 1.765502e-02 * 0.50 * tt0 - 2.372910e-05 * OneThird * tt1 + 1.727576e-08 * 0.25 * tt2 - 5.066481e-12 * 0.20 * tt3 + 2.005945e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[31] = 4.511297e+00 + 9.003597e-03 * 0.50 * tt0 - 4.169396e-06 * OneThird * tt1 + 9.233459e-10 * 0.25 * tt2 - 7.948382e-14 * 0.20 * tt3 - 7.551053e+03 * tt4;
    } else {
      h0_RT[31] = 2.135836e+00 + 1.811887e-02 * 0.50 * tt0 - 1.739475e-05 * OneThird * tt1 + 9.343976e-09 * 0.25 * tt2 - 2.014576e-12 * 0.20 * tt3 - 7.042918e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[32] = 3.167807e+00 + 4.752219e-03 * 0.50 * tt0 - 1.837871e-06 * OneThird * tt1 + 3.041903e-10 * 0.25 * tt2 - 1.772328e-14 * 0.20 * tt3 + 6.712107e+04 * tt4;
    } else {
      h0_RT[32] = 2.889657e+00 + 1.340996e-02 * 0.50 * tt0 - 2.847695e-05 * OneThird * tt1 + 2.947910e-08 * 0.25 * tt2 - 1.093315e-11 * 0.20 * tt3 + 6.683939e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[33] = 5.093120e+00 + 5.947585e-03 * 0.50 * tt0 - 2.064965e-06 * OneThird * tt1 + 3.230067e-10 * 0.25 * tt2 - 1.881251e-14 * 0.20 * tt3 - 4.058132e+03 * tt4;
    } else {
      h0_RT[33] = 4.478323e+00 - 1.350697e-03 * 0.50 * tt0 + 2.784837e-05 * OneThird * tt1 - 3.648674e-08 * 0.25 * tt2 + 1.479068e-11 * 0.20 * tt3 - 3.524767e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[34] = 1.789708e+00 + 1.409383e-02 * 0.50 * tt0 - 6.365008e-06 * OneThird * tt1 + 1.381711e-09 * 0.25 * tt2 - 1.170602e-13 * 0.20 * tt3 - 2.537487e+04 * tt4;
    } else {
      h0_RT[34] = 5.715396e+00 - 1.523091e-02 * 0.50 * tt0 + 6.524412e-05 * OneThird * tt1 - 7.108069e-08 * 0.25 * tt2 + 2.613527e-11 * 0.20 * tt3 - 2.564277e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[35] = 5.404111e+00 + 1.172306e-02 * 0.50 * tt0 - 4.226314e-06 * OneThird * tt1 + 6.837245e-10 * 0.25 * tt2 - 4.098486e-14 * 0.20 * tt3 - 2.259312e+04 * tt4;
    } else {
      h0_RT[35] = 4.729459e+00 - 3.193286e-03 * 0.50 * tt0 + 4.753492e-05 * OneThird * tt1 - 5.745861e-08 * 0.25 * tt2 + 2.193111e-11 * 0.20 * tt3 - 2.157288e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[36] = 5.944773e+00 + 7.866721e-03 * 0.50 * tt0 - 2.886588e-06 * OneThird * tt1 + 4.727088e-10 * 0.25 * tt2 - 2.859986e-14 * 0.20 * tt3 - 3.787307e+03 * tt4;
    } else {
      h0_RT[36] = 4.163426e+00 - 2.326161e-04 * 0.50 * tt0 + 3.426782e-05 * OneThird * tt1 - 4.410523e-08 * 0.25 * tt2 + 1.727561e-11 * 0.20 * tt3 - 2.657453e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[37] = 4.347171e+00 + 1.862880e-02 * 0.50 * tt0 - 6.779467e-06 * OneThird * tt1 + 8.165926e-10 * 0.25 * tt2 - 0.000000e+00 * 0.20 * tt3 - 3.066157e+04 * tt4;
    } else {
      h0_RT[37] = 5.765358e-01 + 2.894512e-02 * 0.50 * tt0 - 1.610020e-05 * OneThird * tt1 + 3.591641e-09 * 0.25 * tt2 - 0.000000e+00 * 0.20 * tt3 - 2.963595e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[38] = 7.522447e+00 + 1.104927e-02 * 0.50 * tt0 - 3.725765e-06 * OneThird * tt1 + 5.728274e-10 * 0.25 * tt2 - 3.300618e-14 * 0.20 * tt3 - 7.293375e+03 * tt4;
    } else {
      h0_RT[38] = 1.177147e+00 + 2.481157e-02 * 0.50 * tt0 - 1.502995e-05 * OneThird * tt1 + 4.790068e-09 * 0.25 * tt2 - 6.409942e-13 * 0.20 * tt3 - 4.953690e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[39] = 7.265703e+00 + 1.095889e-02 * 0.50 * tt0 - 3.636628e-06 * OneThird * tt1 + 5.536598e-10 * 0.25 * tt2 - 3.170123e-14 * 0.20 * tt3 - 8.643714e+03 * tt4;
    } else {
      h0_RT[39] = 1.839746e+00 + 1.877894e-02 * 0.50 * tt0 - 4.605443e-06 * OneThird * tt1 - 2.131170e-09 * 0.25 * tt2 + 9.437727e-13 * 0.20 * tt3 - 6.295952e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[40] = 8.311824e+00 + 1.034263e-02 * 0.50 * tt0 - 3.391861e-06 * OneThird * tt1 + 5.122126e-10 * 0.25 * tt2 - 2.916017e-14 * 0.20 * tt3 - 6.130980e+03 * tt4;
    } else {
      h0_RT[40] = -2.712964e-01 + 2.988398e-02 * 0.50 * tt0 - 1.970905e-05 * OneThird * tt1 + 6.373399e-09 * 0.25 * tt2 - 7.779651e-13 * 0.20 * tt3 - 3.163972e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[41] = 6.316872e+00 + 1.113373e-02 * 0.50 * tt0 - 3.962938e-06 * OneThird * tt1 + 6.356424e-10 * 0.25 * tt2 - 3.787554e-14 * 0.20 * tt3 + 2.011749e+04 * tt4;
    } else {
      h0_RT[41] = 2.613044e+00 + 1.212258e-02 * 0.50 * tt0 + 1.853988e-05 * OneThird * tt1 - 3.452515e-08 * 0.25 * tt2 + 1.533508e-11 * 0.20 * tt3 + 2.154157e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[42] = 7.142219e+00 + 7.619020e-03 * 0.50 * tt0 - 2.674600e-06 * OneThird * tt1 + 4.249148e-10 * 0.25 * tt2 - 2.514754e-14 * 0.20 * tt3 + 3.890874e+04 * tt4;
    } else {
      h0_RT[42] = 1.351109e+00 + 3.274112e-02 * 0.50 * tt0 - 4.738271e-05 * OneThird * tt1 + 3.763098e-08 * 0.25 * tt2 - 1.185409e-11 * 0.20 * tt3 + 4.010578e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[43] = 6.500788e+00 + 1.432473e-02 * 0.50 * tt0 - 5.678163e-06 * OneThird * tt1 + 1.108080e-09 * 0.25 * tt2 - 9.036389e-14 * 0.20 * tt3 + 1.748245e+04 * tt4;
    } else {
      h0_RT[43] = 1.363184e+00 + 1.981382e-02 * 0.50 * tt0 + 1.249706e-05 * OneThird * tt1 - 3.335555e-08 * 0.25 * tt2 + 1.584657e-11 * 0.20 * tt3 + 1.924563e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[44] = 6.732257e+00 + 1.490834e-02 * 0.50 * tt0 - 4.949899e-06 * OneThird * tt1 + 7.212022e-10 * 0.25 * tt2 - 3.766204e-14 * 0.20 * tt3 - 9.235703e+02 * tt4;
    } else {
      h0_RT[44] = 1.493307e+00 + 2.092518e-02 * 0.50 * tt0 + 4.486794e-06 * OneThird * tt1 - 1.668912e-08 * 0.25 * tt2 + 7.158146e-12 * 0.20 * tt3 + 1.074826e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[45] = 7.524415e+00 + 1.889828e-02 * 0.50 * tt0 - 6.292104e-06 * OneThird * tt1 + 9.216146e-10 * 0.25 * tt2 - 4.868448e-14 * 0.20 * tt3 - 1.656439e+04 * tt4;
    } else {
      h0_RT[45] = 9.285109e-01 + 2.646057e-02 * 0.50 * tt0 + 6.033245e-06 * OneThird * tt1 - 2.191495e-08 * 0.25 * tt2 + 9.496154e-12 * 0.20 * tt3 - 1.405791e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[46] = 6.519274e+00 + 1.722010e-02 * 0.50 * tt0 - 5.736422e-06 * OneThird * tt1 + 8.413073e-10 * 0.25 * tt2 - 4.456591e-14 * 0.20 * tt3 + 7.322719e+03 * tt4;
    } else {
      h0_RT[46] = 1.444920e+00 + 2.099911e-02 * 0.50 * tt0 + 7.703622e-06 * OneThird * tt1 - 1.847625e-08 * 0.25 * tt2 + 7.128296e-12 * 0.20 * tt3 + 9.422372e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[47] = 7.709748e+00 + 1.603149e-02 * 0.50 * tt0 - 5.272024e-06 * OneThird * tt1 + 7.588835e-10 * 0.25 * tt2 - 3.886272e-14 * 0.20 * tt3 + 7.976224e+03 * tt4;
    } else {
      h0_RT[47] = 1.049117e+00 + 2.600897e-02 * 0.50 * tt0 + 2.354252e-06 * OneThird * tt1 - 1.959513e-08 * 0.25 * tt2 + 9.372021e-12 * 0.20 * tt3 + 1.031235e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[48] = 1.461400e+01 + 1.437230e-02 * 0.50 * tt0 - 4.886351e-06 * OneThird * tt1 + 7.565196e-10 * 0.25 * tt2 - 4.383650e-14 * 0.20 * tt3 - 6.461015e+03 * tt4;
    } else {
      h0_RT[48] = 1.910050e+00 + 4.116668e-02 * 0.50 * tt0 - 2.516302e-05 * OneThird * tt1 + 7.118569e-09 * 0.25 * tt2 - 6.988387e-13 * 0.20 * tt3 - 1.793051e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[49] = 1.702853e+01 + 1.307168e-02 * 0.50 * tt0 - 4.593109e-06 * OneThird * tt1 + 7.261352e-10 * 0.25 * tt2 - 4.266583e-14 * 0.20 * tt3 - 4.163342e+04 * tt4;
    } else {
      h0_RT[49] = 7.689330e-01 + 5.469059e-02 * 0.50 * tt0 - 4.650724e-05 * OneThird * tt1 + 2.031596e-08 * 0.25 * tt2 - 3.583990e-12 * 0.20 * tt3 - 3.632389e+04 * tt4;
    };

    if(tt0 > 1.392000e+03) {
      h0_RT[50] = 1.249402e+01 + 2.177263e-02 * 0.50 * tt0 - 7.442722e-06 * OneThird * tt1 + 1.154870e-09 * 0.25 * tt2 - 6.697129e-14 * 0.20 * tt3 - 2.184034e+04 * tt4;
    } else {
      h0_RT[50] = -4.557568e-01 + 4.803234e-02 * 0.50 * tt0 - 2.654976e-05 * OneThird * tt1 + 6.925447e-09 * 0.25 * tt2 - 6.383175e-13 * 0.20 * tt3 - 1.689609e+04 * tt4;
    };

    if(tt0 > 1.391000e+03) {
      h0_RT[51] = 1.207797e+01 + 1.962648e-02 * 0.50 * tt0 - 6.713022e-06 * OneThird * tt1 + 1.042064e-09 * 0.25 * tt2 - 6.044693e-14 * 0.20 * tt3 + 3.225505e+03 * tt4;
    } else {
      h0_RT[51] = 3.207309e-01 + 4.346545e-02 * 0.50 * tt0 - 2.405850e-05 * OneThird * tt1 + 6.282453e-09 * 0.25 * tt2 - 5.801132e-13 * 0.20 * tt3 + 7.714909e+03 * tt4;
    };

    if(tt0 > 1.381000e+03) {
      h0_RT[52] = 1.169343e+01 + 1.964023e-02 * 0.50 * tt0 - 6.653065e-06 * OneThird * tt1 + 1.026319e-09 * 0.25 * tt2 - 5.928263e-14 * 0.20 * tt3 + 1.963824e+03 * tt4;
    } else {
      h0_RT[52] = 8.491600e-01 + 3.820853e-02 * 0.50 * tt0 - 1.496268e-05 * OneThird * tt1 + 2.044992e-10 * 0.25 * tt2 + 8.242544e-13 * 0.20 * tt3 + 6.388330e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[53] = 2.053584e+00 + 3.435050e-02 * 0.50 * tt0 - 1.588320e-05 * OneThird * tt1 + 3.308966e-09 * 0.25 * tt2 - 2.536104e-13 * 0.20 * tt3 - 2.139723e+03 * tt4;
    } else {
      h0_RT[53] = 1.181138e+00 + 3.085338e-02 * 0.50 * tt0 + 5.086524e-06 * OneThird * tt1 - 2.465488e-08 * 0.25 * tt2 + 1.111019e-11 * 0.20 * tt3 - 1.790400e+03 * tt4;
    };

    if(tt0 > 1.389000e+03) {
      h0_RT[54] = 1.640311e+01 + 2.093610e-02 * 0.50 * tt0 - 7.233930e-06 * OneThird * tt1 + 1.130590e-09 * 0.25 * tt2 - 6.589387e-14 * 0.20 * tt3 - 1.850745e+04 * tt4;
    } else {
      h0_RT[54] = 1.326890e+00 + 5.627856e-02 * 0.50 * tt0 - 4.017178e-05 * OneThird * tt1 + 1.571210e-08 * 0.25 * tt2 - 2.629484e-12 * 0.20 * tt3 - 1.315571e+04 * tt4;
    };

    if(tt0 > 1.377000e+03) {
      h0_RT[55] = 1.764422e+01 + 1.917065e-02 * 0.50 * tt0 - 6.571686e-06 * OneThird * tt1 + 1.022466e-09 * 0.25 * tt2 - 5.943047e-14 * 0.20 * tt3 - 1.018593e+04 * tt4;
    } else {
      h0_RT[55] = 1.941063e+00 + 5.187894e-02 * 0.50 * tt0 - 3.104117e-05 * OneThird * tt1 + 8.635689e-09 * 0.25 * tt2 - 8.428420e-13 * 0.20 * tt3 - 4.343160e+03 * tt4;
    };

    if(tt0 > 1.386000e+03) {
      h0_RT[56] = 1.964308e+01 + 1.809406e-02 * 0.50 * tt0 - 6.330632e-06 * OneThird * tt1 + 9.978604e-10 * 0.25 * tt2 - 5.850765e-14 * 0.20 * tt3 - 4.595889e+04 * tt4;
    } else {
      h0_RT[56] = 2.748835e+00 + 5.869367e-02 * 0.50 * tt0 - 4.496059e-05 * OneThird * tt1 + 1.832001e-08 * 0.25 * tt2 - 3.117654e-12 * 0.20 * tt3 - 4.010659e+04 * tt4;
    };

  };

  void getEntropies_R(double& T, std::vector<double>& s0_R) {

    double tt0 = T;
    double tt1 = T * tt0;
    double tt2 = T * tt1;
    double tt3 = T * tt2;
    double tt4 = 1.0 / T;
    double tt5 = tt4 / T;
    double tt6 = std::log(T);

    if(tt0 > 1.000000e+03) {
      s0_R[0] = 2.926640e+00 * tt6 + 1.487977e-03 * tt0 - 5.684760e-07 * 0.50 * tt1 + 1.009704e-10 * OneThird * tt2 - 6.753351e-15 * 0.25 * tt3 + 5.980528e+00;
    } else {
      s0_R[0] = 3.298677e+00 * tt6 + 1.408240e-03 * tt0 - 3.963222e-06 * 0.50 * tt1 + 5.641515e-09 * OneThird * tt2 - 2.444854e-12 * 0.25 * tt3 + 3.950372e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[1] = 2.500000e+00 * tt6 - 0.000000e+00 * tt0 - 0.000000e+00 * 0.50 * tt1 - 0.000000e+00 * OneThird * tt2 - 0.000000e+00 * 0.25 * tt3 + 4.366000e+00;
    } else {
      s0_R[1] = 2.500000e+00 * tt6 - 0.000000e+00 * tt0 - 0.000000e+00 * 0.50 * tt1 - 0.000000e+00 * OneThird * tt2 - 0.000000e+00 * 0.25 * tt3 + 4.366000e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[2] = 2.500000e+00 * tt6 - 0.000000e+00 * tt0 - 0.000000e+00 * 0.50 * tt1 - 0.000000e+00 * OneThird * tt2 - 0.000000e+00 * 0.25 * tt3 + 9.287240e-01;
    } else {
      s0_R[2] = 2.500000e+00 * tt6 - 0.000000e+00 * tt0 - 0.000000e+00 * 0.50 * tt1 - 0.000000e+00 * OneThird * tt2 - 0.000000e+00 * 0.25 * tt3 + 9.287240e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[3] = 2.500000e+00 * tt6 - 2.308430e-11 * tt0 + 1.615619e-14 * 0.50 * tt1 - 4.735152e-18 * OneThird * tt2 + 4.981974e-22 * 0.25 * tt3 - 4.466829e-01;
    } else {
      s0_R[3] = 2.500000e+00 * tt6 + 7.053328e-13 * tt0 - 1.995920e-15 * 0.50 * tt1 + 2.300816e-18 * OneThird * tt2 - 9.277323e-22 * 0.25 * tt3 - 4.466829e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[4] = 3.282538e+00 * tt6 + 1.483088e-03 * tt0 - 7.579667e-07 * 0.50 * tt1 + 2.094706e-10 * OneThird * tt2 - 2.167178e-14 * 0.25 * tt3 + 5.453231e+00;
    } else {
      s0_R[4] = 3.782456e+00 * tt6 - 2.996734e-03 * tt0 + 9.847302e-06 * 0.50 * tt1 - 9.681295e-09 * OneThird * tt2 + 3.243728e-12 * 0.25 * tt3 + 3.657676e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[5] = 2.864729e+00 * tt6 + 1.056504e-03 * tt0 - 2.590828e-07 * 0.50 * tt1 + 3.052187e-11 * OneThird * tt2 - 1.331959e-15 * 0.25 * tt3 + 5.701641e+00;
    } else {
      s0_R[5] = 4.125306e+00 * tt6 - 3.225449e-03 * tt0 + 6.527647e-06 * 0.50 * tt1 - 5.798536e-09 * OneThird * tt2 + 2.062374e-12 * 0.25 * tt3 - 6.904330e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[6] = 2.569421e+00 * tt6 - 8.597411e-05 * tt0 + 4.194846e-08 * 0.50 * tt1 - 1.001778e-11 * OneThird * tt2 + 1.228337e-15 * 0.25 * tt3 + 4.784339e+00;
    } else {
      s0_R[6] = 3.168267e+00 * tt6 - 3.279319e-03 * tt0 + 6.643064e-06 * 0.50 * tt1 - 6.128066e-09 * OneThird * tt2 + 2.112660e-12 * 0.25 * tt3 + 2.051933e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[7] = 3.337279e+00 * tt6 - 4.940247e-05 * tt0 + 4.994568e-07 * 0.50 * tt1 - 1.795664e-10 * OneThird * tt2 + 2.002554e-14 * 0.25 * tt3 - 3.205023e+00;
    } else {
      s0_R[7] = 2.344331e+00 * tt6 + 7.980521e-03 * tt0 - 1.947815e-05 * 0.50 * tt1 + 2.015721e-08 * OneThird * tt2 - 7.376118e-12 * 0.25 * tt3 + 6.830102e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[8] = 3.033992e+00 * tt6 + 2.176918e-03 * tt0 - 1.640725e-07 * 0.50 * tt1 - 9.704199e-11 * OneThird * tt2 + 1.682010e-14 * 0.25 * tt3 + 4.966770e+00;
    } else {
      s0_R[8] = 4.198641e+00 * tt6 - 2.036434e-03 * tt0 + 6.520402e-06 * 0.50 * tt1 - 5.487971e-09 * OneThird * tt2 + 1.771978e-12 * 0.25 * tt3 - 8.490322e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[9] = 4.017211e+00 * tt6 + 2.239820e-03 * tt0 - 6.336581e-07 * 0.50 * tt1 + 1.142464e-10 * OneThird * tt2 - 1.079085e-14 * 0.25 * tt3 + 3.785102e+00;
    } else {
      s0_R[9] = 4.301798e+00 * tt6 - 4.749121e-03 * tt0 + 2.115829e-05 * 0.50 * tt1 - 2.427639e-08 * OneThird * tt2 + 9.292251e-12 * 0.25 * tt3 + 3.716662e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[10] = 4.165003e+00 * tt6 + 4.908317e-03 * tt0 - 1.901392e-06 * 0.50 * tt1 + 3.711860e-10 * OneThird * tt2 - 2.879083e-14 * 0.25 * tt3 + 2.916157e+00;
    } else {
      s0_R[10] = 4.276113e+00 * tt6 - 5.428224e-04 * tt0 + 1.673357e-05 * 0.50 * tt1 - 2.157708e-08 * OneThird * tt2 + 8.624544e-12 * 0.25 * tt3 + 3.435051e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[11] = 2.715186e+00 * tt6 + 2.062527e-03 * tt0 - 9.988258e-07 * 0.50 * tt1 + 2.300530e-10 * OneThird * tt2 - 2.036477e-14 * 0.25 * tt3 + 7.818688e+00;
    } else {
      s0_R[11] = 3.579533e+00 * tt6 - 6.103537e-04 * tt0 + 1.016814e-06 * 0.50 * tt1 + 9.070059e-10 * OneThird * tt2 - 9.044245e-13 * 0.25 * tt3 + 3.508409e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[12] = 3.857460e+00 * tt6 + 4.414370e-03 * tt0 - 2.214814e-06 * 0.50 * tt1 + 5.234902e-10 * OneThird * tt2 - 4.720842e-14 * 0.25 * tt3 + 2.271638e+00;
    } else {
      s0_R[12] = 2.356774e+00 * tt6 + 8.984597e-03 * tt0 - 7.123563e-06 * 0.50 * tt1 + 2.459190e-09 * OneThird * tt2 - 1.436995e-13 * 0.25 * tt3 + 9.901052e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[13] = 2.772174e+00 * tt6 + 4.956955e-03 * tt0 - 2.484456e-06 * 0.50 * tt1 + 5.891618e-10 * OneThird * tt2 - 5.335087e-14 * 0.25 * tt3 + 9.798345e+00;
    } else {
      s0_R[13] = 4.221186e+00 * tt6 - 3.243925e-03 * tt0 + 1.377994e-05 * 0.50 * tt1 - 1.331441e-08 * OneThird * tt2 + 4.337689e-12 * 0.25 * tt3 + 3.394372e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[14] = 2.285718e+00 * tt6 + 7.239900e-03 * tt0 - 2.987143e-06 * 0.50 * tt1 + 5.956846e-10 * OneThird * tt2 - 4.671544e-14 * 0.25 * tt3 + 8.480072e+00;
    } else {
      s0_R[14] = 3.673590e+00 * tt6 + 2.010952e-03 * tt0 + 5.730219e-06 * 0.50 * tt1 - 6.871174e-09 * OneThird * tt2 + 2.543857e-12 * 0.25 * tt3 + 1.604564e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[15] = 7.485150e-02 * tt6 + 1.339095e-02 * tt0 - 5.732858e-06 * 0.50 * tt1 + 1.222925e-09 * OneThird * tt2 - 1.018152e-13 * 0.25 * tt3 + 1.843732e+01;
    } else {
      s0_R[15] = 5.149876e+00 * tt6 - 1.367098e-02 * tt0 + 4.918006e-05 * 0.50 * tt1 - 4.847430e-08 * OneThird * tt2 + 1.666940e-11 * 0.25 * tt3 - 4.641304e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[16] = 1.760690e+00 * tt6 + 9.200001e-03 * tt0 - 4.422588e-06 * 0.50 * tt1 + 1.006412e-09 * OneThird * tt2 - 8.838556e-14 * 0.25 * tt3 + 1.365632e+01;
    } else {
      s0_R[16] = 4.793723e+00 * tt6 - 9.908334e-03 * tt0 + 3.732200e-05 * 0.50 * tt1 - 3.792853e-08 * OneThird * tt2 + 1.317727e-11 * 0.25 * tt3 + 6.028129e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[17] = 2.874101e+00 * tt6 + 3.656393e-03 * tt0 - 1.408946e-06 * 0.50 * tt1 + 2.601795e-10 * OneThird * tt2 - 1.877276e-14 * 0.25 * tt3 + 6.171193e+00;
    } else {
      s0_R[17] = 3.762679e+00 * tt6 + 9.688721e-04 * tt0 + 2.794898e-06 * 0.50 * tt1 - 3.850912e-09 * OneThird * tt2 + 1.687417e-12 * 0.25 * tt3 + 1.562532e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[18] = 2.292038e+00 * tt6 + 4.655886e-03 * tt0 - 2.011919e-06 * 0.50 * tt1 + 4.179060e-10 * OneThird * tt2 - 3.397164e-14 * 0.25 * tt3 + 8.626502e+00;
    } else {
      s0_R[18] = 4.198604e+00 * tt6 - 2.366614e-03 * tt0 + 8.232962e-06 * 0.50 * tt1 - 6.688160e-09 * OneThird * tt2 + 1.943147e-12 * 0.25 * tt3 - 7.691190e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[19] = 2.036111e+00 * tt6 + 1.464542e-02 * tt0 - 6.710779e-06 * 0.50 * tt1 + 1.472229e-09 * OneThird * tt2 - 1.257061e-13 * 0.25 * tt3 + 1.030537e+01;
    } else {
      s0_R[19] = 3.959201e+00 * tt6 - 7.570522e-03 * tt0 + 5.709903e-05 * 0.50 * tt1 - 6.915888e-08 * OneThird * tt2 + 2.698844e-11 * 0.25 * tt3 + 4.097331e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[20] = 4.757792e+00 * tt6 + 7.441425e-03 * tt0 - 2.697052e-06 * 0.50 * tt1 + 4.380905e-10 * OneThird * tt2 - 2.635371e-14 * 0.25 * tt3 - 1.966800e+00;
    } else {
      s0_R[20] = 3.711805e+00 * tt6 - 2.804633e-03 * tt0 + 3.765510e-05 * 0.50 * tt1 - 4.730721e-08 * OneThird * tt2 + 1.865884e-11 * 0.25 * tt3 + 6.572409e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[21] = 1.954656e+00 * tt6 + 1.739727e-02 * tt0 - 7.982067e-06 * 0.50 * tt1 + 1.752177e-09 * OneThird * tt2 - 1.496416e-13 * 0.25 * tt3 + 1.346243e+01;
    } else {
      s0_R[21] = 4.306466e+00 * tt6 - 4.186589e-03 * tt0 + 4.971428e-05 * 0.50 * tt1 - 5.991266e-08 * OneThird * tt2 + 2.305090e-11 * 0.25 * tt3 + 4.707209e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[22] = 1.071881e+00 * tt6 + 2.168527e-02 * tt0 - 1.002561e-05 * 0.50 * tt1 + 2.214120e-09 * OneThird * tt2 - 1.900029e-13 * 0.25 * tt3 + 1.511561e+01;
    } else {
      s0_R[22] = 4.291425e+00 * tt6 - 5.501543e-03 * tt0 + 5.994383e-05 * 0.50 * tt1 - 7.084663e-08 * OneThird * tt2 + 2.686858e-11 * 0.25 * tt3 + 2.666823e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[23] = 2.878465e+00 * tt6 + 9.709137e-04 * tt0 + 1.444457e-07 * 0.50 * tt1 - 1.306878e-10 * OneThird * tt2 + 1.760794e-14 * 0.25 * tt3 + 5.484980e+00;
    } else {
      s0_R[23] = 3.489817e+00 * tt6 + 3.238355e-04 * tt0 - 1.688991e-06 * 0.50 * tt1 + 3.162173e-09 * OneThird * tt2 - 1.406091e-12 * 0.25 * tt3 + 2.084011e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[24] = 4.147570e+00 * tt6 + 5.961667e-03 * tt0 - 2.372949e-06 * 0.50 * tt1 + 4.674122e-10 * OneThird * tt2 - 3.612352e-14 * 0.25 * tt3 - 1.230281e+00;
    } else {
      s0_R[24] = 8.086811e-01 * tt6 + 2.336156e-02 * tt0 - 3.551718e-05 * 0.50 * tt1 + 2.801524e-08 * OneThird * tt2 - 8.500730e-12 * 0.25 * tt3 + 1.393971e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[25] = 1.162587e+01 * tt6 + 1.008263e-02 * tt0 - 3.479344e-06 * 0.50 * tt1 + 5.433942e-10 * OneThird * tt2 - 3.165693e-14 * 0.25 * tt3 - 3.185229e+01;
    } else {
      s0_R[25] = 8.132378e-01 * tt6 + 3.900634e-02 * tt0 - 3.406439e-05 * 0.50 * tt1 + 1.550662e-08 * OneThird * tt2 - 2.840698e-12 * 0.25 * tt3 + 2.496845e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[26] = 1.240643e+01 * tt6 + 9.472338e-03 * tt0 - 3.281079e-06 * 0.50 * tt1 + 5.137722e-10 * OneThird * tt2 - 2.998728e-14 * 0.25 * tt3 - 3.394799e+01;
    } else {
      s0_R[26] = 5.523825e+00 * tt6 + 2.420683e-02 * tt0 - 1.528990e-05 * 0.50 * tt1 + 5.017284e-09 * OneThird * tt2 - 6.964064e-13 * 0.25 * tt3 + 3.572406e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[27] = 3.016724e+00 * tt6 + 1.033023e-02 * tt0 - 4.680823e-06 * 0.50 * tt1 + 1.017633e-09 * OneThird * tt2 - 8.626070e-14 * 0.25 * tt3 + 7.787324e+00;
    } else {
      s0_R[27] = 3.212466e+00 * tt6 + 1.514792e-03 * tt0 + 2.592094e-05 * 0.50 * tt1 - 3.576578e-08 * OneThird * tt2 + 1.471509e-11 * 0.25 * tt3 + 8.510540e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[28] = 5.166201e+00 * tt6 + 1.084783e-02 * tt0 - 4.465837e-06 * 0.50 * tt1 + 8.062855e-10 * OneThird * tt2 - 4.841019e-14 * 0.25 * tt3 - 1.963336e+00;
    } else {
      s0_R[28] = 1.013400e+00 * tt6 + 2.268147e-02 * tt0 - 1.573394e-05 * 0.50 * tt1 + 4.049150e-09 * OneThird * tt2 + 2.959901e-13 * 0.25 * tt3 + 1.935655e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[29] = 5.404111e+00 * tt6 + 1.172306e-02 * tt0 - 4.226314e-06 * 0.50 * tt1 + 6.837245e-10 * OneThird * tt2 - 4.098486e-14 * 0.25 * tt3 - 3.480792e+00;
    } else {
      s0_R[29] = 4.729459e+00 * tt6 - 3.193286e-03 * tt0 + 4.753492e-05 * 0.50 * tt1 - 5.745861e-08 * OneThird * tt2 + 2.193111e-11 * 0.25 * tt3 + 4.103016e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[30] = 5.628206e+00 * tt6 + 4.085340e-03 * tt0 - 1.593455e-06 * 0.50 * tt1 + 2.862605e-10 * OneThird * tt2 - 1.940783e-14 * 0.25 * tt3 - 3.930260e+00;
    } else {
      s0_R[30] = 2.251721e+00 * tt6 + 1.765502e-02 * tt0 - 2.372910e-05 * 0.50 * tt1 + 1.727576e-08 * OneThird * tt2 - 5.066481e-12 * 0.25 * tt3 + 1.249042e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[31] = 4.511297e+00 * tt6 + 9.003597e-03 * tt0 - 4.169396e-06 * 0.50 * tt1 + 9.233459e-10 * OneThird * tt2 - 7.948382e-14 * 0.25 * tt3 + 6.322472e-01;
    } else {
      s0_R[31] = 2.135836e+00 * tt6 + 1.811887e-02 * tt0 - 1.739475e-05 * 0.50 * tt1 + 9.343976e-09 * OneThird * tt2 - 2.014576e-12 * 0.25 * tt3 + 1.221565e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[32] = 3.167807e+00 * tt6 + 4.752219e-03 * tt0 - 1.837871e-06 * 0.50 * tt1 + 3.041903e-10 * OneThird * tt2 - 1.772328e-14 * 0.25 * tt3 + 6.635895e+00;
    } else {
      s0_R[32] = 2.889657e+00 * tt6 + 1.340996e-02 * tt0 - 2.847695e-05 * 0.50 * tt1 + 2.947910e-08 * OneThird * tt2 - 1.093315e-11 * 0.25 * tt3 + 6.222964e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[33] = 5.093120e+00 * tt6 + 5.947585e-03 * tt0 - 2.064965e-06 * 0.50 * tt1 + 3.230067e-10 * OneThird * tt2 - 1.881251e-14 * 0.25 * tt3 - 1.846906e+00;
    } else {
      s0_R[33] = 4.478323e+00 * tt6 - 1.350697e-03 * tt0 + 2.784837e-05 * 0.50 * tt1 - 3.648674e-08 * OneThird * tt2 + 1.479068e-11 * 0.25 * tt3 + 3.309120e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[34] = 1.789708e+00 * tt6 + 1.409383e-02 * tt0 - 6.365008e-06 * 0.50 * tt1 + 1.381711e-09 * OneThird * tt2 - 1.170602e-13 * 0.25 * tt3 + 1.450236e+01;
    } else {
      s0_R[34] = 5.715396e+00 * tt6 - 1.523091e-02 * tt0 + 6.524412e-05 * 0.50 * tt1 - 7.108069e-08 * OneThird * tt2 + 2.613527e-11 * 0.25 * tt3 - 1.504098e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[35] = 5.404111e+00 * tt6 + 1.172306e-02 * tt0 - 4.226314e-06 * 0.50 * tt1 + 6.837245e-10 * OneThird * tt2 - 4.098486e-14 * 0.25 * tt3 - 3.480792e+00;
    } else {
      s0_R[35] = 4.729459e+00 * tt6 - 3.193286e-03 * tt0 + 4.753492e-05 * 0.50 * tt1 - 5.745861e-08 * OneThird * tt2 + 2.193111e-11 * 0.25 * tt3 + 4.103016e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[36] = 5.944773e+00 * tt6 + 7.866721e-03 * tt0 - 2.886588e-06 * 0.50 * tt1 + 4.727088e-10 * OneThird * tt2 - 2.859986e-14 * 0.25 * tt3 - 5.013675e+00;
    } else {
      s0_R[36] = 4.163426e+00 * tt6 - 2.326161e-04 * tt0 + 3.426782e-05 * 0.50 * tt1 - 4.410523e-08 * OneThird * tt2 + 1.727561e-11 * 0.25 * tt3 + 7.346828e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[37] = 4.347171e+00 * tt6 + 1.862880e-02 * tt0 - 6.779467e-06 * 0.50 * tt1 + 8.165926e-10 * OneThird * tt2 - 0.000000e+00 * 0.25 * tt3 + 3.242473e+00;
    } else {
      s0_R[37] = 5.765358e-01 * tt6 + 2.894512e-02 * tt0 - 1.610020e-05 * 0.50 * tt1 + 3.591641e-09 * OneThird * tt2 - 0.000000e+00 * 0.25 * tt3 + 2.270813e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[38] = 7.522447e+00 * tt6 + 1.104927e-02 * tt0 - 3.725765e-06 * 0.50 * tt1 + 5.728274e-10 * OneThird * tt2 - 3.300618e-14 * 0.25 * tt3 - 1.249607e+01;
    } else {
      s0_R[38] = 1.177147e+00 * tt6 + 2.481157e-02 * tt0 - 1.502995e-05 * 0.50 * tt1 + 4.790068e-09 * OneThird * tt2 - 6.409942e-13 * 0.25 * tt3 + 2.200816e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[39] = 7.265703e+00 * tt6 + 1.095889e-02 * tt0 - 3.636628e-06 * 0.50 * tt1 + 5.536598e-10 * OneThird * tt2 - 3.170123e-14 * 0.25 * tt3 - 1.068229e+01;
    } else {
      s0_R[39] = 1.839746e+00 * tt6 + 1.877894e-02 * tt0 - 4.605443e-06 * 0.50 * tt1 - 2.131170e-09 * OneThird * tt2 + 9.437727e-13 * 0.25 * tt3 + 2.014461e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[40] = 8.311824e+00 * tt6 + 1.034263e-02 * tt0 - 3.391861e-06 * 0.50 * tt1 + 5.122126e-10 * OneThird * tt2 - 2.916017e-14 * 0.25 * tt3 - 2.139856e+01;
    } else {
      s0_R[40] = -2.712964e-01 * tt6 + 2.988398e-02 * tt0 - 1.970905e-05 * 0.50 * tt1 + 6.373399e-09 * OneThird * tt2 - 7.779651e-13 * 0.25 * tt3 + 2.477060e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[41] = 6.316872e+00 * tt6 + 1.113373e-02 * tt0 - 3.962938e-06 * 0.50 * tt1 + 6.356424e-10 * OneThird * tt2 - 3.787554e-14 * 0.25 * tt3 - 1.099577e+01;
    } else {
      s0_R[41] = 2.613044e+00 * tt6 + 1.212258e-02 * tt0 + 1.853988e-05 * 0.50 * tt1 - 3.452515e-08 * OneThird * tt2 + 1.533508e-11 * 0.25 * tt3 + 1.022614e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[42] = 7.142219e+00 * tt6 + 7.619020e-03 * tt0 - 2.674600e-06 * 0.50 * tt1 + 4.249148e-10 * OneThird * tt2 - 2.514754e-14 * 0.25 * tt3 - 1.258484e+01;
    } else {
      s0_R[42] = 1.351109e+00 * tt6 + 3.274112e-02 * tt0 - 4.738271e-05 * 0.50 * tt1 + 3.763098e-08 * OneThird * tt2 - 1.185409e-11 * 0.25 * tt3 + 1.520589e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[43] = 6.500788e+00 * tt6 + 1.432473e-02 * tt0 - 5.678163e-06 * 0.50 * tt1 + 1.108080e-09 * OneThird * tt2 - 9.036389e-14 * 0.25 * tt3 - 1.124305e+01;
    } else {
      s0_R[43] = 1.363184e+00 * tt6 + 1.981382e-02 * tt0 + 1.249706e-05 * 0.50 * tt1 - 3.335555e-08 * OneThird * tt2 + 1.584657e-11 * 0.25 * tt3 + 1.717321e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[44] = 6.732257e+00 * tt6 + 1.490834e-02 * tt0 - 4.949899e-06 * 0.50 * tt1 + 7.212022e-10 * OneThird * tt2 - 3.766204e-14 * 0.25 * tt3 - 1.331335e+01;
    } else {
      s0_R[44] = 1.493307e+00 * tt6 + 2.092518e-02 * tt0 + 4.486794e-06 * 0.50 * tt1 - 1.668912e-08 * OneThird * tt2 + 7.158146e-12 * 0.25 * tt3 + 1.614534e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[45] = 7.524415e+00 * tt6 + 1.889828e-02 * tt0 - 6.292104e-06 * 0.50 * tt1 + 9.216146e-10 * OneThird * tt2 - 4.868448e-14 * 0.25 * tt3 - 1.783837e+01;
    } else {
      s0_R[45] = 9.285109e-01 * tt6 + 2.646057e-02 * tt0 + 6.033245e-06 * 0.50 * tt1 - 2.191495e-08 * OneThird * tt2 + 9.496154e-12 * 0.25 * tt3 + 1.922554e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[46] = 6.519274e+00 * tt6 + 1.722010e-02 * tt0 - 5.736422e-06 * 0.50 * tt1 + 8.413073e-10 * OneThird * tt2 - 4.456591e-14 * 0.25 * tt3 - 9.083021e+00;
    } else {
      s0_R[46] = 1.444920e+00 * tt6 + 2.099911e-02 * tt0 + 7.703622e-06 * 0.50 * tt1 - 1.847625e-08 * OneThird * tt2 + 7.128296e-12 * 0.25 * tt3 + 2.011632e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[47] = 7.709748e+00 * tt6 + 1.603149e-02 * tt0 - 5.272024e-06 * 0.50 * tt1 + 7.588835e-10 * OneThird * tt2 - 3.886272e-14 * 0.25 * tt3 - 1.551530e+01;
    } else {
      s0_R[47] = 1.049117e+00 * tt6 + 2.600897e-02 * tt0 + 2.354252e-06 * 0.50 * tt1 - 1.959513e-08 * OneThird * tt2 + 9.372021e-12 * 0.25 * tt3 + 2.113603e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[48] = 1.461400e+01 * tt6 + 1.437230e-02 * tt0 - 4.886351e-06 * 0.50 * tt1 + 7.565196e-10 * OneThird * tt2 - 4.383650e-14 * 0.25 * tt3 - 4.574782e+01;
    } else {
      s0_R[48] = 1.910050e+00 * tt6 + 4.116668e-02 * tt0 - 2.516302e-05 * 0.50 * tt1 + 7.118569e-09 * OneThird * tt2 - 6.988387e-13 * 0.25 * tt3 + 2.345145e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[49] = 1.702853e+01 * tt6 + 1.307168e-02 * tt0 - 4.593109e-06 * 0.50 * tt1 + 7.261352e-10 * OneThird * tt2 - 4.266583e-14 * 0.25 * tt3 - 5.925136e+01;
    } else {
      s0_R[49] = 7.689330e-01 * tt6 + 5.469059e-02 * tt0 - 4.650724e-05 * 0.50 * tt1 + 2.031596e-08 * OneThird * tt2 - 3.583990e-12 * 0.25 * tt3 + 2.682916e+01;
    };

    if(tt0 > 1.392000e+03) {
      s0_R[50] = 1.249402e+01 * tt6 + 2.177263e-02 * tt0 - 7.442722e-06 * 0.50 * tt1 + 1.154870e-09 * OneThird * tt2 - 6.697129e-14 * 0.25 * tt3 - 4.455589e+01;
    } else {
      s0_R[50] = -4.557568e-01 * tt6 + 4.803234e-02 * tt0 - 2.654976e-05 * 0.50 * tt1 + 6.925447e-09 * OneThird * tt2 - 6.383175e-13 * 0.25 * tt3 + 2.648710e+01;
    };

    if(tt0 > 1.391000e+03) {
      s0_R[51] = 1.207797e+01 * tt6 + 1.962648e-02 * tt0 - 6.713022e-06 * 0.50 * tt1 + 1.042064e-09 * OneThird * tt2 - 6.044693e-14 * 0.25 * tt3 - 3.877194e+01;
    } else {
      s0_R[51] = 3.207309e-01 * tt6 + 4.346545e-02 * tt0 - 2.405850e-05 * 0.50 * tt1 + 6.282453e-09 * OneThird * tt2 - 5.801132e-13 * 0.25 * tt3 + 2.573011e+01;
    };

    if(tt0 > 1.381000e+03) {
      s0_R[52] = 1.169343e+01 * tt6 + 1.964023e-02 * tt0 - 6.653065e-06 * 0.50 * tt1 + 1.026319e-09 * OneThird * tt2 - 5.928263e-14 * 0.25 * tt3 - 3.616267e+01;
    } else {
      s0_R[52] = 8.491600e-01 * tt6 + 3.820853e-02 * tt0 - 1.496268e-05 * 0.50 * tt1 + 2.044992e-10 * OneThird * tt2 + 8.242544e-13 * 0.25 * tt3 + 2.444666e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[53] = 2.053584e+00 * tt6 + 3.435050e-02 * tt0 - 1.588320e-05 * 0.50 * tt1 + 3.308966e-09 * OneThird * tt2 - 2.536104e-13 * 0.25 * tt3 + 1.554320e+01;
    } else {
      s0_R[53] = 1.181138e+00 * tt6 + 3.085338e-02 * tt0 + 5.086524e-06 * 0.50 * tt1 - 2.465488e-08 * OneThird * tt2 + 1.111019e-11 * 0.25 * tt3 + 2.106247e+01;
    };

    if(tt0 > 1.389000e+03) {
      s0_R[54] = 1.640311e+01 * tt6 + 2.093610e-02 * tt0 - 7.233930e-06 * 0.50 * tt1 + 1.130590e-09 * OneThird * tt2 - 6.589387e-14 * 0.25 * tt3 - 5.773316e+01;
    } else {
      s0_R[54] = 1.326890e+00 * tt6 + 5.627856e-02 * tt0 - 4.017178e-05 * 0.50 * tt1 + 1.571210e-08 * OneThird * tt2 - 2.629484e-12 * 0.25 * tt3 + 2.340697e+01;
    };

    if(tt0 > 1.377000e+03) {
      s0_R[55] = 1.764422e+01 * tt6 + 1.917065e-02 * tt0 - 6.571686e-06 * 0.50 * tt1 + 1.022466e-09 * OneThird * tt2 - 5.943047e-14 * 0.25 * tt3 - 6.171158e+01;
    } else {
      s0_R[55] = 1.941063e+00 * tt6 + 5.187894e-02 * tt0 - 3.104117e-05 * 0.50 * tt1 + 8.635689e-09 * OneThird * tt2 - 8.428420e-13 * 0.25 * tt3 + 2.402305e+01;
    };

    if(tt0 > 1.386000e+03) {
      s0_R[56] = 1.964308e+01 * tt6 + 1.809406e-02 * tt0 - 6.330632e-06 * 0.50 * tt1 + 9.978604e-10 * OneThird * tt2 - 5.850765e-14 * 0.25 * tt3 - 7.169051e+01;
    } else {
      s0_R[56] = 2.748835e+00 * tt6 + 5.869367e-02 * tt0 - 4.496059e-05 * 0.50 * tt1 + 1.832001e-08 * OneThird * tt2 - 3.117654e-12 * 0.25 * tt3 + 1.880721e+01;
    };

  };

  void getGibbsFunctions_RT(double& T, std::vector<double>& g0_RT) {

    std::vector<double> h0_RT(kk, 0.0);
    std::vector<double> s0_R(kk, 0.0);

    getEnthalpies_RT(T, h0_RT);
    getEntropies_R(T, s0_R);
    for(int k = 0; k < kk; ++k) { g0_RT[k] = h0_RT[k] - s0_R[k]; }

  };

  void getEquilibriumConstants(double& T, std::vector<double>& keq) {

    double            p0 = OneAtm;
    double              RT = GasConstant * T;
    double              C0 = p0 / RT;
    std::vector<double> g0_RT(kk, 0.0);

    getGibbsFunctions_RT(T, g0_RT);
    for(int k = 0; k < kk; ++k) { g0_RT[k] = exp(g0_RT[k]); }

    keq[0] = ( g0_RT[6] * g0_RT[5] ) / ( g0_RT[3] * g0_RT[4] );
    keq[1] = ( g0_RT[3] * g0_RT[5] ) / ( g0_RT[7] * g0_RT[6] );
    keq[2] = ( g0_RT[3] * g0_RT[8] ) / ( g0_RT[7] * g0_RT[5] );
    keq[3] = ( g0_RT[5] * g0_RT[5] ) / ( g0_RT[8] * g0_RT[6] );
    keq[4] =  C0 * ( g0_RT[7] ) / ( g0_RT[3] * g0_RT[3] );
    keq[5] =  C0 * ( g0_RT[8] ) / ( g0_RT[3] * g0_RT[5] );
    keq[6] =  C0 * ( g0_RT[4] ) / ( g0_RT[6] * g0_RT[6] );
    keq[7] =  C0 * ( g0_RT[5] ) / ( g0_RT[3] * g0_RT[6] );
    keq[8] =  C0 * ( g0_RT[9] ) / ( g0_RT[3] * g0_RT[4] );
    keq[9] = ( g0_RT[5] * g0_RT[5] ) / ( g0_RT[3] * g0_RT[9] );
    keq[10] = ( g0_RT[7] * g0_RT[4] ) / ( g0_RT[3] * g0_RT[9] );
    keq[11] = ( g0_RT[8] * g0_RT[6] ) / ( g0_RT[3] * g0_RT[9] );
    keq[12] = ( g0_RT[4] * g0_RT[5] ) / ( g0_RT[9] * g0_RT[6] );
    keq[13] = ( g0_RT[8] * g0_RT[4] ) / ( g0_RT[9] * g0_RT[5] );
    keq[14] = ( g0_RT[8] * g0_RT[4] ) / ( g0_RT[9] * g0_RT[5] );
    keq[15] =  C0 * ( g0_RT[10] ) / ( g0_RT[5] * g0_RT[5] );
    keq[16] = ( g0_RT[10] * g0_RT[4] ) / ( g0_RT[9] * g0_RT[9] );
    keq[17] = ( g0_RT[10] * g0_RT[4] ) / ( g0_RT[9] * g0_RT[9] );
    keq[18] = ( g0_RT[7] * g0_RT[9] ) / ( g0_RT[3] * g0_RT[10] );
    keq[19] = ( g0_RT[8] * g0_RT[5] ) / ( g0_RT[3] * g0_RT[10] );
    keq[20] = ( g0_RT[8] * g0_RT[9] ) / ( g0_RT[10] * g0_RT[5] );
    keq[21] = ( g0_RT[8] * g0_RT[9] ) / ( g0_RT[10] * g0_RT[5] );
    keq[22] = ( g0_RT[9] * g0_RT[5] ) / ( g0_RT[10] * g0_RT[6] );
    keq[23] =  C0 * ( g0_RT[12] ) / ( g0_RT[11] * g0_RT[6] );
    keq[24] = ( g0_RT[12] * g0_RT[3] ) / ( g0_RT[11] * g0_RT[5] );
    keq[25] = ( g0_RT[12] * g0_RT[5] ) / ( g0_RT[11] * g0_RT[9] );
    keq[26] = ( g0_RT[12] * g0_RT[6] ) / ( g0_RT[11] * g0_RT[4] );
    keq[27] = ( g0_RT[11] * g0_RT[3] ) / ( g0_RT[13] * C0  );
    keq[28] = ( g0_RT[11] * g0_RT[7] ) / ( g0_RT[3] * g0_RT[13] );
    keq[29] = ( g0_RT[11] * g0_RT[5] ) / ( g0_RT[13] * g0_RT[6] );
    keq[30] = ( g0_RT[12] * g0_RT[3] ) / ( g0_RT[13] * g0_RT[6] );
    keq[31] = ( g0_RT[11] * g0_RT[8] ) / ( g0_RT[13] * g0_RT[5] );
    keq[32] = ( g0_RT[11] * g0_RT[9] ) / ( g0_RT[13] * g0_RT[4] );
    keq[33] = ( g0_RT[15] * g0_RT[11] ) / ( g0_RT[14] * g0_RT[13] );
    keq[34] =  C0 * ( g0_RT[16] ) / ( g0_RT[3] * g0_RT[13] );
    keq[35] = ( g0_RT[7] * g0_RT[13] ) / ( g0_RT[16] * g0_RT[3] );
    keq[36] = ( g0_RT[13] * g0_RT[5] ) / ( g0_RT[16] * g0_RT[6] );
    keq[37] = ( g0_RT[8] * g0_RT[13] ) / ( g0_RT[16] * g0_RT[5] );
    keq[38] = ( g0_RT[13] * g0_RT[9] ) / ( g0_RT[16] * g0_RT[4] );
    keq[39] = ( g0_RT[10] * g0_RT[13] ) / ( g0_RT[16] * g0_RT[9] );
    keq[40] = ( g0_RT[14] * g0_RT[7] ) / ( g0_RT[15] * g0_RT[3] );
    keq[41] = ( g0_RT[14] * g0_RT[8] ) / ( g0_RT[15] * g0_RT[5] );
    keq[42] = ( g0_RT[14] * g0_RT[5] ) / ( g0_RT[15] * g0_RT[6] );
    keq[43] = ( g0_RT[14] * g0_RT[9] ) / ( g0_RT[15] * g0_RT[4] );
    keq[44] = ( g0_RT[14] * g0_RT[10] ) / ( g0_RT[15] * g0_RT[9] );
    keq[45] = ( g0_RT[7] * g0_RT[17] ) / ( g0_RT[14] * g0_RT[3] );
    keq[46] = ( g0_RT[7] * g0_RT[18] ) / ( g0_RT[14] * g0_RT[3] );
    keq[47] = ( g0_RT[8] * g0_RT[18] ) / ( g0_RT[14] * g0_RT[5] );
    keq[48] = ( g0_RT[16] * g0_RT[3] ) / ( g0_RT[14] * g0_RT[6] );
    keq[49] = ( g0_RT[19] * g0_RT[3] ) / ( g0_RT[14] * g0_RT[17] );
    keq[50] = ( g0_RT[20] * g0_RT[5] ) / ( g0_RT[14] * g0_RT[9] );
    keq[51] = ( g0_RT[16] * g0_RT[5] ) / ( g0_RT[14] * g0_RT[4] );
    keq[52] = ( g0_RT[20] * g0_RT[6] ) / ( g0_RT[14] * g0_RT[4] );
    keq[53] = ( g0_RT[19] * g0_RT[7] ) / ( g0_RT[14] * g0_RT[14] );
    keq[54] = ( g0_RT[21] * g0_RT[3] ) / ( g0_RT[14] * g0_RT[14] );
    keq[55] =  C0 * ( g0_RT[15] ) / ( g0_RT[14] * g0_RT[3] );
    keq[56] =  C0 * ( g0_RT[22] ) / ( g0_RT[14] * g0_RT[14] );
    keq[57] = ( g0_RT[16] * g0_RT[3] ) / ( g0_RT[5] * g0_RT[18] );
    keq[58] = ( g0_RT[11] * g0_RT[3] * g0_RT[5] ) / ( g0_RT[4] * g0_RT[18] * C0  );
    keq[59] = ( g0_RT[16] * g0_RT[11] ) / ( g0_RT[12] * g0_RT[18] );
    keq[60] = ( g0_RT[17] ) / ( g0_RT[18] );
    keq[61] = ( g0_RT[23] * g0_RT[7] ) / ( g0_RT[3] * g0_RT[17] );
    keq[62] = ( g0_RT[16] * g0_RT[3] ) / ( g0_RT[5] * g0_RT[17] );
    keq[63] = ( g0_RT[23] * g0_RT[8] ) / ( g0_RT[5] * g0_RT[17] );
    keq[64] = ( g0_RT[11] * g0_RT[3] * g0_RT[3] ) / ( g0_RT[6] * g0_RT[17] * C0  );
    keq[65] = ( g0_RT[11] * g0_RT[7] ) / ( g0_RT[6] * g0_RT[17] );
    keq[66] = ( g0_RT[12] * g0_RT[7] ) / ( g0_RT[4] * g0_RT[17] );
    keq[67] = ( g0_RT[11] * g0_RT[3] * g0_RT[5] ) / ( g0_RT[4] * g0_RT[17] * C0  );
    keq[68] = ( g0_RT[24] * g0_RT[3] * g0_RT[3] ) / ( g0_RT[17] * g0_RT[17] * C0  );
    keq[69] = ( g0_RT[11] * g0_RT[3] ) / ( g0_RT[23] * g0_RT[6] );
    keq[70] = ( g0_RT[13] * g0_RT[6] ) / ( g0_RT[23] * g0_RT[4] );
    keq[71] = ( g0_RT[16] * g0_RT[3] ) / ( g0_RT[23] * g0_RT[8] );
    keq[72] = ( g0_RT[11] * g0_RT[13] ) / ( g0_RT[23] * g0_RT[12] );
    keq[73] = ( g0_RT[16] * g0_RT[7] ) / ( g0_RT[20] * g0_RT[3] );
    keq[74] = ( g0_RT[8] * g0_RT[18] ) / ( g0_RT[20] * g0_RT[3] );
    keq[75] = ( g0_RT[16] * g0_RT[8] ) / ( g0_RT[20] * g0_RT[5] );
    keq[76] = ( g0_RT[16] * g0_RT[5] ) / ( g0_RT[20] * g0_RT[6] );
    keq[77] = ( g0_RT[16] * g0_RT[9] ) / ( g0_RT[20] * g0_RT[4] );
    keq[78] = ( g0_RT[16] * g0_RT[3] ) / ( g0_RT[20] * C0  );
    keq[79] = ( g0_RT[21] * g0_RT[7] ) / ( g0_RT[22] * g0_RT[3] );
    keq[80] = ( g0_RT[21] * g0_RT[5] ) / ( g0_RT[22] * g0_RT[6] );
    keq[81] = ( g0_RT[21] * g0_RT[8] ) / ( g0_RT[22] * g0_RT[5] );
    keq[82] = ( g0_RT[21] * g0_RT[15] ) / ( g0_RT[22] * g0_RT[14] );
    keq[83] = ( g0_RT[21] * g0_RT[3] ) / ( g0_RT[22] * C0  );
    keq[84] = ( g0_RT[21] * g0_RT[10] ) / ( g0_RT[22] * g0_RT[9] );
    keq[85] = ( g0_RT[19] * g0_RT[7] ) / ( g0_RT[21] * g0_RT[3] );
    keq[86] = ( g0_RT[19] * g0_RT[5] ) / ( g0_RT[21] * g0_RT[6] );
    keq[87] = ( g0_RT[16] * g0_RT[14] ) / ( g0_RT[21] * g0_RT[6] );
    keq[88] = ( g0_RT[19] * g0_RT[9] ) / ( g0_RT[21] * g0_RT[4] );
    keq[89] =  C0 * ( g0_RT[25] ) / ( g0_RT[21] * g0_RT[4] );
    keq[90] = ( g0_RT[19] * g0_RT[9] ) / ( g0_RT[25] * C0  );
    keq[91] = ( g0_RT[26] * g0_RT[5] ) / ( g0_RT[25] * g0_RT[4] );
    keq[92] = ( g0_RT[16] * g0_RT[13] * g0_RT[5] ) / ( g0_RT[26] * C0  * C0  );
    keq[93] = ( g0_RT[19] * g0_RT[3] ) / ( g0_RT[21] * C0  );
    keq[94] = ( g0_RT[27] * g0_RT[7] ) / ( g0_RT[19] * g0_RT[3] );
    keq[95] = ( g0_RT[27] * g0_RT[8] ) / ( g0_RT[19] * g0_RT[5] );
    keq[96] = ( g0_RT[14] * g0_RT[13] ) / ( g0_RT[19] * g0_RT[6] );
    keq[97] = ( g0_RT[28] * g0_RT[3] ) / ( g0_RT[19] * g0_RT[6] );
    keq[98] = ( g0_RT[27] * g0_RT[21] ) / ( g0_RT[19] * g0_RT[19] );
    keq[99] = ( g0_RT[27] * g0_RT[9] ) / ( g0_RT[19] * g0_RT[4] );
    keq[100] = ( g0_RT[29] * g0_RT[5] ) / ( g0_RT[19] * g0_RT[9] );
    keq[101] = ( g0_RT[14] * g0_RT[11] * g0_RT[10] ) / ( g0_RT[29] * g0_RT[9] * C0  );
    keq[102] = ( g0_RT[27] * g0_RT[3] ) / ( g0_RT[19] * C0  );
    keq[103] = ( g0_RT[24] * g0_RT[7] ) / ( g0_RT[19] * C0  );
    keq[104] = ( g0_RT[24] * g0_RT[7] ) / ( g0_RT[27] * g0_RT[3] );
    keq[105] = ( g0_RT[24] * g0_RT[3] ) / ( g0_RT[27] * C0  );
    keq[106] = ( g0_RT[16] * g0_RT[13] ) / ( g0_RT[27] * g0_RT[4] );
    keq[107] = ( g0_RT[28] * g0_RT[6] ) / ( g0_RT[27] * g0_RT[4] );
    keq[108] = ( g0_RT[24] * g0_RT[9] ) / ( g0_RT[27] * g0_RT[4] );
    keq[109] = ( g0_RT[3] * g0_RT[30] ) / ( g0_RT[24] * g0_RT[6] );
    keq[110] = ( g0_RT[11] * g0_RT[17] ) / ( g0_RT[24] * g0_RT[6] );
    keq[111] = ( g0_RT[16] * g0_RT[11] ) / ( g0_RT[24] * g0_RT[4] );
    keq[112] = ( g0_RT[31] * g0_RT[3] ) / ( g0_RT[24] * g0_RT[5] );
    keq[113] = ( g0_RT[32] * g0_RT[8] ) / ( g0_RT[24] * g0_RT[5] );
    keq[114] = ( g0_RT[14] * g0_RT[11] ) / ( g0_RT[31] * g0_RT[3] );
    keq[115] = ( g0_RT[12] * g0_RT[17] ) / ( g0_RT[31] * g0_RT[6] );
    keq[116] = ( g0_RT[30] * g0_RT[5] ) / ( g0_RT[31] * g0_RT[6] );
    keq[117] = ( g0_RT[21] * g0_RT[11] ) / ( g0_RT[31] * g0_RT[14] );
    keq[118] = ( g0_RT[11] * g0_RT[18] ) / ( g0_RT[3] * g0_RT[30] );
    keq[119] = ( g0_RT[11] * g0_RT[3] * g0_RT[13] ) / ( g0_RT[30] * g0_RT[5] * C0  );
    keq[120] = ( g0_RT[11] * g0_RT[11] * g0_RT[3] ) / ( g0_RT[30] * g0_RT[6] * C0  );
    keq[121] = ( g0_RT[11] * g0_RT[11] * g0_RT[5] ) / ( g0_RT[30] * g0_RT[4] * C0  );
    keq[122] = ( g0_RT[11] * g0_RT[12] * g0_RT[3] ) / ( g0_RT[30] * g0_RT[4] * C0  );
    keq[123] = ( g0_RT[3] * g0_RT[30] ) / ( g0_RT[32] * g0_RT[5] );
    keq[124] = ( g0_RT[23] * g0_RT[11] ) / ( g0_RT[32] * g0_RT[6] );
    keq[125] = ( g0_RT[30] * g0_RT[6] ) / ( g0_RT[32] * g0_RT[4] );
    keq[126] = ( g0_RT[23] * g0_RT[12] ) / ( g0_RT[32] * g0_RT[4] );
    keq[127] = ( g0_RT[11] * g0_RT[13] ) / ( g0_RT[32] * g0_RT[4] );
    keq[128] = ( g0_RT[16] * g0_RT[7] ) / ( g0_RT[33] * g0_RT[3] );
    keq[129] = ( g0_RT[14] * g0_RT[5] ) / ( g0_RT[33] * g0_RT[3] );
    keq[130] = ( g0_RT[16] * g0_RT[8] ) / ( g0_RT[33] * g0_RT[5] );
    keq[131] = ( g0_RT[16] * g0_RT[9] ) / ( g0_RT[33] * g0_RT[4] );
    keq[132] = ( g0_RT[16] * g0_RT[3] ) / ( g0_RT[33] * C0  );
    keq[133] = ( g0_RT[33] ) / ( g0_RT[20] );
    keq[134] = ( g0_RT[33] * g0_RT[11] ) / ( g0_RT[31] * g0_RT[5] );
    keq[135] = ( g0_RT[33] * g0_RT[8] ) / ( g0_RT[34] * g0_RT[5] );
    keq[136] = ( g0_RT[20] * g0_RT[8] ) / ( g0_RT[34] * g0_RT[5] );
    keq[137] = ( g0_RT[33] * g0_RT[7] ) / ( g0_RT[34] * g0_RT[3] );
    keq[138] = ( g0_RT[20] * g0_RT[7] ) / ( g0_RT[34] * g0_RT[3] );
    keq[139] = ( g0_RT[33] * g0_RT[5] ) / ( g0_RT[34] * g0_RT[6] );
    keq[140] = ( g0_RT[33] * g0_RT[10] ) / ( g0_RT[34] * g0_RT[9] );
    keq[141] = ( g0_RT[33] * g0_RT[9] ) / ( g0_RT[34] * g0_RT[4] );
    keq[142] = ( g0_RT[14] * g0_RT[5] ) / ( g0_RT[34] * C0  );
    keq[143] = ( g0_RT[31] * g0_RT[3] ) / ( g0_RT[28] * C0  );
    keq[144] = ( g0_RT[14] * g0_RT[13] ) / ( g0_RT[28] * g0_RT[3] );
    keq[145] = ( g0_RT[31] * g0_RT[7] ) / ( g0_RT[28] * g0_RT[3] );
    keq[146] = ( g0_RT[16] * g0_RT[13] ) / ( g0_RT[28] * g0_RT[6] );
    keq[147] = ( g0_RT[31] * g0_RT[8] ) / ( g0_RT[28] * g0_RT[5] );
    keq[148] = ( g0_RT[16] * g0_RT[11] * g0_RT[5] ) / ( g0_RT[28] * g0_RT[4] * C0  );
    keq[149] = ( g0_RT[21] * g0_RT[11] * g0_RT[3] ) / ( g0_RT[28] * g0_RT[14] * C0  );
    keq[150] = ( g0_RT[16] * g0_RT[13] * g0_RT[5] ) / ( g0_RT[28] * g0_RT[9] * C0  );
    keq[151] = ( g0_RT[35] * g0_RT[4] ) / ( g0_RT[28] * g0_RT[9] );
    keq[152] = ( g0_RT[14] * g0_RT[11] ) / ( g0_RT[28] * C0  );
    keq[153] = ( g0_RT[14] * g0_RT[13] ) / ( g0_RT[35] * C0  );
    keq[154] = ( g0_RT[14] * g0_RT[11] ) / ( g0_RT[36] * C0  );
    keq[155] = ( g0_RT[36] * g0_RT[8] ) / ( g0_RT[35] * g0_RT[5] );
    keq[156] = ( g0_RT[28] * g0_RT[8] ) / ( g0_RT[35] * g0_RT[5] );
    keq[157] = ( g0_RT[36] * g0_RT[5] ) / ( g0_RT[35] * g0_RT[6] );
    keq[158] = ( g0_RT[28] * g0_RT[5] ) / ( g0_RT[35] * g0_RT[6] );
    keq[159] = ( g0_RT[36] * g0_RT[7] ) / ( g0_RT[35] * g0_RT[3] );
    keq[160] = ( g0_RT[28] * g0_RT[7] ) / ( g0_RT[35] * g0_RT[3] );
    keq[161] = ( g0_RT[36] * g0_RT[15] ) / ( g0_RT[14] * g0_RT[35] );
    keq[162] = ( g0_RT[28] * g0_RT[15] ) / ( g0_RT[14] * g0_RT[35] );
    keq[163] = ( g0_RT[36] * g0_RT[10] ) / ( g0_RT[35] * g0_RT[9] );
    keq[164] = ( g0_RT[28] * g0_RT[10] ) / ( g0_RT[35] * g0_RT[9] );
    keq[165] = ( g0_RT[36] * g0_RT[9] ) / ( g0_RT[35] * g0_RT[4] );
    keq[166] = ( g0_RT[33] * g0_RT[14] ) / ( g0_RT[37] * C0  );
    keq[167] = ( g0_RT[19] * g0_RT[8] ) / ( g0_RT[37] * C0  );
    keq[168] = ( g0_RT[38] * g0_RT[8] ) / ( g0_RT[37] * g0_RT[5] );
    keq[169] = ( g0_RT[39] * g0_RT[8] ) / ( g0_RT[37] * g0_RT[5] );
    keq[170] = ( g0_RT[40] * g0_RT[8] ) / ( g0_RT[37] * g0_RT[5] );
    keq[171] = ( g0_RT[38] * g0_RT[7] ) / ( g0_RT[37] * g0_RT[3] );
    keq[172] = ( g0_RT[39] * g0_RT[7] ) / ( g0_RT[37] * g0_RT[3] );
    keq[173] = ( g0_RT[40] * g0_RT[7] ) / ( g0_RT[37] * g0_RT[3] );
    keq[174] = ( g0_RT[38] * g0_RT[5] ) / ( g0_RT[37] * g0_RT[6] );
    keq[175] = ( g0_RT[39] * g0_RT[5] ) / ( g0_RT[37] * g0_RT[6] );
    keq[176] = ( g0_RT[40] * g0_RT[5] ) / ( g0_RT[37] * g0_RT[6] );
    keq[177] = ( g0_RT[38] * g0_RT[15] ) / ( g0_RT[37] * g0_RT[14] );
    keq[178] = ( g0_RT[39] * g0_RT[15] ) / ( g0_RT[37] * g0_RT[14] );
    keq[179] = ( g0_RT[40] * g0_RT[15] ) / ( g0_RT[37] * g0_RT[14] );
    keq[180] = ( g0_RT[39] * g0_RT[10] ) / ( g0_RT[37] * g0_RT[9] );
    keq[181] = ( g0_RT[38] * g0_RT[10] ) / ( g0_RT[37] * g0_RT[9] );
    keq[182] = ( g0_RT[40] * g0_RT[10] ) / ( g0_RT[37] * g0_RT[9] );
    keq[183] =  C0 * ( g0_RT[38] ) / ( g0_RT[19] * g0_RT[5] );
    keq[184] = ( g0_RT[40] * g0_RT[5] ) / ( g0_RT[21] * g0_RT[9] );
    keq[185] = ( g0_RT[35] * g0_RT[3] ) / ( g0_RT[40] * C0  );
    keq[186] = ( g0_RT[16] * g0_RT[14] ) / ( g0_RT[40] * C0  );
    keq[187] = ( g0_RT[35] * g0_RT[9] ) / ( g0_RT[40] * g0_RT[4] );
    keq[188] = ( g0_RT[21] * g0_RT[12] ) / ( g0_RT[40] * g0_RT[11] );
    keq[189] = ( g0_RT[33] * g0_RT[14] ) / ( g0_RT[40] * g0_RT[3] );
    keq[190] = ( g0_RT[19] * g0_RT[8] ) / ( g0_RT[40] * g0_RT[3] );
    keq[191] = ( g0_RT[35] * g0_RT[8] ) / ( g0_RT[40] * g0_RT[5] );
    keq[192] = ( g0_RT[35] * g0_RT[9] ) / ( g0_RT[39] * g0_RT[4] );
    keq[193] = ( g0_RT[35] * g0_RT[5] ) / ( g0_RT[39] * g0_RT[6] );
    keq[194] = ( g0_RT[19] * g0_RT[8] ) / ( g0_RT[39] * g0_RT[3] );
    keq[195] = ( g0_RT[33] * g0_RT[14] ) / ( g0_RT[39] * g0_RT[3] );
    keq[196] = ( g0_RT[35] * g0_RT[5] * g0_RT[5] ) / ( g0_RT[39] * g0_RT[9] * C0  );
    keq[197] = ( g0_RT[35] * g0_RT[8] ) / ( g0_RT[39] * g0_RT[5] );
    keq[198] = ( g0_RT[35] * g0_RT[3] ) / ( g0_RT[39] * C0  );
    keq[199] = ( g0_RT[19] * g0_RT[11] ) / ( g0_RT[41] * g0_RT[6] );
    keq[200] = ( g0_RT[41] * g0_RT[3] ) / ( g0_RT[24] * g0_RT[14] );
    keq[201] = ( g0_RT[14] * g0_RT[30] ) / ( g0_RT[41] * g0_RT[6] );
    keq[202] =  C0 * ( g0_RT[41] ) / ( g0_RT[42] * g0_RT[3] );
    keq[203] = ( g0_RT[41] * g0_RT[4] ) / ( g0_RT[42] * g0_RT[9] );
    keq[204] = ( g0_RT[42] * g0_RT[8] ) / ( g0_RT[41] * g0_RT[5] );
    keq[205] = ( g0_RT[31] * g0_RT[13] ) / ( g0_RT[42] * g0_RT[4] );
    keq[206] =  C0 * ( g0_RT[43] ) / ( g0_RT[41] * g0_RT[3] );
    keq[207] = ( g0_RT[41] * g0_RT[7] ) / ( g0_RT[43] * g0_RT[3] );
    keq[208] = ( g0_RT[41] * g0_RT[9] ) / ( g0_RT[43] * g0_RT[4] );
    keq[209] = ( g0_RT[41] * g0_RT[15] ) / ( g0_RT[43] * g0_RT[14] );
    keq[210] =  C0 * ( g0_RT[43] ) / ( g0_RT[24] * g0_RT[14] );
    keq[211] = ( g0_RT[41] * g0_RT[8] ) / ( g0_RT[43] * g0_RT[5] );
    keq[212] = ( g0_RT[41] * g0_RT[11] ) / ( g0_RT[42] * g0_RT[13] );
    keq[213] = ( g0_RT[27] * g0_RT[11] * g0_RT[5] ) / ( g0_RT[42] * g0_RT[9] * C0  );
    keq[214] = ( g0_RT[14] * g0_RT[11] * g0_RT[13] ) / ( g0_RT[41] * g0_RT[4] * C0  );
    keq[215] = ( g0_RT[21] * g0_RT[13] ) / ( g0_RT[44] * g0_RT[6] );
    keq[216] = ( g0_RT[43] * g0_RT[8] ) / ( g0_RT[44] * g0_RT[5] );
    keq[217] = ( g0_RT[31] * g0_RT[14] * g0_RT[3] ) / ( g0_RT[44] * g0_RT[6] * C0  );
    keq[218] = ( g0_RT[43] * g0_RT[7] ) / ( g0_RT[44] * g0_RT[3] );
    keq[219] =  C0 * ( g0_RT[44] ) / ( g0_RT[43] * g0_RT[3] );
    keq[220] = ( g0_RT[44] * g0_RT[4] ) / ( g0_RT[43] * g0_RT[9] );
    keq[221] = ( g0_RT[27] * g0_RT[16] * g0_RT[5] ) / ( g0_RT[43] * g0_RT[9] * C0  );
    keq[222] =  C0 * ( g0_RT[44] ) / ( g0_RT[27] * g0_RT[14] );
    keq[223] = ( g0_RT[19] * g0_RT[14] ) / ( g0_RT[44] * g0_RT[3] );
    keq[224] = ( g0_RT[43] * g0_RT[3] ) / ( g0_RT[27] * g0_RT[14] );
    keq[225] = ( g0_RT[21] * g0_RT[14] ) / ( g0_RT[45] * C0  );
    keq[226] = ( g0_RT[9] * g0_RT[46] ) / ( g0_RT[45] * g0_RT[4] );
    keq[227] = ( g0_RT[9] * g0_RT[47] ) / ( g0_RT[45] * g0_RT[4] );
    keq[228] = ( g0_RT[7] * g0_RT[46] ) / ( g0_RT[45] * g0_RT[3] );
    keq[229] = ( g0_RT[7] * g0_RT[47] ) / ( g0_RT[45] * g0_RT[3] );
    keq[230] = ( g0_RT[46] * g0_RT[5] ) / ( g0_RT[45] * g0_RT[6] );
    keq[231] = ( g0_RT[47] * g0_RT[5] ) / ( g0_RT[45] * g0_RT[6] );
    keq[232] = ( g0_RT[8] * g0_RT[47] ) / ( g0_RT[45] * g0_RT[5] );
    keq[233] = ( g0_RT[8] * g0_RT[46] ) / ( g0_RT[45] * g0_RT[5] );
    keq[234] = ( g0_RT[10] * g0_RT[46] ) / ( g0_RT[45] * g0_RT[9] );
    keq[235] = ( g0_RT[10] * g0_RT[47] ) / ( g0_RT[45] * g0_RT[9] );
    keq[236] = ( g0_RT[45] * g0_RT[47] ) / ( g0_RT[45] * g0_RT[46] );
    keq[237] =  C0 * ( g0_RT[46] ) / ( g0_RT[44] * g0_RT[3] );
    keq[238] = ( g0_RT[44] * g0_RT[9] ) / ( g0_RT[46] * g0_RT[4] );
    keq[239] = ( g0_RT[19] * g0_RT[14] ) / ( g0_RT[47] * C0  );
    keq[240] =  C0 * ( g0_RT[47] ) / ( g0_RT[44] * g0_RT[3] );
    keq[241] = ( g0_RT[44] * g0_RT[9] ) / ( g0_RT[47] * g0_RT[4] );
    keq[242] =  C0 * ( g0_RT[48] ) / ( g0_RT[47] * g0_RT[4] );
    keq[243] = ( g0_RT[44] * g0_RT[9] ) / ( g0_RT[48] * C0  );
    keq[244] = ( g0_RT[49] * g0_RT[5] ) / ( g0_RT[48] * g0_RT[4] );
    keq[245] = ( g0_RT[28] * g0_RT[16] * g0_RT[5] ) / ( g0_RT[49] * C0  * C0  );
    keq[246] = ( g0_RT[21] * g0_RT[21] ) / ( g0_RT[50] * C0  );
    keq[247] = ( g0_RT[9] * g0_RT[51] ) / ( g0_RT[50] * g0_RT[4] );
    keq[248] = ( g0_RT[9] * g0_RT[52] ) / ( g0_RT[50] * g0_RT[4] );
    keq[249] = ( g0_RT[10] * g0_RT[51] ) / ( g0_RT[50] * g0_RT[9] );
    keq[250] = ( g0_RT[10] * g0_RT[52] ) / ( g0_RT[50] * g0_RT[9] );
    keq[251] = ( g0_RT[5] * g0_RT[51] ) / ( g0_RT[50] * g0_RT[6] );
    keq[252] = ( g0_RT[5] * g0_RT[52] ) / ( g0_RT[50] * g0_RT[6] );
    keq[253] = ( g0_RT[8] * g0_RT[51] ) / ( g0_RT[50] * g0_RT[5] );
    keq[254] = ( g0_RT[8] * g0_RT[52] ) / ( g0_RT[50] * g0_RT[5] );
    keq[255] = ( g0_RT[7] * g0_RT[51] ) / ( g0_RT[50] * g0_RT[3] );
    keq[256] = ( g0_RT[7] * g0_RT[52] ) / ( g0_RT[50] * g0_RT[3] );
    keq[257] = ( g0_RT[19] * g0_RT[21] ) / ( g0_RT[51] * C0  );
    keq[258] = ( g0_RT[44] * g0_RT[14] ) / ( g0_RT[52] * C0  );
    keq[259] = ( g0_RT[43] * g0_RT[14] ) / ( g0_RT[53] * C0  );
    keq[260] = ( g0_RT[27] * g0_RT[19] * g0_RT[7] ) / ( g0_RT[53] * g0_RT[3] * C0  );
    keq[261] =  C0 * ( g0_RT[54] ) / ( g0_RT[4] * g0_RT[52] );
    keq[262] = ( g0_RT[53] * g0_RT[9] ) / ( g0_RT[54] * C0  );
    keq[263] = ( g0_RT[53] * g0_RT[9] ) / ( g0_RT[4] * g0_RT[51] );
    keq[264] =  C0 * ( g0_RT[55] ) / ( g0_RT[4] * g0_RT[51] );
    keq[265] = ( g0_RT[53] * g0_RT[9] ) / ( g0_RT[55] * C0  );
    keq[266] = ( g0_RT[56] * g0_RT[5] ) / ( g0_RT[55] * g0_RT[4] );
    keq[267] = ( g0_RT[12] * g0_RT[47] * g0_RT[5] ) / ( g0_RT[56] * C0  * C0  );

  };

  void getTemperature(double& h, double& Told, std::vector<double>& y, double& T) {

    double            tol   = 1.0e-06;
    int               niter = 500;
    double              RT;
    double              To;
    double              Tp;
    double              dT = 1.0;
    double              fy = h;
    double              jy = 0.0;
    std::vector<double> hk(kk, 0.0);
    std::vector<double> cpk(kk, 0.0);

    To = Told;
    Tp = Told;

    for(int it = 0; it < niter; ++it) { 

      RT = GasConstant * To;
      getSpecificHeats_R(To, cpk);
      getEnthalpies_RT(To, hk);
      for(int k = 0; k < kk; ++k) { hk[k]  = RT * hk[k] / mw[k]; }
      for(int k = 0; k < kk; ++k) { cpk[k] = GasConstant * cpk[k] / mw[k]; }
      for(int k = 0; k < kk; ++k) { fy -=  hk[k] * y[k]; }
      for(int k = 0; k < kk; ++k) { jy -= cpk[k] * y[k]; }
      dT  = -fy / jy;
      Tp  =  To + dT;
      To  =  Tp;

      if( (std::fabs(dT) < tol)) {
	T = Tp;
	return;
      }

      fy = h;
      jy = 0.0;

    }

    T = Tp;

  };

  void getFalloffRates(double& T, std::vector<double>& C, std::vector<double>& kfwd) {

    int TROE = 110;
    double lpr;
    double cc;
    double nn;
    double f1;
    double logT = std::log(T);
    double invT = 1.0/T;
    std::vector<double> khi(ff,0.0);
    std::vector<double> klo(ff,0.0);
    std::vector<double> pr(ff,0.0);
    std::vector<double> work(ff,0.0);
    std::vector<int> falloffType(ff,100);

    khi[0] = std::exp(2.226013e+01 + 4.400000e-01 * logT);
    klo[0] = std::exp(3.168281e+01 - 1.400000e+00 * logT);

    khi[1] = std::exp(2.528239e+01 - 2.700000e-01 * logT);
    klo[1] = std::exp(4.476435e+01 - 3.200000e+00 * logT);

    khi[2] = std::exp(1.900847e+01 - 1.199716e+03 * invT);
    klo[2] = std::exp(4.188479e+01 - 2.790000e+00 * logT - 2.108978e+03 * invT);

    khi[3] = std::exp(2.080944e+01 + 4.800000e-01 * logT + 1.308572e+02 * invT);
    klo[3] = std::exp(4.174664e+01 - 2.570000e+00 * logT - 2.138432e+02 * invT);

    khi[4] = std::exp(3.017262e+01 - 6.300000e-01 * logT - 1.926777e+02 * invT);
    klo[4] = std::exp(6.307402e+01 - 4.760000e+00 * logT - 1.227861e+03 * invT);

    khi[5] = std::exp(2.361918e+01);
    klo[5] = std::exp(8.082950e+01 - 7.000000e+00 * logT - 1.390350e+03 * invT);

    khi[6] = std::exp(4.823212e+01 - 1.230000e+00 * logT - 5.144049e+04 * invT);
    klo[6] = std::exp(9.139005e+01 - 6.430000e+00 * logT - 5.393001e+04 * invT);

    khi[7] = std::exp(2.313021e+01 + 1.037000e+00 * logT - 1.850270e+04 * invT);
    klo[7] = std::exp(7.046134e+01 - 4.990000e+00 * logT - 2.012878e+04 * invT);

    khi[8] = std::exp(2.257643e+01 + 1.000000e+00 * logT - 1.893448e+04 * invT);
    klo[8] = std::exp(2.574055e+01 + 1.000000e-01 * logT - 1.644821e+04 * invT);

    khi[9] = std::exp(3.748322e+01 - 4.616029e+04 * invT);
    klo[9] = std::exp(9.548779e+01 - 7.350000e+00 * logT - 4.803738e+04 * invT);

    khi[10] = std::exp(2.872963e+01 - 8.403792e+03 * invT);
    klo[10] = std::exp(2.781334e+01 - 6.290245e+03 * invT);

    khi[11] = std::exp(3.614821e+01 - 4.126400e+04 * invT);
    klo[11] = std::exp(3.103222e+01 - 2.918673e+04 * invT);

    khi[12] = std::exp(3.201305e+01 - 3.270927e+04 * invT);
    klo[12] = std::exp(3.223619e+01 - 2.717386e+04 * invT);

    khi[13] = std::exp(2.412446e+01);
    klo[13] = std::exp(2.292049e+01 + 1.000000e+00 * logT);

    khi[14] = std::exp(2.441215e+01);
    klo[14] = std::exp(4.254514e+01 - 2.000000e+00 * logT);

    khi[15] = std::exp(1.330468e+01);
    klo[15] = std::exp(7.600902e+00 + 1.000000e+00 * logT);

    khi[16] = std::exp(2.602158e+01);
    klo[16] = std::exp(1.246248e+02 - 1.200000e+01 * logT - 3.003199e+03 * invT);

    khi[17] = std::exp(2.394214e+01);
    klo[17] = std::exp(1.211860e+02 - 1.194000e+01 * logT - 4.916732e+03 * invT);

    khi[18] = std::exp(3.923926e+01 - 4.246817e+04 * invT);
    klo[18] = std::exp(3.659674e+01 - 3.269821e+04 * invT);

    khi[19] = std::exp(2.331103e+01 - 7.853798e+02 * invT);
    klo[19] = std::exp(8.505639e+01 - 7.500000e+00 * logT - 2.381391e+03 * invT);

    khi[20] = std::exp(3.014062e+01 - 1.000000e-01 * logT - 1.520243e+04 * invT);
    klo[20] = std::exp(1.076218e+02 - 1.000000e+01 * logT - 1.800465e+04 * invT);

    khi[21] = std::exp(2.331103e+01 - 1.640516e+03 * invT);
    klo[21] = std::exp(7.551690e+01 - 6.660000e+00 * logT - 3.522778e+03 * invT);

    khi[22] = std::exp(3.553941e+01 - 3.804840e+04 * invT);
    klo[22] = std::exp(3.609059e+01 - 2.494966e+04 * invT);

    pr[0] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 7.00e-01 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.50e+00 * C[7] + 1.60e+01 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.20e+00 * C[11] + 2.40e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 1.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.50e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[1] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 4.00e-01 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.50e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 6.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 1.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[2] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 7.00e-01 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.50e+00 * C[7] + 1.20e+01 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 2.00e+00 * C[11] + 4.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 1.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[3] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 3.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[4] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 1.60e+01 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[5] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 3.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[6] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 3.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[7] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[8] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[9] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[10] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[11] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[12] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[13] = 1.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 1.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[14] = 1.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 1.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[15] = 1.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 1.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[16] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 3.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[17] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 3.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[18] = 1.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 1.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[19] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 3.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[20] = 1.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 1.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[21] = 1.00e+00 * C[0] + 7.00e-01 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 2.00e+00 * C[7] + 6.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.50e+00 * C[11] + 2.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 3.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 
    pr[22] = 1.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 1.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 1.00e+00 * C[13] + 1.00e+00 * C[14] + 1.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 1.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52] + 1.00e+00 * C[53] + 1.00e+00 * C[54] + 1.00e+00 * C[55] + 1.00e+00 * C[56]; 

    for(int i = 0; i < ff; ++i) { pr[i] *= (klo[i] / khi[i]); }

    falloffType[0] = 110;
    falloffType[1] = 110;
    falloffType[2] = 110;
    falloffType[3] = 110;
    falloffType[4] = 110;
    falloffType[5] = 110;
    falloffType[6] = 110;
    falloffType[7] = 110;
    falloffType[8] = 110;
    falloffType[9] = 110;
    falloffType[10] = 110;
    falloffType[11] = 110;
    falloffType[12] = 110;
    falloffType[13] = 110;
    falloffType[14] = 110;
    falloffType[15] = 110;
    falloffType[16] = 110;
    falloffType[17] = 110;
    falloffType[18] = 110;
    falloffType[19] = 110;
    falloffType[20] = 110;
    falloffType[21] = 110;
    falloffType[22] = 110;

    work[0] = (1.0 - 5.000000e-01) * std::exp( - 1.000000e+30 * T) + 5.000000e-01 * std::exp( - 1.000000e-30 * T);
    work[1] = (1.0 - 5.700000e-01) * std::exp( - 1.000000e-30 * T) + 5.700000e-01 * std::exp( - 1.000000e+30 * T);
    work[2] = (1.0 - 1.000000e+00) * std::exp( - 1.000000e+00 * T) + 1.000000e+00 * std::exp( - 1.000000e-07 * T) + std::exp( - 1.000000e+07 * invT);
    work[3] = (1.0 - 7.824000e-01) * std::exp( - 3.690037e-03 * T) + 7.824000e-01 * std::exp( - 3.629764e-04 * T) + std::exp( - 6.570000e+03 * invT);
    work[4] = (1.0 - 7.830000e-01) * std::exp( - 1.351351e-02 * T) + 7.830000e-01 * std::exp( - 3.400204e-04 * T) + std::exp( - 6.964000e+03 * invT);
    work[5] = (1.0 - 6.200000e-01) * std::exp( - 1.369863e-02 * T) + 6.200000e-01 * std::exp( - 8.333333e-04 * T);
    work[6] = (1.0 - 8.400000e-01) * std::exp( - 8.000000e-03 * T) + 8.400000e-01 * std::exp( - 4.506534e-04 * T) + std::exp( - 6.882000e+03 * invT);
    work[7] = (1.0 - 1.680000e-01) * std::exp( - 8.333333e-04 * T) + 1.680000e-01 * std::exp( - 1.000000e+30 * T);
    work[8] = (1.0 - 3.000000e-01) * std::exp( - 1.000000e-30 * T) + 3.000000e-01 * std::exp( - 1.000000e+30 * T);
    work[9] = (1.0 - 4.140000e-01) * std::exp( - 3.571429e-03 * T) + 4.140000e-01 * std::exp( - 1.818182e-04 * T);
    work[10] = (1.0 - 1.000000e+00) * std::exp( - 1.000000e+00 * T) + 1.000000e+00 * std::exp( - 1.000000e-07 * T) + std::exp( - 1.000000e+07 * invT);
    work[11] = (1.0 - 5.000000e-01) * std::exp( - 1.000000e+30 * T) + 5.000000e-01 * std::exp( - 1.000000e-30 * T);
    work[12] = (1.0 - 5.000000e-01) * std::exp( - 1.000000e+30 * T) + 5.000000e-01 * std::exp( - 1.000000e-30 * T);
    work[13] = (1.0 - 5.000000e-01) * std::exp( - 1.000000e-30 * T) + 5.000000e-01 * std::exp( - 1.000000e+30 * T);
    work[14] = (1.0 - 8.000000e-01) * std::exp( - 1.000000e-30 * T) + 8.000000e-01 * std::exp( - 1.000000e+30 * T);
    work[15] = (1.0 - 5.000000e-01) * std::exp( - 1.000000e-30 * T) + 5.000000e-01 * std::exp( - 1.000000e+30 * T);
    work[16] = (1.0 - 2.000000e-02) * std::exp( - 9.115770e-04 * T) + 2.000000e-02 * std::exp( - 9.115770e-04 * T) + std::exp( - 6.860000e+03 * invT);
    work[17] = (1.0 - 1.750000e-01) * std::exp( - 7.457122e-04 * T) + 1.750000e-01 * std::exp( - 1.666667e-05 * T) + std::exp( - 1.014000e+04 * invT);
    work[18] = (1.0 - 7.600000e-01) * std::exp( - 5.263158e-04 * T) + 7.600000e-01 * std::exp( - 2.631579e-02 * T);
    work[19] = (1.0 - 1.000000e+00) * std::exp( - 1.000000e-03 * T) + 1.000000e+00 * std::exp( - 1.549427e-03 * T) + std::exp( - 6.844000e+03 * invT);
    work[20] = (1.0 - -1.170000e+00) * std::exp( - 3.984064e-03 * T) + -1.170000e+00 * std::exp( - 1.000000e+15 * T) + std::exp( - 1.185000e+03 * invT);
    work[21] = (1.0 - 1.000000e+00) * std::exp( - 1.000000e-03 * T) + 1.000000e+00 * std::exp( - 7.633588e-04 * T) + std::exp( - 4.810000e+04 * invT);
    work[22] = (1.0 - 7.200000e-01) * std::exp( - 6.666667e-04 * T) + 7.200000e-01 * std::exp( - 1.000000e+10 * T) + std::exp( - 1.000000e+10 * invT);

    for(int i = 0; i < ff; ++i) {
      lpr =  std::log10(pr[i]);
      if(falloffType[i] == TROE) {
        cc      = -0.40 - 0.67 * std::log10(work[i]);
        nn      =  0.75 - 1.27 * std::log10(work[i]);
        f1      =  (lpr + cc)/(nn - 0.14 * (lpr + cc));
        work[i] =  std::log10(work[i])/(1 + f1 * f1);
        work[i] =  std::pow(10.0, work[i]);
      }
      work[i] =  (pr[i] * work[i])/(1 + pr[i]);
    }

    kfwd[8] = khi[0] * work[0];
    kfwd[15] = khi[1] * work[1];
    kfwd[23] = khi[2] * work[2];
    kfwd[34] = khi[3] * work[3];
    kfwd[55] = khi[4] * work[4];
    kfwd[56] = khi[5] * work[5];
    kfwd[83] = khi[6] * work[6];
    kfwd[93] = khi[7] * work[7];
    kfwd[105] = khi[8] * work[8];
    kfwd[142] = khi[9] * work[9];
    kfwd[154] = khi[10] * work[10];
    kfwd[166] = khi[11] * work[11];
    kfwd[167] = khi[12] * work[12];
    kfwd[202] = khi[13] * work[13];
    kfwd[206] = khi[14] * work[14];
    kfwd[210] = khi[15] * work[15];
    kfwd[219] = khi[16] * work[16];
    kfwd[222] = khi[17] * work[17];
    kfwd[225] = khi[18] * work[18];
    kfwd[237] = khi[19] * work[19];
    kfwd[239] = khi[20] * work[20];
    kfwd[240] = khi[21] * work[21];
    kfwd[246] = khi[22] * work[22];

  };

  void getRateCoefficients(double& T, std::vector<double>& C, std::vector<double>& kfwd, std::vector<double>& krev) {

    double logT = std::log(T);
    double invT = 1.0/T;
    std::vector<double> keq(ii,0.0);

    getEquilibriumConstants(T, keq);

    kfwd[0] = std::exp(3.119207e+01 - 7.000000e-01 * logT - 8.589852e+03 * invT);
    kfwd[1] = std::exp(3.923952e+00 + 2.670000e+00 * logT - 3.165568e+03 * invT);
    kfwd[2] = std::exp(1.397251e+01 + 1.300000e+00 * logT - 1.829344e+03 * invT);
    kfwd[3] = std::exp(6.551080e+00 + 2.330000e+00 * logT - 7.320979e+03 * invT);
    kfwd[4] = std::exp(2.789339e+01 - 1.000000e+00 * logT);
    kfwd[5] = std::exp(3.822766e+01 - 2.000000e+00 * logT);
    kfwd[6] = std::exp(2.254296e+01 - 5.000000e-01 * logT);
    kfwd[7] = std::exp(2.918071e+01 - 1.000000e+00 * logT);
    kfwd[9] = std::exp(2.498312e+01 - 1.484145e+02 * invT);
    kfwd[10] = std::exp(2.353267e+01 - 4.140994e+02 * invT);
    kfwd[11] = std::exp(2.415725e+01 - 8.659604e+02 * invT);
    kfwd[12] = std::exp(2.371900e+01);
    kfwd[13] = std::exp(2.266918e+01 + 5.508493e+02 * invT);
    kfwd[14] = std::exp(2.683251e+01 - 5.500054e+03 * invT);
    kfwd[16] = std::exp(2.535799e+01 - 5.556586e+03 * invT);
    kfwd[17] = std::exp(1.908337e+01 + 7.090062e+02 * invT);
    kfwd[18] = std::exp(2.385876e+01 - 4.000621e+03 * invT);
    kfwd[19] = std::exp(2.302585e+01 - 1.804087e+03 * invT);
    kfwd[20] = std::exp(2.127715e+01 - 7.216320e+02 * invT);
    kfwd[21] = std::exp(2.505268e+01 - 3.659886e+03 * invT);
    kfwd[22] = std::exp(9.172639e+00 + 2.000000e+00 * logT - 2.008551e+03 * invT);
    kfwd[24] = std::exp(8.389360e+00 + 1.500000e+00 * logT + 3.728454e+02 * invT);
    kfwd[25] = std::exp(2.371900e+01 - 1.154615e+04 * invT);
    kfwd[26] = std::exp(2.072327e+01 - 2.400360e+04 * invT);
    kfwd[27] = std::exp(3.285677e+01 - 1.000000e+00 * logT - 8.554974e+03 * invT);
    kfwd[28] = std::exp(2.463529e+01);
    kfwd[29] = std::exp(2.412446e+01);
    kfwd[30] = std::exp(2.412446e+01);
    kfwd[31] = std::exp(2.412446e+01);
    kfwd[32] = std::exp(2.274878e+01 - 2.062647e+02 * invT);
    kfwd[33] = std::exp(2.463529e+01);
    kfwd[35] = std::exp(1.095780e+01 + 1.900000e+00 * logT - 1.383134e+03 * invT);
    kfwd[36] = std::exp(2.427861e+01 - 1.768002e+03 * invT);
    kfwd[37] = std::exp(1.747907e+01 + 8.900000e-01 * logT - 2.044631e+02 * invT);
    kfwd[38] = std::exp(2.481761e+01 - 2.046795e+04 * invT);
    kfwd[39] = std::exp(3.716008e+00 + 2.500000e+00 * logT - 5.138038e+03 * invT);
    kfwd[40] = std::exp(2.564949e+00 + 3.000000e+00 * logT - 4.044758e+03 * invT);
    kfwd[41] = std::exp(9.680344e+00 + 1.830000e+00 * logT - 1.399972e+03 * invT);
    kfwd[42] = std::exp(1.445736e+01 + 1.440000e+00 * logT - 4.365888e+03 * invT);
    kfwd[43] = std::exp(2.440713e+01 - 2.862843e+04 * invT);
    kfwd[44] = std::exp(2.292382e+01 - 1.240008e+04 * invT);
    kfwd[45] = std::exp(2.591622e+01 - 7.601212e+03 * invT);
    kfwd[46] = std::exp(2.576669e+01 - 6.783359e+03 * invT);
    kfwd[47] = std::exp(2.441215e+01 - 1.259252e+03 * invT);
    kfwd[48] = std::exp(2.515765e+01);
    kfwd[49] = std::exp(2.446569e+01);
    kfwd[50] = std::exp(2.233270e+01);
    kfwd[51] = std::exp(1.961460e+01 - 4.499387e+03 * invT);
    kfwd[52] = std::exp(2.312116e+01 - 1.399958e+04 * invT);
    kfwd[53] = std::exp(2.532844e+01 - 1.610447e+04 * invT);
    kfwd[54] = std::exp(2.417642e+01 - 7.396749e+03 * invT);
    kfwd[57] = std::exp(2.412446e+01);
    kfwd[58] = std::exp(2.416688e+01);
    kfwd[59] = std::exp(2.182188e+01);
    kfwd[60] = std::exp(2.251503e+01);
    kfwd[61] = std::exp(2.251835e+01 + 8.996358e+02 * invT);
    kfwd[62] = std::exp(2.394214e+01);
    kfwd[63] = std::exp(9.332558e+00 + 2.000000e+00 * logT - 1.509417e+03 * invT);
    kfwd[64] = std::exp(2.510529e+01);
    kfwd[65] = std::exp(2.441215e+01);
    kfwd[66] = std::exp(2.169025e+01 - 7.505017e+02 * invT);
    kfwd[67] = std::exp(2.260730e+01 - 7.505017e+02 * invT);
    kfwd[68] = std::exp(2.532844e+01);
    kfwd[69] = std::exp(2.441215e+01);
    kfwd[70] = std::exp(1.899166e+01 + 7.600000e-01 * logT + 2.405440e+02 * invT);
    kfwd[71] = std::exp(2.778802e+01 - 7.500000e-01 * logT);
    kfwd[72] = std::exp(-3.036554e+00 + 3.220000e+00 * logT + 1.623678e+03 * invT);
    kfwd[73] = std::exp(2.371900e+01);
    kfwd[74] = std::exp(2.349585e+01);
    kfwd[75] = std::exp(2.233270e+01);
    kfwd[76] = std::exp(2.302585e+01);
    kfwd[77] = std::exp(-3.538741e+01 + 7.600000e+00 * logT + 1.780029e+03 * invT);
    kfwd[78] = std::exp(2.507741e+01 - 6.800197e+03 * invT);
    kfwd[79] = std::exp(-6.161861e-01 + 3.500000e+00 * logT - 2.621940e+03 * invT);
    kfwd[80] = std::exp(-6.571283e+00 + 4.300000e+00 * logT - 1.395161e+03 * invT);
    kfwd[81] = std::exp(9.998798e+00 + 1.900000e+00 * logT - 5.652816e+02 * invT);
    kfwd[82] = std::exp(-7.505592e+00 + 4.000000e+00 * logT - 4.173451e+03 * invT);
    kfwd[84] = std::exp(2.330348e+01 - 1.030085e+04 * invT);
    kfwd[85] = std::exp(2.412446e+01);
    kfwd[86] = std::exp(2.414427e+01);
    kfwd[87] = std::exp(2.447041e+01);
    kfwd[88] = std::exp(2.734334e+01 - 1.000000e+00 * logT - 2.415429e+03 * invT);
    kfwd[89] = std::exp(2.141641e+01);
    kfwd[90] = std::exp(7.967419e+01 - 7.200000e+00 * logT - 1.157405e+04 * invT);
    kfwd[91] = std::exp(6.620073e+00 + 1.300000e+00 * logT + 2.918648e+03 * invT);
    kfwd[92] = std::exp(3.453878e+01 - 2.163844e+04 * invT);
    kfwd[94] = std::exp(1.071219e+01 + 2.120000e+00 * logT - 6.723225e+03 * invT);
    kfwd[95] = std::exp(6.315358e+00 + 2.310000e+00 * logT - 1.491377e+03 * invT);
    kfwd[96] = std::exp(7.718685e+00 + 2.080000e+00 * logT);
    kfwd[97] = std::exp(7.098376e+00 + 2.080000e+00 * logT);
    kfwd[98] = std::exp(2.693987e+01 - 3.255833e+04 * invT);
    kfwd[99] = std::exp(2.446569e+01 - 2.899707e+04 * invT);
    kfwd[100] = std::exp(2.152527e+01 - 8.649987e+03 * invT);
    kfwd[101] = std::exp(2.210956e+01 - 8.558582e+03 * invT);
    kfwd[102] = std::exp(3.319170e+01 - 4.859497e+04 * invT);
    kfwd[103] = std::exp(3.118637e+01 - 3.599632e+04 * invT);
    kfwd[104] = std::exp(2.441215e+01);
    kfwd[106] = std::exp(6.039784e+01 - 5.312000e+00 * logT - 3.272492e+03 * invT);
    kfwd[107] = std::exp(2.727435e+01 - 6.110000e-01 * logT - 2.648158e+03 * invT);
    kfwd[108] = std::exp(2.927775e+01 - 1.260000e+00 * logT - 1.666975e+03 * invT);
    kfwd[109] = std::exp(2.671473e+01 - 5.364149e+03 * invT);
    kfwd[110] = std::exp(2.579844e+01 - 4.979277e+03 * invT);
    kfwd[111] = std::exp(2.915708e+01 - 5.400000e-01 * logT - 2.261120e+04 * invT);
    kfwd[112] = std::exp(9.852194e+00 + 1.700000e+00 * logT - 5.027365e+02 * invT);
    kfwd[113] = std::exp(1.042525e+01 + 2.000000e+00 * logT - 7.045557e+03 * invT);
    kfwd[114] = std::exp(1.422098e+01 + 1.430000e+00 * logT - 1.353062e+03 * invT);
    kfwd[115] = std::exp(2.371900e+01 - 1.154617e+03 * invT);
    kfwd[116] = std::exp(2.302585e+01 - 1.006681e+03 * invT);
    kfwd[117] = std::exp(1.831532e+01);
    kfwd[118] = std::exp(2.573390e+01);
    kfwd[119] = std::exp(2.141641e+01);
    kfwd[120] = std::exp(2.529177e+01);
    kfwd[121] = std::exp(1.026813e+01 + 1.700000e+00 * logT - 5.039392e+02 * invT);
    kfwd[122] = std::exp(9.546813e+00 + 1.700000e+00 * logT - 5.039392e+02 * invT);
    kfwd[123] = std::exp(2.371900e+01);
    kfwd[124] = std::exp(2.304565e+01);
    kfwd[125] = std::exp(2.021577e+01);
    kfwd[126] = std::exp(2.913510e+01 - 1.262860e+04 * invT);
    kfwd[127] = std::exp(2.160289e+01);
    kfwd[128] = std::exp(2.412446e+01);
    kfwd[129] = std::exp(3.315248e+01 - 9.300000e-01 * logT - 2.579961e+03 * invT);
    kfwd[130] = std::exp(2.390132e+01);
    kfwd[131] = std::exp(2.233270e+01);
    kfwd[132] = std::exp(2.463529e+01 - 1.264062e+04 * invT);
    kfwd[133] = std::exp(2.532844e+01 - 9.621790e+03 * invT);
    kfwd[134] = std::exp(2.304565e+01);
    kfwd[135] = std::exp(7.272398e+00 + 2.000000e+00 * logT + 4.221559e+02 * invT);
    kfwd[136] = std::exp(8.389360e+00 + 2.000000e+00 * logT - 7.577178e+02 * invT);
    kfwd[137] = std::exp(3.030632e-01 + 3.200000e+00 * logT - 1.756578e+03 * invT);
    kfwd[138] = std::exp(-2.683846e+00 + 3.400000e+00 * logT - 3.643290e+03 * invT);
    kfwd[139] = std::exp(5.961005e+00 + 2.500000e+00 * logT - 1.550309e+03 * invT);
    kfwd[140] = std::exp(2.510529e+01 - 9.754091e+03 * invT);
    kfwd[141] = std::exp(2.371900e+01 - 2.261120e+04 * invT);
    kfwd[143] = std::exp(8.524158e+01 - 7.189000e+00 * logT - 2.231293e+04 * invT);
    kfwd[144] = std::exp(2.463529e+01);
    kfwd[145] = std::exp(2.371900e+01);
    kfwd[146] = std::exp(2.532844e+01);
    kfwd[147] = std::exp(2.412446e+01);
    kfwd[148] = std::exp(1.721671e+01);
    kfwd[149] = std::exp(2.691767e+01 - 5.000000e-01 * logT);
    kfwd[150] = std::exp(2.266918e+01);
    kfwd[151] = std::exp(2.182188e+01);
    kfwd[152] = std::exp(9.916816e+01 - 9.800000e+00 * logT - 2.204099e+04 * invT);
    kfwd[153] = std::exp(3.648469e+01 - 4.111306e+04 * invT);
    kfwd[155] = std::exp(2.193818e+01 + 3.119861e+02 * invT);
    kfwd[156] = std::exp(1.963559e+01 + 3.119861e+02 * invT);
    kfwd[157] = std::exp(3.510976e+01 - 1.900000e+00 * logT - 1.499554e+03 * invT);
    kfwd[158] = std::exp(2.433957e+01 - 2.000000e-01 * logT - 1.791457e+03 * invT);
    kfwd[159] = std::exp(2.456487e+01 - 3.000000e-01 * logT - 1.504606e+03 * invT);
    kfwd[160] = std::exp(2.133845e+01 + 4.000000e-01 * logT - 2.697227e+03 * invT);
    kfwd[161] = std::exp(-2.166487e+01 + 5.800000e+00 * logT - 1.107108e+03 * invT);
    kfwd[162] = std::exp(-3.709082e+00 + 3.100000e+00 * logT - 2.883408e+03 * invT);
    kfwd[163] = std::exp(3.812230e+01 - 2.200000e+00 * logT - 7.045074e+03 * invT);
    kfwd[164] = std::exp(1.926225e+01 + 4.000000e-01 * logT - 7.498022e+03 * invT);
    kfwd[165] = std::exp(2.532844e+01 - 2.123589e+04 * invT);
    kfwd[168] = std::exp(1.901401e+01 + 4.000000e-01 * logT - 3.608185e+02 * invT);
    kfwd[169] = std::exp(1.724627e+01 + 5.000000e-01 * logT + 1.912335e+02 * invT);
    kfwd[170] = std::exp(1.616689e+01 + 8.000000e-01 * logT - 3.608185e+02 * invT);
    kfwd[171] = std::exp(9.852194e+00 + 1.800000e+00 * logT - 2.566369e+03 * invT);
    kfwd[172] = std::exp(1.015813e+01 + 1.600000e+00 * logT - 1.424147e+03 * invT);
    kfwd[173] = std::exp(9.615805e+00 + 1.600000e+00 * logT - 1.529742e+03 * invT);
    kfwd[174] = std::exp(1.145211e+01 + 1.700000e+00 * logT - 2.747624e+03 * invT);
    kfwd[175] = std::exp(9.841612e+00 + 1.900000e+00 * logT - 9.158747e+02 * invT);
    kfwd[176] = std::exp(9.667765e+00 + 2.000000e+00 * logT - 2.239352e+03 * invT);
    kfwd[177] = std::exp(-1.518684e+00 + 3.200000e+00 * logT - 4.840962e+03 * invT);
    kfwd[178] = std::exp(-3.174542e-01 + 3.000000e+00 * logT - 4.000621e+03 * invT);
    kfwd[179] = std::exp(-1.931022e+00 + 3.000000e+00 * logT - 3.849680e+03 * invT);
    kfwd[180] = std::exp(2.104134e+00 + 2.500000e+00 * logT - 5.434746e+03 * invT);
    kfwd[181] = std::exp(3.190476e+00 + 2.500000e+00 * logT - 7.950844e+03 * invT);
    kfwd[182] = std::exp(2.205827e+01 - 1.207727e+04 * invT);
    kfwd[183] = std::exp(1.930031e+01 + 1.197673e+03 * invT);
    kfwd[184] = std::exp(2.441215e+01);
    kfwd[185] = std::exp(7.310290e+01 - 5.900000e+00 * logT - 1.273143e+04 * invT);
    kfwd[186] = std::exp(7.996499e+01 - 7.000000e+00 * logT - 1.197660e+04 * invT);
    kfwd[187] = std::exp(1.750439e+01 - 5.534912e+02 * invT);
    kfwd[188] = std::exp(-7.592870e-01 + 3.200000e+00 * logT - 2.707331e+03 * invT);
    kfwd[189] = std::exp(2.412446e+01);
    kfwd[190] = std::exp(2.412446e+01);
    kfwd[191] = std::exp(2.302585e+01);
    kfwd[192] = std::exp(2.459862e+01 - 2.526202e+03 * invT);
    kfwd[193] = std::exp(2.532844e+01);
    kfwd[194] = std::exp(2.412446e+01);
    kfwd[195] = std::exp(2.412446e+01);
    kfwd[196] = std::exp(2.441215e+01);
    kfwd[197] = std::exp(2.233270e+01);
    kfwd[198] = std::exp(2.532844e+01 - 1.258049e+04 * invT);
    kfwd[199] = std::exp(9.903488e+00 + 1.800000e+00 * logT - 5.032196e+02 * invT);
    kfwd[200] = std::exp(1.475552e+01 + 1.100000e+00 * logT - 6.865867e+03 * invT);
    kfwd[201] = std::exp(2.271114e+01 - 1.132244e+03 * invT);
    kfwd[203] = std::exp(2.163956e+01);
    kfwd[204] = std::exp(8.575462e+00 + 2.000000e+00 * logT - 1.006439e+03 * invT);
    kfwd[205] = std::exp(1.721671e+01 - 1.443269e+03 * invT);
    kfwd[207] = std::exp(2.361364e+01);
    kfwd[208] = std::exp(2.923846e+01 - 1.400000e+00 * logT - 1.128624e+04 * invT);
    kfwd[209] = std::exp(2.182188e+01 - 3.200000e-01 * logT + 6.591170e+01 * invT);
    kfwd[211] = std::exp(2.251503e+01);
    kfwd[212] = std::exp(2.394214e+01);
    kfwd[213] = std::exp(2.050012e+01);
    kfwd[214] = std::exp(2.671473e+01 - 2.104766e+04 * invT);
    kfwd[215] = std::exp(1.046310e+01 + 1.650000e+00 * logT + 4.895068e+02 * invT);
    kfwd[216] = std::exp(8.039157e+00 + 2.000000e+00 * logT + 1.501003e+02 * invT);
    kfwd[217] = std::exp(1.169525e+01 + 1.650000e+00 * logT - 1.647742e+02 * invT);
    kfwd[218] = std::exp(5.135798e+00 + 2.500000e+00 * logT - 1.254441e+03 * invT);
    kfwd[220] = std::exp(2.170159e+01);
    kfwd[221] = std::exp(2.182188e+01);
    kfwd[223] = std::exp(4.421912e+01 - 2.390000e+00 * logT - 5.628747e+03 * invT);
    kfwd[224] = std::exp(4.875975e+01 - 2.830000e+00 * logT - 9.369219e+03 * invT);
    kfwd[226] = std::exp(2.441215e+01 - 2.390293e+04 * invT);
    kfwd[227] = std::exp(2.441215e+01 - 2.563004e+04 * invT);
    kfwd[228] = std::exp(7.170120e+00 + 2.400000e+00 * logT - 2.249935e+03 * invT);
    kfwd[229] = std::exp(7.192934e+00 + 2.540000e+00 * logT - 3.402504e+03 * invT);
    kfwd[230] = std::exp(3.862833e+00 + 2.710000e+00 * logT - 1.060440e+03 * invT);
    kfwd[231] = std::exp(5.247024e+00 + 2.680000e+00 * logT - 1.871197e+03 * invT);
    kfwd[232] = std::exp(1.611810e+01 + 1.000000e+00 * logT - 8.051010e+02 * invT);
    kfwd[233] = std::exp(9.903488e+00 - 1.600000e+00 * logT + 5.027163e+01 * invT);
    kfwd[234] = std::exp(2.265921e+00 + 2.600000e+00 * logT - 7.003458e+03 * invT);
    kfwd[235] = std::exp(3.862833e+00 + 2.550000e+00 * logT - 8.298795e+03 * invT);
    kfwd[236] = std::exp(-1.168728e+01 + 4.200000e+00 * logT - 4.365888e+03 * invT);
    kfwd[238] = std::exp(1.868305e+01);
    kfwd[241] = std::exp(3.118637e+01 - 1.600000e+00 * logT - 1.761268e+03 * invT);
    kfwd[242] = std::exp(2.141641e+01);
    kfwd[243] = std::exp(8.150677e+01 - 8.300000e+00 * logT - 1.107083e+04 * invT);
    kfwd[244] = std::exp(1.191839e+01 + 3.522537e+03 * invT);
    kfwd[245] = std::exp(3.453878e+01 - 2.163844e+04 * invT);
    kfwd[247] = std::exp(2.481761e+01 - 2.633857e+04 * invT);
    kfwd[248] = std::exp(2.441215e+01 - 2.506031e+04 * invT);
    kfwd[249] = std::exp(-3.199073e+00 + 3.590000e+00 * logT - 8.635192e+03 * invT);
    kfwd[250] = std::exp(-2.068304e+00 + 3.370000e+00 * logT - 6.904117e+03 * invT);
    kfwd[251] = std::exp(2.545065e+01 - 3.950274e+03 * invT);
    kfwd[252] = std::exp(2.475218e+01 - 2.616742e+03 * invT);
    kfwd[253] = std::exp(1.617069e+01 + 9.700000e-01 * logT - 7.981264e+02 * invT);
    kfwd[254] = std::exp(1.144465e+01 + 1.610000e+00 * logT + 1.755733e+01 * invT);
    kfwd[255] = std::exp(7.937375e+00 + 2.540000e+00 * logT - 3.505126e+03 * invT);
    kfwd[256] = std::exp(7.432484e+00 + 2.400000e+00 * logT - 2.260966e+03 * invT);
    kfwd[257] = std::exp(2.888493e+01 + 4.630000e-01 * logT - 1.482983e+04 * invT);
    kfwd[258] = std::exp(2.459509e+01 + 1.044000e+00 * logT - 1.527266e+04 * invT);
    kfwd[259] = std::exp(3.684136e+01 - 3.668307e+04 * invT);
    kfwd[260] = std::exp(6.492240e+00 + 2.540000e+00 * logT - 3.403707e+03 * invT);
    kfwd[261] = std::exp(2.273817e+01);
    kfwd[262] = std::exp(9.833290e+01 - 9.410000e+00 * logT - 2.087858e+04 * invT);
    kfwd[263] = std::exp(-7.085686e+00 + 3.590000e+00 * logT - 6.038635e+03 * invT);
    kfwd[264] = std::exp(2.141641e+01);
    kfwd[265] = std::exp(2.832417e+01 - 1.207727e+04 * invT);
    kfwd[266] = std::exp(-5.654992e+00 + 2.234000e+00 * logT + 8.333316e+03 * invT);
    kfwd[267] = std::exp(3.793997e+01 - 2.088361e+04 * invT);

    kfwd[4] *= ( 1.000e+00 * C[0] + 5.000e-01 * C[1] + 5.000e-01 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.500e+00 * C[7] + 1.200e+01 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.900e+00 * C[11] + 3.800e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 1.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[5] *= ( 1.000e+00 * C[0] + 3.800e-01 * C[1] + 3.800e-01 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.500e+00 * C[7] + 1.200e+01 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.900e+00 * C[11] + 3.800e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 1.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[6] *= ( 1.000e+00 * C[0] + 2.000e-01 * C[1] + 2.000e-01 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.500e+00 * C[7] + 1.200e+01 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.900e+00 * C[11] + 3.800e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 1.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[7] *= ( 1.000e+00 * C[0] + 7.500e-01 * C[1] + 7.500e-01 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.500e+00 * C[7] + 1.200e+01 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.900e+00 * C[11] + 3.800e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 1.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[27] *= ( 1.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 1.900e+00 * C[7] + 1.200e+01 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 2.500e+00 * C[11] + 2.500e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 1.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[60] *= ( 1.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.400e+00 * C[7] + 1.540e+01 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.800e+00 * C[11] + 3.600e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 1.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[78] *= ( 1.000e+00 * C[0] + 7.000e-01 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.000e+00 * C[7] + 6.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.500e+00 * C[11] + 2.000e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[102] *= ( 1.000e+00 * C[0] + 7.000e-01 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.000e+00 * C[7] + 6.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.500e+00 * C[11] + 2.000e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[103] *= ( 1.000e+00 * C[0] + 7.000e-01 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.000e+00 * C[7] + 6.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.500e+00 * C[11] + 2.000e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[132] *= ( 1.000e+00 * C[0] + 7.000e-01 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.000e+00 * C[7] + 6.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.500e+00 * C[11] + 2.000e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[133] *= ( 1.000e+00 * C[0] + 7.000e-01 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.000e+00 * C[7] + 6.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.500e+00 * C[11] + 2.000e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[185] *= ( 1.000e+00 * C[0] + 7.000e-01 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.000e+00 * C[7] + 6.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.500e+00 * C[11] + 2.000e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[186] *= ( 1.000e+00 * C[0] + 7.000e-01 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.000e+00 * C[7] + 6.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.500e+00 * C[11] + 2.000e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 
    kfwd[198] *= ( 1.000e+00 * C[0] + 7.000e-01 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[5] + 1.000e+00 * C[6] + 2.000e+00 * C[7] + 6.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.500e+00 * C[11] + 2.000e+00 * C[12] + 1.000e+00 * C[13] + 1.000e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] + 1.000e+00 * C[53] + 1.000e+00 * C[54] + 1.000e+00 * C[55] + 1.000e+00 * C[56] ); 

    getFalloffRates(T, C, kfwd);

    for(int i = 0; i < ii; ++i) { krev[i] = kfwd[i] * keq[i]; }

  };

  void getNetRatesOfProgress(double& T, std::vector<double>& C, std::vector<double>& Rnet) {

    std::vector<double> kfwd(ii,0.0);
    std::vector<double> krev(ii,0.0);
    std::vector<double> Rfwd(ii,0.0);
    std::vector<double> Rrev(ii,0.0);

    getRateCoefficients(T, C, kfwd, krev);

    Rfwd[0] = kfwd[0] * C[3] * C[4];
    Rrev[0] = krev[0] * C[6] * C[5];

    Rfwd[1] = kfwd[1] * C[7] * C[6];
    Rrev[1] = krev[1] * C[3] * C[5];

    Rfwd[2] = kfwd[2] * C[7] * C[5];
    Rrev[2] = krev[2] * C[3] * C[8];

    Rfwd[3] = kfwd[3] * C[8] * C[6];
    Rrev[3] = krev[3] * C[5] * C[5];

    Rfwd[4] = kfwd[4] * C[3] * C[3];
    Rrev[4] = krev[4] * C[7];

    Rfwd[5] = kfwd[5] * C[3] * C[5];
    Rrev[5] = krev[5] * C[8];

    Rfwd[6] = kfwd[6] * C[6] * C[6];
    Rrev[6] = krev[6] * C[4];

    Rfwd[7] = kfwd[7] * C[3] * C[6];
    Rrev[7] = krev[7] * C[5];

    Rfwd[8] = kfwd[8] * C[3] * C[4];
    Rrev[8] = krev[8] * C[9];

    Rfwd[9] = kfwd[9] * C[3] * C[9];
    Rrev[9] = krev[9] * C[5] * C[5];

    Rfwd[10] = kfwd[10] * C[3] * C[9];
    Rrev[10] = krev[10] * C[7] * C[4];

    Rfwd[11] = kfwd[11] * C[3] * C[9];
    Rrev[11] = krev[11] * C[8] * C[6];

    Rfwd[12] = kfwd[12] * C[9] * C[6];
    Rrev[12] = krev[12] * C[4] * C[5];

    Rfwd[13] = kfwd[13] * C[9] * C[5];
    Rrev[13] = krev[13] * C[8] * C[4];

    Rfwd[14] = kfwd[14] * C[9] * C[5];
    Rrev[14] = krev[14] * C[8] * C[4];

    Rfwd[15] = kfwd[15] * C[5] * C[5];
    Rrev[15] = krev[15] * C[10];

    Rfwd[16] = kfwd[16] * C[9] * C[9];
    Rrev[16] = krev[16] * C[10] * C[4];

    Rfwd[17] = kfwd[17] * C[9] * C[9];
    Rrev[17] = krev[17] * C[10] * C[4];

    Rfwd[18] = kfwd[18] * C[3] * C[10];
    Rrev[18] = krev[18] * C[7] * C[9];

    Rfwd[19] = kfwd[19] * C[3] * C[10];
    Rrev[19] = krev[19] * C[8] * C[5];

    Rfwd[20] = kfwd[20] * C[10] * C[5];
    Rrev[20] = krev[20] * C[8] * C[9];

    Rfwd[21] = kfwd[21] * C[10] * C[5];
    Rrev[21] = krev[21] * C[8] * C[9];

    Rfwd[22] = kfwd[22] * C[10] * C[6];
    Rrev[22] = krev[22] * C[9] * C[5];

    Rfwd[23] = kfwd[23] * C[11] * C[6];
    Rrev[23] = krev[23] * C[12];

    Rfwd[24] = kfwd[24] * C[11] * C[5];
    Rrev[24] = krev[24] * C[12] * C[3];

    Rfwd[25] = kfwd[25] * C[11] * C[9];
    Rrev[25] = krev[25] * C[12] * C[5];

    Rfwd[26] = kfwd[26] * C[11] * C[4];
    Rrev[26] = krev[26] * C[12] * C[6];

    Rfwd[27] = kfwd[27] * C[13];
    Rrev[27] = krev[27] * C[11] * C[3];

    Rfwd[28] = kfwd[28] * C[3] * C[13];
    Rrev[28] = krev[28] * C[11] * C[7];

    Rfwd[29] = kfwd[29] * C[13] * C[6];
    Rrev[29] = krev[29] * C[11] * C[5];

    Rfwd[30] = kfwd[30] * C[13] * C[6];
    Rrev[30] = krev[30] * C[12] * C[3];

    Rfwd[31] = kfwd[31] * C[13] * C[5];
    Rrev[31] = krev[31] * C[11] * C[8];

    Rfwd[32] = kfwd[32] * C[13] * C[4];
    Rrev[32] = krev[32] * C[11] * C[9];

    Rfwd[33] = kfwd[33] * C[14] * C[13];
    Rrev[33] = krev[33] * C[15] * C[11];

    Rfwd[34] = kfwd[34] * C[3] * C[13];
    Rrev[34] = krev[34] * C[16];

    Rfwd[35] = kfwd[35] * C[16] * C[3];
    Rrev[35] = krev[35] * C[7] * C[13];

    Rfwd[36] = kfwd[36] * C[16] * C[6];
    Rrev[36] = krev[36] * C[13] * C[5];

    Rfwd[37] = kfwd[37] * C[16] * C[5];
    Rrev[37] = krev[37] * C[8] * C[13];

    Rfwd[38] = kfwd[38] * C[16] * C[4];
    Rrev[38] = krev[38] * C[13] * C[9];

    Rfwd[39] = kfwd[39] * C[16] * C[9];
    Rrev[39] = krev[39] * C[10] * C[13];

    Rfwd[40] = kfwd[40] * C[15] * C[3];
    Rrev[40] = krev[40] * C[14] * C[7];

    Rfwd[41] = kfwd[41] * C[15] * C[5];
    Rrev[41] = krev[41] * C[14] * C[8];

    Rfwd[42] = kfwd[42] * C[15] * C[6];
    Rrev[42] = krev[42] * C[14] * C[5];

    Rfwd[43] = kfwd[43] * C[15] * C[4];
    Rrev[43] = krev[43] * C[14] * C[9];

    Rfwd[44] = kfwd[44] * C[15] * C[9];
    Rrev[44] = krev[44] * C[14] * C[10];

    Rfwd[45] = kfwd[45] * C[14] * C[3];
    Rrev[45] = krev[45] * C[7] * C[17];

    Rfwd[46] = kfwd[46] * C[14] * C[3];
    Rrev[46] = krev[46] * C[7] * C[18];

    Rfwd[47] = kfwd[47] * C[14] * C[5];
    Rrev[47] = krev[47] * C[8] * C[18];

    Rfwd[48] = kfwd[48] * C[14] * C[6];
    Rrev[48] = krev[48] * C[16] * C[3];

    Rfwd[49] = kfwd[49] * C[14] * C[17];
    Rrev[49] = krev[49] * C[19] * C[3];

    Rfwd[50] = kfwd[50] * C[14] * C[9];
    Rrev[50] = krev[50] * C[20] * C[5];

    Rfwd[51] = kfwd[51] * C[14] * C[4];
    Rrev[51] = krev[51] * C[16] * C[5];

    Rfwd[52] = kfwd[52] * C[14] * C[4];
    Rrev[52] = krev[52] * C[20] * C[6];

    Rfwd[53] = kfwd[53] * C[14] * C[14];
    Rrev[53] = krev[53] * C[19] * C[7];

    Rfwd[54] = kfwd[54] * C[14] * C[14];
    Rrev[54] = krev[54] * C[21] * C[3];

    Rfwd[55] = kfwd[55] * C[14] * C[3];
    Rrev[55] = krev[55] * C[15];

    Rfwd[56] = kfwd[56] * C[14] * C[14];
    Rrev[56] = krev[56] * C[22];

    Rfwd[57] = kfwd[57] * C[5] * C[18];
    Rrev[57] = krev[57] * C[16] * C[3];

    Rfwd[58] = kfwd[58] * C[4] * C[18];
    Rrev[58] = krev[58] * C[11] * C[3] * C[5];

    Rfwd[59] = kfwd[59] * C[12] * C[18];
    Rrev[59] = krev[59] * C[16] * C[11];

    Rfwd[60] = kfwd[60] * C[18];
    Rrev[60] = krev[60] * C[17];

    Rfwd[61] = kfwd[61] * C[3] * C[17];
    Rrev[61] = krev[61] * C[23] * C[7];

    Rfwd[62] = kfwd[62] * C[5] * C[17];
    Rrev[62] = krev[62] * C[16] * C[3];

    Rfwd[63] = kfwd[63] * C[5] * C[17];
    Rrev[63] = krev[63] * C[23] * C[8];

    Rfwd[64] = kfwd[64] * C[6] * C[17];
    Rrev[64] = krev[64] * C[11] * C[3] * C[3];

    Rfwd[65] = kfwd[65] * C[6] * C[17];
    Rrev[65] = krev[65] * C[11] * C[7];

    Rfwd[66] = kfwd[66] * C[4] * C[17];
    Rrev[66] = krev[66] * C[12] * C[7];

    Rfwd[67] = kfwd[67] * C[4] * C[17];
    Rrev[67] = krev[67] * C[11] * C[3] * C[5];

    Rfwd[68] = kfwd[68] * C[17] * C[17];
    Rrev[68] = krev[68] * C[24] * C[3] * C[3];

    Rfwd[69] = kfwd[69] * C[23] * C[6];
    Rrev[69] = krev[69] * C[11] * C[3];

    Rfwd[70] = kfwd[70] * C[23] * C[4];
    Rrev[70] = krev[70] * C[13] * C[6];

    Rfwd[71] = kfwd[71] * C[23] * C[8];
    Rrev[71] = krev[71] * C[16] * C[3];

    Rfwd[72] = kfwd[72] * C[23] * C[12];
    Rrev[72] = krev[72] * C[11] * C[13];

    Rfwd[73] = kfwd[73] * C[20] * C[3];
    Rrev[73] = krev[73] * C[16] * C[7];

    Rfwd[74] = kfwd[74] * C[20] * C[3];
    Rrev[74] = krev[74] * C[8] * C[18];

    Rfwd[75] = kfwd[75] * C[20] * C[5];
    Rrev[75] = krev[75] * C[16] * C[8];

    Rfwd[76] = kfwd[76] * C[20] * C[6];
    Rrev[76] = krev[76] * C[16] * C[5];

    Rfwd[77] = kfwd[77] * C[20] * C[4];
    Rrev[77] = krev[77] * C[16] * C[9];

    Rfwd[78] = kfwd[78] * C[20];
    Rrev[78] = krev[78] * C[16] * C[3];

    Rfwd[79] = kfwd[79] * C[22] * C[3];
    Rrev[79] = krev[79] * C[21] * C[7];

    Rfwd[80] = kfwd[80] * C[22] * C[6];
    Rrev[80] = krev[80] * C[21] * C[5];

    Rfwd[81] = kfwd[81] * C[22] * C[5];
    Rrev[81] = krev[81] * C[21] * C[8];

    Rfwd[82] = kfwd[82] * C[22] * C[14];
    Rrev[82] = krev[82] * C[21] * C[15];

    Rfwd[83] = kfwd[83] * C[22];
    Rrev[83] = krev[83] * C[21] * C[3];

    Rfwd[84] = kfwd[84] * C[22] * C[9];
    Rrev[84] = krev[84] * C[21] * C[10];

    Rfwd[85] = kfwd[85] * C[21] * C[3];
    Rrev[85] = krev[85] * C[19] * C[7];

    Rfwd[86] = kfwd[86] * C[21] * C[6];
    Rrev[86] = krev[86] * C[19] * C[5];

    Rfwd[87] = kfwd[87] * C[21] * C[6];
    Rrev[87] = krev[87] * C[16] * C[14];

    Rfwd[88] = kfwd[88] * C[21] * C[4];
    Rrev[88] = krev[88] * C[19] * C[9];

    Rfwd[89] = kfwd[89] * C[21] * C[4];
    Rrev[89] = krev[89] * C[25];

    Rfwd[90] = kfwd[90] * C[25];
    Rrev[90] = krev[90] * C[19] * C[9];

    Rfwd[91] = kfwd[91] * C[25] * C[4];
    Rrev[91] = krev[91] * C[26] * C[5];

    Rfwd[92] = kfwd[92] * C[26];
    Rrev[92] = krev[92] * C[16] * C[13] * C[5];

    Rfwd[93] = kfwd[93] * C[21];
    Rrev[93] = krev[93] * C[19] * C[3];

    Rfwd[94] = kfwd[94] * C[19] * C[3];
    Rrev[94] = krev[94] * C[27] * C[7];

    Rfwd[95] = kfwd[95] * C[19] * C[5];
    Rrev[95] = krev[95] * C[27] * C[8];

    Rfwd[96] = kfwd[96] * C[19] * C[6];
    Rrev[96] = krev[96] * C[14] * C[13];

    Rfwd[97] = kfwd[97] * C[19] * C[6];
    Rrev[97] = krev[97] * C[28] * C[3];

    Rfwd[98] = kfwd[98] * C[19] * C[19];
    Rrev[98] = krev[98] * C[27] * C[21];

    Rfwd[99] = kfwd[99] * C[19] * C[4];
    Rrev[99] = krev[99] * C[27] * C[9];

    Rfwd[100] = kfwd[100] * C[19] * C[9];
    Rrev[100] = krev[100] * C[29] * C[5];

    Rfwd[101] = kfwd[101] * C[29] * C[9];
    Rrev[101] = krev[101] * C[14] * C[11] * C[10];

    Rfwd[102] = kfwd[102] * C[19];
    Rrev[102] = krev[102] * C[27] * C[3];

    Rfwd[103] = kfwd[103] * C[19];
    Rrev[103] = krev[103] * C[24] * C[7];

    Rfwd[104] = kfwd[104] * C[27] * C[3];
    Rrev[104] = krev[104] * C[24] * C[7];

    Rfwd[105] = kfwd[105] * C[27];
    Rrev[105] = krev[105] * C[24] * C[3];

    Rfwd[106] = kfwd[106] * C[27] * C[4];
    Rrev[106] = krev[106] * C[16] * C[13];

    Rfwd[107] = kfwd[107] * C[27] * C[4];
    Rrev[107] = krev[107] * C[28] * C[6];

    Rfwd[108] = kfwd[108] * C[27] * C[4];
    Rrev[108] = krev[108] * C[24] * C[9];

    Rfwd[109] = kfwd[109] * C[24] * C[6];
    Rrev[109] = krev[109] * C[3] * C[30];

    Rfwd[110] = kfwd[110] * C[24] * C[6];
    Rrev[110] = krev[110] * C[11] * C[17];

    Rfwd[111] = kfwd[111] * C[24] * C[4];
    Rrev[111] = krev[111] * C[16] * C[11];

    Rfwd[112] = kfwd[112] * C[24] * C[5];
    Rrev[112] = krev[112] * C[31] * C[3];

    Rfwd[113] = kfwd[113] * C[24] * C[5];
    Rrev[113] = krev[113] * C[32] * C[8];

    Rfwd[114] = kfwd[114] * C[31] * C[3];
    Rrev[114] = krev[114] * C[14] * C[11];

    Rfwd[115] = kfwd[115] * C[31] * C[6];
    Rrev[115] = krev[115] * C[12] * C[17];

    Rfwd[116] = kfwd[116] * C[31] * C[6];
    Rrev[116] = krev[116] * C[30] * C[5];

    Rfwd[117] = kfwd[117] * C[31] * C[14];
    Rrev[117] = krev[117] * C[21] * C[11];

    Rfwd[118] = kfwd[118] * C[3] * C[30];
    Rrev[118] = krev[118] * C[11] * C[18];

    Rfwd[119] = kfwd[119] * C[30] * C[5];
    Rrev[119] = krev[119] * C[11] * C[3] * C[13];

    Rfwd[120] = kfwd[120] * C[30] * C[6];
    Rrev[120] = krev[120] * C[11] * C[11] * C[3];

    Rfwd[121] = kfwd[121] * C[30] * C[4];
    Rrev[121] = krev[121] * C[11] * C[11] * C[5];

    Rfwd[122] = kfwd[122] * C[30] * C[4];
    Rrev[122] = krev[122] * C[11] * C[12] * C[3];

    Rfwd[123] = kfwd[123] * C[32] * C[5];
    Rrev[123] = krev[123] * C[3] * C[30];

    Rfwd[124] = kfwd[124] * C[32] * C[6];
    Rrev[124] = krev[124] * C[23] * C[11];

    Rfwd[125] = kfwd[125] * C[32] * C[4];
    Rrev[125] = krev[125] * C[30] * C[6];

    Rfwd[126] = kfwd[126] * C[32] * C[4];
    Rrev[126] = krev[126] * C[23] * C[12];

    Rfwd[127] = kfwd[127] * C[32] * C[4];
    Rrev[127] = krev[127] * C[11] * C[13];

    Rfwd[128] = kfwd[128] * C[33] * C[3];
    Rrev[128] = krev[128] * C[16] * C[7];

    Rfwd[129] = kfwd[129] * C[33] * C[3];
    Rrev[129] = krev[129] * C[14] * C[5];

    Rfwd[130] = kfwd[130] * C[33] * C[5];
    Rrev[130] = krev[130] * C[16] * C[8];

    Rfwd[131] = kfwd[131] * C[33] * C[4];
    Rrev[131] = krev[131] * C[16] * C[9];

    Rfwd[132] = kfwd[132] * C[33];
    Rrev[132] = krev[132] * C[16] * C[3];

    Rfwd[133] = kfwd[133] * C[20];
    Rrev[133] = krev[133] * C[33];

    Rfwd[134] = kfwd[134] * C[31] * C[5];
    Rrev[134] = krev[134] * C[33] * C[11];

    Rfwd[135] = kfwd[135] * C[34] * C[5];
    Rrev[135] = krev[135] * C[33] * C[8];

    Rfwd[136] = kfwd[136] * C[34] * C[5];
    Rrev[136] = krev[136] * C[20] * C[8];

    Rfwd[137] = kfwd[137] * C[34] * C[3];
    Rrev[137] = krev[137] * C[33] * C[7];

    Rfwd[138] = kfwd[138] * C[34] * C[3];
    Rrev[138] = krev[138] * C[20] * C[7];

    Rfwd[139] = kfwd[139] * C[34] * C[6];
    Rrev[139] = krev[139] * C[33] * C[5];

    Rfwd[140] = kfwd[140] * C[34] * C[9];
    Rrev[140] = krev[140] * C[33] * C[10];

    Rfwd[141] = kfwd[141] * C[34] * C[4];
    Rrev[141] = krev[141] * C[33] * C[9];

    Rfwd[142] = kfwd[142] * C[34];
    Rrev[142] = krev[142] * C[14] * C[5];

    Rfwd[143] = kfwd[143] * C[28];
    Rrev[143] = krev[143] * C[31] * C[3];

    Rfwd[144] = kfwd[144] * C[28] * C[3];
    Rrev[144] = krev[144] * C[14] * C[13];

    Rfwd[145] = kfwd[145] * C[28] * C[3];
    Rrev[145] = krev[145] * C[31] * C[7];

    Rfwd[146] = kfwd[146] * C[28] * C[6];
    Rrev[146] = krev[146] * C[16] * C[13];

    Rfwd[147] = kfwd[147] * C[28] * C[5];
    Rrev[147] = krev[147] * C[31] * C[8];

    Rfwd[148] = kfwd[148] * C[28] * C[4];
    Rrev[148] = krev[148] * C[16] * C[11] * C[5];

    Rfwd[149] = kfwd[149] * C[28] * C[14];
    Rrev[149] = krev[149] * C[21] * C[11] * C[3];

    Rfwd[150] = kfwd[150] * C[28] * C[9];
    Rrev[150] = krev[150] * C[16] * C[13] * C[5];

    Rfwd[151] = kfwd[151] * C[28] * C[9];
    Rrev[151] = krev[151] * C[35] * C[4];

    Rfwd[152] = kfwd[152] * C[28];
    Rrev[152] = krev[152] * C[14] * C[11];

    Rfwd[153] = kfwd[153] * C[35];
    Rrev[153] = krev[153] * C[14] * C[13];

    Rfwd[154] = kfwd[154] * C[36];
    Rrev[154] = krev[154] * C[14] * C[11];

    Rfwd[155] = kfwd[155] * C[35] * C[5];
    Rrev[155] = krev[155] * C[36] * C[8];

    Rfwd[156] = kfwd[156] * C[35] * C[5];
    Rrev[156] = krev[156] * C[28] * C[8];

    Rfwd[157] = kfwd[157] * C[35] * C[6];
    Rrev[157] = krev[157] * C[36] * C[5];

    Rfwd[158] = kfwd[158] * C[35] * C[6];
    Rrev[158] = krev[158] * C[28] * C[5];

    Rfwd[159] = kfwd[159] * C[35] * C[3];
    Rrev[159] = krev[159] * C[36] * C[7];

    Rfwd[160] = kfwd[160] * C[35] * C[3];
    Rrev[160] = krev[160] * C[28] * C[7];

    Rfwd[161] = kfwd[161] * C[14] * C[35];
    Rrev[161] = krev[161] * C[36] * C[15];

    Rfwd[162] = kfwd[162] * C[14] * C[35];
    Rrev[162] = krev[162] * C[28] * C[15];

    Rfwd[163] = kfwd[163] * C[35] * C[9];
    Rrev[163] = krev[163] * C[36] * C[10];

    Rfwd[164] = kfwd[164] * C[35] * C[9];
    Rrev[164] = krev[164] * C[28] * C[10];

    Rfwd[165] = kfwd[165] * C[35] * C[4];
    Rrev[165] = krev[165] * C[36] * C[9];

    Rfwd[166] = kfwd[166] * C[37];
    Rrev[166] = krev[166] * C[33] * C[14];

    Rfwd[167] = kfwd[167] * C[37];
    Rrev[167] = krev[167] * C[19] * C[8];

    Rfwd[168] = kfwd[168] * C[37] * C[5];
    Rrev[168] = krev[168] * C[38] * C[8];

    Rfwd[169] = kfwd[169] * C[37] * C[5];
    Rrev[169] = krev[169] * C[39] * C[8];

    Rfwd[170] = kfwd[170] * C[37] * C[5];
    Rrev[170] = krev[170] * C[40] * C[8];

    Rfwd[171] = kfwd[171] * C[37] * C[3];
    Rrev[171] = krev[171] * C[38] * C[7];

    Rfwd[172] = kfwd[172] * C[37] * C[3];
    Rrev[172] = krev[172] * C[39] * C[7];

    Rfwd[173] = kfwd[173] * C[37] * C[3];
    Rrev[173] = krev[173] * C[40] * C[7];

    Rfwd[174] = kfwd[174] * C[37] * C[6];
    Rrev[174] = krev[174] * C[38] * C[5];

    Rfwd[175] = kfwd[175] * C[37] * C[6];
    Rrev[175] = krev[175] * C[39] * C[5];

    Rfwd[176] = kfwd[176] * C[37] * C[6];
    Rrev[176] = krev[176] * C[40] * C[5];

    Rfwd[177] = kfwd[177] * C[37] * C[14];
    Rrev[177] = krev[177] * C[38] * C[15];

    Rfwd[178] = kfwd[178] * C[37] * C[14];
    Rrev[178] = krev[178] * C[39] * C[15];

    Rfwd[179] = kfwd[179] * C[37] * C[14];
    Rrev[179] = krev[179] * C[40] * C[15];

    Rfwd[180] = kfwd[180] * C[37] * C[9];
    Rrev[180] = krev[180] * C[39] * C[10];

    Rfwd[181] = kfwd[181] * C[37] * C[9];
    Rrev[181] = krev[181] * C[38] * C[10];

    Rfwd[182] = kfwd[182] * C[37] * C[9];
    Rrev[182] = krev[182] * C[40] * C[10];

    Rfwd[183] = kfwd[183] * C[19] * C[5];
    Rrev[183] = krev[183] * C[38];

    Rfwd[184] = kfwd[184] * C[21] * C[9];
    Rrev[184] = krev[184] * C[40] * C[5];

    Rfwd[185] = kfwd[185] * C[40];
    Rrev[185] = krev[185] * C[35] * C[3];

    Rfwd[186] = kfwd[186] * C[40];
    Rrev[186] = krev[186] * C[16] * C[14];

    Rfwd[187] = kfwd[187] * C[40] * C[4];
    Rrev[187] = krev[187] * C[35] * C[9];

    Rfwd[188] = kfwd[188] * C[40] * C[11];
    Rrev[188] = krev[188] * C[21] * C[12];

    Rfwd[189] = kfwd[189] * C[40] * C[3];
    Rrev[189] = krev[189] * C[33] * C[14];

    Rfwd[190] = kfwd[190] * C[40] * C[3];
    Rrev[190] = krev[190] * C[19] * C[8];

    Rfwd[191] = kfwd[191] * C[40] * C[5];
    Rrev[191] = krev[191] * C[35] * C[8];

    Rfwd[192] = kfwd[192] * C[39] * C[4];
    Rrev[192] = krev[192] * C[35] * C[9];

    Rfwd[193] = kfwd[193] * C[39] * C[6];
    Rrev[193] = krev[193] * C[35] * C[5];

    Rfwd[194] = kfwd[194] * C[39] * C[3];
    Rrev[194] = krev[194] * C[19] * C[8];

    Rfwd[195] = kfwd[195] * C[39] * C[3];
    Rrev[195] = krev[195] * C[33] * C[14];

    Rfwd[196] = kfwd[196] * C[39] * C[9];
    Rrev[196] = krev[196] * C[35] * C[5] * C[5];

    Rfwd[197] = kfwd[197] * C[39] * C[5];
    Rrev[197] = krev[197] * C[35] * C[8];

    Rfwd[198] = kfwd[198] * C[39];
    Rrev[198] = krev[198] * C[35] * C[3];

    Rfwd[199] = kfwd[199] * C[41] * C[6];
    Rrev[199] = krev[199] * C[19] * C[11];

    Rfwd[200] = kfwd[200] * C[24] * C[14];
    Rrev[200] = krev[200] * C[41] * C[3];

    Rfwd[201] = kfwd[201] * C[41] * C[6];
    Rrev[201] = krev[201] * C[14] * C[30];

    Rfwd[202] = kfwd[202] * C[42] * C[3];
    Rrev[202] = krev[202] * C[41];

    Rfwd[203] = kfwd[203] * C[42] * C[9];
    Rrev[203] = krev[203] * C[41] * C[4];

    Rfwd[204] = kfwd[204] * C[41] * C[5];
    Rrev[204] = krev[204] * C[42] * C[8];

    Rfwd[205] = kfwd[205] * C[42] * C[4];
    Rrev[205] = krev[205] * C[31] * C[13];

    Rfwd[206] = kfwd[206] * C[41] * C[3];
    Rrev[206] = krev[206] * C[43];

    Rfwd[207] = kfwd[207] * C[43] * C[3];
    Rrev[207] = krev[207] * C[41] * C[7];

    Rfwd[208] = kfwd[208] * C[43] * C[4];
    Rrev[208] = krev[208] * C[41] * C[9];

    Rfwd[209] = kfwd[209] * C[43] * C[14];
    Rrev[209] = krev[209] * C[41] * C[15];

    Rfwd[210] = kfwd[210] * C[24] * C[14];
    Rrev[210] = krev[210] * C[43];

    Rfwd[211] = kfwd[211] * C[43] * C[5];
    Rrev[211] = krev[211] * C[41] * C[8];

    Rfwd[212] = kfwd[212] * C[42] * C[13];
    Rrev[212] = krev[212] * C[41] * C[11];

    Rfwd[213] = kfwd[213] * C[42] * C[9];
    Rrev[213] = krev[213] * C[27] * C[11] * C[5];

    Rfwd[214] = kfwd[214] * C[41] * C[4];
    Rrev[214] = krev[214] * C[14] * C[11] * C[13];

    Rfwd[215] = kfwd[215] * C[44] * C[6];
    Rrev[215] = krev[215] * C[21] * C[13];

    Rfwd[216] = kfwd[216] * C[44] * C[5];
    Rrev[216] = krev[216] * C[43] * C[8];

    Rfwd[217] = kfwd[217] * C[44] * C[6];
    Rrev[217] = krev[217] * C[31] * C[14] * C[3];

    Rfwd[218] = kfwd[218] * C[44] * C[3];
    Rrev[218] = krev[218] * C[43] * C[7];

    Rfwd[219] = kfwd[219] * C[43] * C[3];
    Rrev[219] = krev[219] * C[44];

    Rfwd[220] = kfwd[220] * C[43] * C[9];
    Rrev[220] = krev[220] * C[44] * C[4];

    Rfwd[221] = kfwd[221] * C[43] * C[9];
    Rrev[221] = krev[221] * C[27] * C[16] * C[5];

    Rfwd[222] = kfwd[222] * C[27] * C[14];
    Rrev[222] = krev[222] * C[44];

    Rfwd[223] = kfwd[223] * C[44] * C[3];
    Rrev[223] = krev[223] * C[19] * C[14];

    Rfwd[224] = kfwd[224] * C[27] * C[14];
    Rrev[224] = krev[224] * C[43] * C[3];

    Rfwd[225] = kfwd[225] * C[45];
    Rrev[225] = krev[225] * C[21] * C[14];

    Rfwd[226] = kfwd[226] * C[45] * C[4];
    Rrev[226] = krev[226] * C[9] * C[46];

    Rfwd[227] = kfwd[227] * C[45] * C[4];
    Rrev[227] = krev[227] * C[9] * C[47];

    Rfwd[228] = kfwd[228] * C[45] * C[3];
    Rrev[228] = krev[228] * C[7] * C[46];

    Rfwd[229] = kfwd[229] * C[45] * C[3];
    Rrev[229] = krev[229] * C[7] * C[47];

    Rfwd[230] = kfwd[230] * C[45] * C[6];
    Rrev[230] = krev[230] * C[46] * C[5];

    Rfwd[231] = kfwd[231] * C[45] * C[6];
    Rrev[231] = krev[231] * C[47] * C[5];

    Rfwd[232] = kfwd[232] * C[45] * C[5];
    Rrev[232] = krev[232] * C[8] * C[47];

    Rfwd[233] = kfwd[233] * C[45] * C[5];
    Rrev[233] = krev[233] * C[8] * C[46];

    Rfwd[234] = kfwd[234] * C[45] * C[9];
    Rrev[234] = krev[234] * C[10] * C[46];

    Rfwd[235] = kfwd[235] * C[45] * C[9];
    Rrev[235] = krev[235] * C[10] * C[47];

    Rfwd[236] = kfwd[236] * C[45] * C[46];
    Rrev[236] = krev[236] * C[45] * C[47];

    Rfwd[237] = kfwd[237] * C[44] * C[3];
    Rrev[237] = krev[237] * C[46];

    Rfwd[238] = kfwd[238] * C[46] * C[4];
    Rrev[238] = krev[238] * C[44] * C[9];

    Rfwd[239] = kfwd[239] * C[47];
    Rrev[239] = krev[239] * C[19] * C[14];

    Rfwd[240] = kfwd[240] * C[44] * C[3];
    Rrev[240] = krev[240] * C[47];

    Rfwd[241] = kfwd[241] * C[47] * C[4];
    Rrev[241] = krev[241] * C[44] * C[9];

    Rfwd[242] = kfwd[242] * C[47] * C[4];
    Rrev[242] = krev[242] * C[48];

    Rfwd[243] = kfwd[243] * C[48];
    Rrev[243] = krev[243] * C[44] * C[9];

    Rfwd[244] = kfwd[244] * C[48] * C[4];
    Rrev[244] = krev[244] * C[49] * C[5];

    Rfwd[245] = kfwd[245] * C[49];
    Rrev[245] = krev[245] * C[28] * C[16] * C[5];

    Rfwd[246] = kfwd[246] * C[50];
    Rrev[246] = krev[246] * C[21] * C[21];

    Rfwd[247] = kfwd[247] * C[50] * C[4];
    Rrev[247] = krev[247] * C[9] * C[51];

    Rfwd[248] = kfwd[248] * C[50] * C[4];
    Rrev[248] = krev[248] * C[9] * C[52];

    Rfwd[249] = kfwd[249] * C[50] * C[9];
    Rrev[249] = krev[249] * C[10] * C[51];

    Rfwd[250] = kfwd[250] * C[50] * C[9];
    Rrev[250] = krev[250] * C[10] * C[52];

    Rfwd[251] = kfwd[251] * C[50] * C[6];
    Rrev[251] = krev[251] * C[5] * C[51];

    Rfwd[252] = kfwd[252] * C[50] * C[6];
    Rrev[252] = krev[252] * C[5] * C[52];

    Rfwd[253] = kfwd[253] * C[50] * C[5];
    Rrev[253] = krev[253] * C[8] * C[51];

    Rfwd[254] = kfwd[254] * C[50] * C[5];
    Rrev[254] = krev[254] * C[8] * C[52];

    Rfwd[255] = kfwd[255] * C[50] * C[3];
    Rrev[255] = krev[255] * C[7] * C[51];

    Rfwd[256] = kfwd[256] * C[50] * C[3];
    Rrev[256] = krev[256] * C[7] * C[52];

    Rfwd[257] = kfwd[257] * C[51];
    Rrev[257] = krev[257] * C[19] * C[21];

    Rfwd[258] = kfwd[258] * C[52];
    Rrev[258] = krev[258] * C[44] * C[14];

    Rfwd[259] = kfwd[259] * C[53];
    Rrev[259] = krev[259] * C[43] * C[14];

    Rfwd[260] = kfwd[260] * C[53] * C[3];
    Rrev[260] = krev[260] * C[27] * C[19] * C[7];

    Rfwd[261] = kfwd[261] * C[4] * C[52];
    Rrev[261] = krev[261] * C[54];

    Rfwd[262] = kfwd[262] * C[54];
    Rrev[262] = krev[262] * C[53] * C[9];

    Rfwd[263] = kfwd[263] * C[4] * C[51];
    Rrev[263] = krev[263] * C[53] * C[9];

    Rfwd[264] = kfwd[264] * C[4] * C[51];
    Rrev[264] = krev[264] * C[55];

    Rfwd[265] = kfwd[265] * C[55];
    Rrev[265] = krev[265] * C[53] * C[9];

    Rfwd[266] = kfwd[266] * C[55] * C[4];
    Rrev[266] = krev[266] * C[56] * C[5];

    Rfwd[267] = kfwd[267] * C[56];
    Rrev[267] = krev[267] * C[12] * C[47] * C[5];

    for(int i = 0; i < ii; ++i) { Rnet[i] = Rfwd[i] - Rrev[i]; }

  };

  void getNetProductionRates(double& p, double& T, std::vector<double>& y, std::vector<double>& omega) {

    double W;
    double rho;
    std::vector<double> C(kk,0.0);
    std::vector<double> Rnet(ii,0.0);

    W   = 0.0;
    for(int k = 0; k < kk; ++k) { W += y[k] / mw[k]; }
    W   = 1.0 / W;
    rho = (p * W) / (GasConstant * T);
    for(int k = 0; k < kk; ++k) { C[k] = rho * y[k] / mw[k]; }

    getNetRatesOfProgress(T, C, Rnet);

    omega[3] =  - Rnet[0] + Rnet[1] + Rnet[2] - Rnet[4] - Rnet[4] - Rnet[5] - Rnet[7] - Rnet[8] - Rnet[9] - Rnet[10] - Rnet[11] - Rnet[18] - Rnet[19] + Rnet[24] + Rnet[27] - Rnet[28] + Rnet[30] - Rnet[34] - Rnet[35] - Rnet[40] - Rnet[45] - Rnet[46] + Rnet[48] + Rnet[49] + Rnet[54] - Rnet[55] + Rnet[57] + Rnet[58] - Rnet[61] + Rnet[62] + Rnet[64] + Rnet[64] + Rnet[67] + Rnet[68] + Rnet[68] + Rnet[69] + Rnet[71] - Rnet[73] - Rnet[74] + Rnet[78] - Rnet[79] + Rnet[83] - Rnet[85] + Rnet[93] - Rnet[94] + Rnet[97] + Rnet[102] - Rnet[104] + Rnet[105] + Rnet[109] + Rnet[112] - Rnet[114] - Rnet[118] + Rnet[119] + Rnet[120] + Rnet[122] + Rnet[123] - Rnet[128] - Rnet[129] + Rnet[132] - Rnet[137] - Rnet[138] + Rnet[143] - Rnet[144] - Rnet[145] + Rnet[149] - Rnet[159] - Rnet[160] - Rnet[171] - Rnet[172] - Rnet[173] + Rnet[185] - Rnet[189] - Rnet[190] - Rnet[194] - Rnet[195] + Rnet[198] + Rnet[200] - Rnet[202] - Rnet[206] - Rnet[207] + Rnet[217] - Rnet[218] - Rnet[219] - Rnet[223] + Rnet[224] - Rnet[228] - Rnet[229] - Rnet[237] - Rnet[240] - Rnet[255] - Rnet[256] - Rnet[260];
    omega[4] =  - Rnet[0] + Rnet[6] - Rnet[8] + Rnet[10] + Rnet[12] + Rnet[13] + Rnet[14] + Rnet[16] + Rnet[17] - Rnet[26] - Rnet[32] - Rnet[38] - Rnet[43] - Rnet[51] - Rnet[52] - Rnet[58] - Rnet[66] - Rnet[67] - Rnet[70] - Rnet[77] - Rnet[88] - Rnet[89] - Rnet[91] - Rnet[99] - Rnet[106] - Rnet[107] - Rnet[108] - Rnet[111] - Rnet[121] - Rnet[122] - Rnet[125] - Rnet[126] - Rnet[127] - Rnet[131] - Rnet[141] - Rnet[148] + Rnet[151] - Rnet[165] - Rnet[187] - Rnet[192] + Rnet[203] - Rnet[205] - Rnet[208] - Rnet[214] + Rnet[220] - Rnet[226] - Rnet[227] - Rnet[238] - Rnet[241] - Rnet[242] - Rnet[244] - Rnet[247] - Rnet[248] - Rnet[261] - Rnet[263] - Rnet[264] - Rnet[266];
    omega[5] =  + Rnet[0] + Rnet[1] - Rnet[2] + Rnet[3] + Rnet[3] - Rnet[5] + Rnet[7] + Rnet[9] + Rnet[9] + Rnet[12] - Rnet[13] - Rnet[14] - Rnet[15] - Rnet[15] + Rnet[19] - Rnet[20] - Rnet[21] + Rnet[22] - Rnet[24] + Rnet[25] + Rnet[29] - Rnet[31] + Rnet[36] - Rnet[37] - Rnet[41] + Rnet[42] - Rnet[47] + Rnet[50] + Rnet[51] - Rnet[57] + Rnet[58] - Rnet[62] - Rnet[63] + Rnet[67] - Rnet[75] + Rnet[76] + Rnet[80] - Rnet[81] + Rnet[86] + Rnet[91] + Rnet[92] - Rnet[95] + Rnet[100] - Rnet[112] - Rnet[113] + Rnet[116] - Rnet[119] + Rnet[121] - Rnet[123] + Rnet[129] - Rnet[130] - Rnet[134] - Rnet[135] - Rnet[136] + Rnet[139] + Rnet[142] - Rnet[147] + Rnet[148] + Rnet[150] - Rnet[155] - Rnet[156] + Rnet[157] + Rnet[158] - Rnet[168] - Rnet[169] - Rnet[170] + Rnet[174] + Rnet[175] + Rnet[176] - Rnet[183] + Rnet[184] - Rnet[191] + Rnet[193] + Rnet[196] + Rnet[196] - Rnet[197] - Rnet[204] - Rnet[211] + Rnet[213] - Rnet[216] + Rnet[221] + Rnet[230] + Rnet[231] - Rnet[232] - Rnet[233] + Rnet[244] + Rnet[245] + Rnet[251] + Rnet[252] - Rnet[253] - Rnet[254] + Rnet[266] + Rnet[267];
    omega[6] =  + Rnet[0] - Rnet[1] - Rnet[3] - Rnet[6] - Rnet[6] - Rnet[7] + Rnet[11] - Rnet[12] - Rnet[22] - Rnet[23] + Rnet[26] - Rnet[29] - Rnet[30] - Rnet[36] - Rnet[42] - Rnet[48] + Rnet[52] - Rnet[64] - Rnet[65] - Rnet[69] + Rnet[70] - Rnet[76] - Rnet[80] - Rnet[86] - Rnet[87] - Rnet[96] - Rnet[97] + Rnet[107] - Rnet[109] - Rnet[110] - Rnet[115] - Rnet[116] - Rnet[120] - Rnet[124] + Rnet[125] - Rnet[139] - Rnet[146] - Rnet[157] - Rnet[158] - Rnet[174] - Rnet[175] - Rnet[176] - Rnet[193] - Rnet[199] - Rnet[201] - Rnet[215] - Rnet[217] - Rnet[230] - Rnet[231] - Rnet[251] - Rnet[252];
    omega[7] =  - Rnet[1] - Rnet[2] + Rnet[4] + Rnet[10] + Rnet[18] + Rnet[28] + Rnet[35] + Rnet[40] + Rnet[45] + Rnet[46] + Rnet[53] + Rnet[61] + Rnet[65] + Rnet[66] + Rnet[73] + Rnet[79] + Rnet[85] + Rnet[94] + Rnet[103] + Rnet[104] + Rnet[128] + Rnet[137] + Rnet[138] + Rnet[145] + Rnet[159] + Rnet[160] + Rnet[171] + Rnet[172] + Rnet[173] + Rnet[207] + Rnet[218] + Rnet[228] + Rnet[229] + Rnet[255] + Rnet[256] + Rnet[260];
    omega[8] =  + Rnet[2] - Rnet[3] + Rnet[5] + Rnet[11] + Rnet[13] + Rnet[14] + Rnet[19] + Rnet[20] + Rnet[21] + Rnet[31] + Rnet[37] + Rnet[41] + Rnet[47] + Rnet[63] - Rnet[71] + Rnet[74] + Rnet[75] + Rnet[81] + Rnet[95] + Rnet[113] + Rnet[130] + Rnet[135] + Rnet[136] + Rnet[147] + Rnet[155] + Rnet[156] + Rnet[167] + Rnet[168] + Rnet[169] + Rnet[170] + Rnet[190] + Rnet[191] + Rnet[194] + Rnet[197] + Rnet[204] + Rnet[211] + Rnet[216] + Rnet[232] + Rnet[233] + Rnet[253] + Rnet[254];
    omega[9] =  + Rnet[8] - Rnet[9] - Rnet[10] - Rnet[11] - Rnet[12] - Rnet[13] - Rnet[14] - Rnet[16] - Rnet[16] - Rnet[17] - Rnet[17] + Rnet[18] + Rnet[20] + Rnet[21] + Rnet[22] - Rnet[25] + Rnet[32] + Rnet[38] - Rnet[39] + Rnet[43] - Rnet[44] - Rnet[50] + Rnet[77] - Rnet[84] + Rnet[88] + Rnet[90] + Rnet[99] - Rnet[100] - Rnet[101] + Rnet[108] + Rnet[131] - Rnet[140] + Rnet[141] - Rnet[150] - Rnet[151] - Rnet[163] - Rnet[164] + Rnet[165] - Rnet[180] - Rnet[181] - Rnet[182] - Rnet[184] + Rnet[187] + Rnet[192] - Rnet[196] - Rnet[203] + Rnet[208] - Rnet[213] - Rnet[220] - Rnet[221] + Rnet[226] + Rnet[227] - Rnet[234] - Rnet[235] + Rnet[238] + Rnet[241] + Rnet[243] + Rnet[247] + Rnet[248] - Rnet[249] - Rnet[250] + Rnet[262] + Rnet[263] + Rnet[265];
    omega[10] =  + Rnet[15] + Rnet[16] + Rnet[17] - Rnet[18] - Rnet[19] - Rnet[20] - Rnet[21] - Rnet[22] + Rnet[39] + Rnet[44] + Rnet[84] + Rnet[101] + Rnet[140] + Rnet[163] + Rnet[164] + Rnet[180] + Rnet[181] + Rnet[182] + Rnet[234] + Rnet[235] + Rnet[249] + Rnet[250];
    omega[11] =  - Rnet[23] - Rnet[24] - Rnet[25] - Rnet[26] + Rnet[27] + Rnet[28] + Rnet[29] + Rnet[31] + Rnet[32] + Rnet[33] + Rnet[58] + Rnet[59] + Rnet[64] + Rnet[65] + Rnet[67] + Rnet[69] + Rnet[72] + Rnet[101] + Rnet[110] + Rnet[111] + Rnet[114] + Rnet[117] + Rnet[118] + Rnet[119] + Rnet[120] + Rnet[120] + Rnet[121] + Rnet[121] + Rnet[122] + Rnet[124] + Rnet[127] + Rnet[134] + Rnet[148] + Rnet[149] + Rnet[152] + Rnet[154] - Rnet[188] + Rnet[199] + Rnet[212] + Rnet[213] + Rnet[214];
    omega[12] =  + Rnet[23] + Rnet[24] + Rnet[25] + Rnet[26] + Rnet[30] - Rnet[59] + Rnet[66] - Rnet[72] + Rnet[115] + Rnet[122] + Rnet[126] + Rnet[188] + Rnet[267];
    omega[13] =  - Rnet[27] - Rnet[28] - Rnet[29] - Rnet[30] - Rnet[31] - Rnet[32] - Rnet[33] - Rnet[34] + Rnet[35] + Rnet[36] + Rnet[37] + Rnet[38] + Rnet[39] + Rnet[70] + Rnet[72] + Rnet[92] + Rnet[96] + Rnet[106] + Rnet[119] + Rnet[127] + Rnet[144] + Rnet[146] + Rnet[150] + Rnet[153] + Rnet[205] - Rnet[212] + Rnet[214] + Rnet[215];
    omega[14] =  - Rnet[33] + Rnet[40] + Rnet[41] + Rnet[42] + Rnet[43] + Rnet[44] - Rnet[45] - Rnet[46] - Rnet[47] - Rnet[48] - Rnet[49] - Rnet[50] - Rnet[51] - Rnet[52] - Rnet[53] - Rnet[53] - Rnet[54] - Rnet[54] - Rnet[55] - Rnet[56] - Rnet[56] - Rnet[82] + Rnet[87] + Rnet[96] + Rnet[101] + Rnet[114] - Rnet[117] + Rnet[129] + Rnet[142] + Rnet[144] - Rnet[149] + Rnet[152] + Rnet[153] + Rnet[154] - Rnet[161] - Rnet[162] + Rnet[166] - Rnet[177] - Rnet[178] - Rnet[179] + Rnet[186] + Rnet[189] + Rnet[195] - Rnet[200] + Rnet[201] - Rnet[209] - Rnet[210] + Rnet[214] + Rnet[217] - Rnet[222] + Rnet[223] - Rnet[224] + Rnet[225] + Rnet[239] + Rnet[258] + Rnet[259];
    omega[15] =  + Rnet[33] - Rnet[40] - Rnet[41] - Rnet[42] - Rnet[43] - Rnet[44] + Rnet[55] + Rnet[82] + Rnet[161] + Rnet[162] + Rnet[177] + Rnet[178] + Rnet[179] + Rnet[209];
    omega[16] =  + Rnet[34] - Rnet[35] - Rnet[36] - Rnet[37] - Rnet[38] - Rnet[39] + Rnet[48] + Rnet[51] + Rnet[57] + Rnet[59] + Rnet[62] + Rnet[71] + Rnet[73] + Rnet[75] + Rnet[76] + Rnet[77] + Rnet[78] + Rnet[87] + Rnet[92] + Rnet[106] + Rnet[111] + Rnet[128] + Rnet[130] + Rnet[131] + Rnet[132] + Rnet[146] + Rnet[148] + Rnet[150] + Rnet[186] + Rnet[221] + Rnet[245];
    omega[17] =  + Rnet[45] - Rnet[49] + Rnet[60] - Rnet[61] - Rnet[62] - Rnet[63] - Rnet[64] - Rnet[65] - Rnet[66] - Rnet[67] - Rnet[68] - Rnet[68] + Rnet[110] + Rnet[115];
    omega[18] =  + Rnet[46] + Rnet[47] - Rnet[57] - Rnet[58] - Rnet[59] - Rnet[60] + Rnet[74] + Rnet[118];
    omega[19] =  + Rnet[49] + Rnet[53] + Rnet[85] + Rnet[86] + Rnet[88] + Rnet[90] + Rnet[93] - Rnet[94] - Rnet[95] - Rnet[96] - Rnet[97] - Rnet[98] - Rnet[98] - Rnet[99] - Rnet[100] - Rnet[102] - Rnet[103] + Rnet[167] - Rnet[183] + Rnet[190] + Rnet[194] + Rnet[199] + Rnet[223] + Rnet[239] + Rnet[257] + Rnet[260];
    omega[20] =  + Rnet[50] + Rnet[52] - Rnet[73] - Rnet[74] - Rnet[75] - Rnet[76] - Rnet[77] - Rnet[78] - Rnet[133] + Rnet[136] + Rnet[138];
    omega[21] =  + Rnet[54] + Rnet[79] + Rnet[80] + Rnet[81] + Rnet[82] + Rnet[83] + Rnet[84] - Rnet[85] - Rnet[86] - Rnet[87] - Rnet[88] - Rnet[89] - Rnet[93] + Rnet[98] + Rnet[117] + Rnet[149] - Rnet[184] + Rnet[188] + Rnet[215] + Rnet[225] + Rnet[246] + Rnet[246] + Rnet[257];
    omega[22] =  + Rnet[56] - Rnet[79] - Rnet[80] - Rnet[81] - Rnet[82] - Rnet[83] - Rnet[84];
    omega[23] =  + Rnet[61] + Rnet[63] - Rnet[69] - Rnet[70] - Rnet[71] - Rnet[72] + Rnet[124] + Rnet[126];
    omega[24] =  + Rnet[68] + Rnet[103] + Rnet[104] + Rnet[105] + Rnet[108] - Rnet[109] - Rnet[110] - Rnet[111] - Rnet[112] - Rnet[113] - Rnet[200] - Rnet[210];
    omega[25] =  + Rnet[89] - Rnet[90] - Rnet[91];
    omega[26] =  + Rnet[91] - Rnet[92];
    omega[27] =  + Rnet[94] + Rnet[95] + Rnet[98] + Rnet[99] + Rnet[102] - Rnet[104] - Rnet[105] - Rnet[106] - Rnet[107] - Rnet[108] + Rnet[213] + Rnet[221] - Rnet[222] - Rnet[224] + Rnet[260];
    omega[28] =  + Rnet[97] + Rnet[107] - Rnet[143] - Rnet[144] - Rnet[145] - Rnet[146] - Rnet[147] - Rnet[148] - Rnet[149] - Rnet[150] - Rnet[151] - Rnet[152] + Rnet[156] + Rnet[158] + Rnet[160] + Rnet[162] + Rnet[164] + Rnet[245];
    omega[29] =  + Rnet[100] - Rnet[101];
    omega[30] =  + Rnet[109] + Rnet[116] - Rnet[118] - Rnet[119] - Rnet[120] - Rnet[121] - Rnet[122] + Rnet[123] + Rnet[125] + Rnet[201];
    omega[31] =  + Rnet[112] - Rnet[114] - Rnet[115] - Rnet[116] - Rnet[117] - Rnet[134] + Rnet[143] + Rnet[145] + Rnet[147] + Rnet[205] + Rnet[217];
    omega[32] =  + Rnet[113] - Rnet[123] - Rnet[124] - Rnet[125] - Rnet[126] - Rnet[127];
    omega[33] =  - Rnet[128] - Rnet[129] - Rnet[130] - Rnet[131] - Rnet[132] + Rnet[133] + Rnet[134] + Rnet[135] + Rnet[137] + Rnet[139] + Rnet[140] + Rnet[141] + Rnet[166] + Rnet[189] + Rnet[195];
    omega[34] =  - Rnet[135] - Rnet[136] - Rnet[137] - Rnet[138] - Rnet[139] - Rnet[140] - Rnet[141] - Rnet[142];
    omega[35] =  + Rnet[151] - Rnet[153] - Rnet[155] - Rnet[156] - Rnet[157] - Rnet[158] - Rnet[159] - Rnet[160] - Rnet[161] - Rnet[162] - Rnet[163] - Rnet[164] - Rnet[165] + Rnet[185] + Rnet[187] + Rnet[191] + Rnet[192] + Rnet[193] + Rnet[196] + Rnet[197] + Rnet[198];
    omega[36] =  - Rnet[154] + Rnet[155] + Rnet[157] + Rnet[159] + Rnet[161] + Rnet[163] + Rnet[165];
    omega[37] =  - Rnet[166] - Rnet[167] - Rnet[168] - Rnet[169] - Rnet[170] - Rnet[171] - Rnet[172] - Rnet[173] - Rnet[174] - Rnet[175] - Rnet[176] - Rnet[177] - Rnet[178] - Rnet[179] - Rnet[180] - Rnet[181] - Rnet[182];
    omega[38] =  + Rnet[168] + Rnet[171] + Rnet[174] + Rnet[177] + Rnet[181] + Rnet[183];
    omega[39] =  + Rnet[169] + Rnet[172] + Rnet[175] + Rnet[178] + Rnet[180] - Rnet[192] - Rnet[193] - Rnet[194] - Rnet[195] - Rnet[196] - Rnet[197] - Rnet[198];
    omega[40] =  + Rnet[170] + Rnet[173] + Rnet[176] + Rnet[179] + Rnet[182] + Rnet[184] - Rnet[185] - Rnet[186] - Rnet[187] - Rnet[188] - Rnet[189] - Rnet[190] - Rnet[191];
    omega[41] =  - Rnet[199] + Rnet[200] - Rnet[201] + Rnet[202] + Rnet[203] - Rnet[204] - Rnet[206] + Rnet[207] + Rnet[208] + Rnet[209] + Rnet[211] + Rnet[212] - Rnet[214];
    omega[42] =  - Rnet[202] - Rnet[203] + Rnet[204] - Rnet[205] - Rnet[212] - Rnet[213];
    omega[43] =  + Rnet[206] - Rnet[207] - Rnet[208] - Rnet[209] + Rnet[210] - Rnet[211] + Rnet[216] + Rnet[218] - Rnet[219] - Rnet[220] - Rnet[221] + Rnet[224] + Rnet[259];
    omega[44] =  - Rnet[215] - Rnet[216] - Rnet[217] - Rnet[218] + Rnet[219] + Rnet[220] + Rnet[222] - Rnet[223] - Rnet[237] + Rnet[238] - Rnet[240] + Rnet[241] + Rnet[243] + Rnet[258];
    omega[45] =  - Rnet[225] - Rnet[226] - Rnet[227] - Rnet[228] - Rnet[229] - Rnet[230] - Rnet[231] - Rnet[232] - Rnet[233] - Rnet[234] - Rnet[235] - Rnet[236] + Rnet[236];
    omega[46] =  + Rnet[226] + Rnet[228] + Rnet[230] + Rnet[233] + Rnet[234] - Rnet[236] + Rnet[237] - Rnet[238];
    omega[47] =  + Rnet[227] + Rnet[229] + Rnet[231] + Rnet[232] + Rnet[235] + Rnet[236] - Rnet[239] + Rnet[240] - Rnet[241] - Rnet[242] + Rnet[267];
    omega[48] =  + Rnet[242] - Rnet[243] - Rnet[244];
    omega[49] =  + Rnet[244] - Rnet[245];
    omega[50] =  - Rnet[246] - Rnet[247] - Rnet[248] - Rnet[249] - Rnet[250] - Rnet[251] - Rnet[252] - Rnet[253] - Rnet[254] - Rnet[255] - Rnet[256];
    omega[51] =  + Rnet[247] + Rnet[249] + Rnet[251] + Rnet[253] + Rnet[255] - Rnet[257] - Rnet[263] - Rnet[264];
    omega[52] =  + Rnet[248] + Rnet[250] + Rnet[252] + Rnet[254] + Rnet[256] - Rnet[258] - Rnet[261];
    omega[53] =  - Rnet[259] - Rnet[260] + Rnet[262] + Rnet[263] + Rnet[265];
    omega[54] =  + Rnet[261] - Rnet[262];
    omega[55] =  + Rnet[264] - Rnet[265] - Rnet[266];
    omega[56] =  + Rnet[266] - Rnet[267];

  };

}
