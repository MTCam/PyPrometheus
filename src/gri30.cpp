#include <cmath>
#include <vector>
#include <iostream>

namespace mech {

  int    mm = 5;
  int    kk = 53;
  int    ii = 325;
  int    ff = 29;
  double OneAtm      = 1.01325e5;
  double OneThird    = 1.0 / 3.0;
  double GasConstant = 8314.4621;

  std::vector<double> mw = { 2.015880e+00, 1.007940e+00, 1.599940e+01, 3.199880e+01, 1.700734e+01, 1.801528e+01, 3.300674e+01, 3.401468e+01, 1.201100e+01, 1.301894e+01, 1.402688e+01, 1.402688e+01, 1.503482e+01, 1.604276e+01, 2.801040e+01, 4.400980e+01, 2.901834e+01, 3.002628e+01, 3.103422e+01, 3.103422e+01, 3.204216e+01, 2.502994e+01, 2.603788e+01, 2.704582e+01, 2.805376e+01, 2.906170e+01, 3.006964e+01, 4.102934e+01, 4.203728e+01, 4.203728e+01, 1.400674e+01, 1.501468e+01, 1.602262e+01, 1.703056e+01, 2.902142e+01, 3.000614e+01, 4.600554e+01, 4.401288e+01, 3.101408e+01, 2.601774e+01, 2.702568e+01, 2.803362e+01, 4.103242e+01, 4.302508e+01, 4.302508e+01, 4.302508e+01, 4.201714e+01, 2.801348e+01, 3.994800e+01, 4.308858e+01, 4.409652e+01, 4.304522e+01, 4.405316e+01 };

  void getSpecificHeats_R(double& T, std::vector<double>& cp0_R) {

    double tt0 = T;
    double tt1 = T * tt0;
    double tt2 = T * tt1;
    double tt3 = T * tt2;
    double tt4 = 1.0 / T;
    double tt5 = tt4 / T;

    if(tt0 > 1.000000e+03) {
      cp0_R[0] = 3.337279e+00 - 4.940247e-05 * tt0 + 4.994568e-07 * tt1 - 1.795664e-10 * tt2 + 2.002554e-14 * tt3;
    } else {
      cp0_R[0] = 2.344331e+00 + 7.980521e-03 * tt0 - 1.947815e-05 * tt1 + 2.015721e-08 * tt2 - 7.376118e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[1] = 2.500000e+00 - 2.308430e-11 * tt0 + 1.615619e-14 * tt1 - 4.735152e-18 * tt2 + 4.981974e-22 * tt3;
    } else {
      cp0_R[1] = 2.500000e+00 + 7.053328e-13 * tt0 - 1.995920e-15 * tt1 + 2.300816e-18 * tt2 - 9.277323e-22 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[2] = 2.569421e+00 - 8.597411e-05 * tt0 + 4.194846e-08 * tt1 - 1.001778e-11 * tt2 + 1.228337e-15 * tt3;
    } else {
      cp0_R[2] = 3.168267e+00 - 3.279319e-03 * tt0 + 6.643064e-06 * tt1 - 6.128066e-09 * tt2 + 2.112660e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[3] = 3.282538e+00 + 1.483088e-03 * tt0 - 7.579667e-07 * tt1 + 2.094706e-10 * tt2 - 2.167178e-14 * tt3;
    } else {
      cp0_R[3] = 3.782456e+00 - 2.996734e-03 * tt0 + 9.847302e-06 * tt1 - 9.681295e-09 * tt2 + 3.243728e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[4] = 3.092888e+00 + 5.484297e-04 * tt0 + 1.265052e-07 * tt1 - 8.794616e-11 * tt2 + 1.174124e-14 * tt3;
    } else {
      cp0_R[4] = 3.992015e+00 - 2.401318e-03 * tt0 + 4.617938e-06 * tt1 - 3.881133e-09 * tt2 + 1.364115e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[5] = 3.033992e+00 + 2.176918e-03 * tt0 - 1.640725e-07 * tt1 - 9.704199e-11 * tt2 + 1.682010e-14 * tt3;
    } else {
      cp0_R[5] = 4.198641e+00 - 2.036434e-03 * tt0 + 6.520402e-06 * tt1 - 5.487971e-09 * tt2 + 1.771978e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[6] = 4.017211e+00 + 2.239820e-03 * tt0 - 6.336581e-07 * tt1 + 1.142464e-10 * tt2 - 1.079085e-14 * tt3;
    } else {
      cp0_R[6] = 4.301798e+00 - 4.749121e-03 * tt0 + 2.115829e-05 * tt1 - 2.427639e-08 * tt2 + 9.292251e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[7] = 4.165003e+00 + 4.908317e-03 * tt0 - 1.901392e-06 * tt1 + 3.711860e-10 * tt2 - 2.879083e-14 * tt3;
    } else {
      cp0_R[7] = 4.276113e+00 - 5.428224e-04 * tt0 + 1.673357e-05 * tt1 - 2.157708e-08 * tt2 + 8.624544e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[8] = 2.492669e+00 + 4.798893e-05 * tt0 - 7.243350e-08 * tt1 + 3.742910e-11 * tt2 - 4.872779e-15 * tt3;
    } else {
      cp0_R[8] = 2.554240e+00 - 3.215377e-04 * tt0 + 7.337922e-07 * tt1 - 7.322349e-10 * tt2 + 2.665214e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[9] = 2.878465e+00 + 9.709137e-04 * tt0 + 1.444457e-07 * tt1 - 1.306878e-10 * tt2 + 1.760794e-14 * tt3;
    } else {
      cp0_R[9] = 3.489817e+00 + 3.238355e-04 * tt0 - 1.688991e-06 * tt1 + 3.162173e-09 * tt2 - 1.406091e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[10] = 2.874101e+00 + 3.656393e-03 * tt0 - 1.408946e-06 * tt1 + 2.601795e-10 * tt2 - 1.877276e-14 * tt3;
    } else {
      cp0_R[10] = 3.762679e+00 + 9.688721e-04 * tt0 + 2.794898e-06 * tt1 - 3.850912e-09 * tt2 + 1.687417e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[11] = 2.292038e+00 + 4.655886e-03 * tt0 - 2.011919e-06 * tt1 + 4.179060e-10 * tt2 - 3.397164e-14 * tt3;
    } else {
      cp0_R[11] = 4.198604e+00 - 2.366614e-03 * tt0 + 8.232962e-06 * tt1 - 6.688160e-09 * tt2 + 1.943147e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[12] = 2.285718e+00 + 7.239900e-03 * tt0 - 2.987143e-06 * tt1 + 5.956846e-10 * tt2 - 4.671544e-14 * tt3;
    } else {
      cp0_R[12] = 3.673590e+00 + 2.010952e-03 * tt0 + 5.730219e-06 * tt1 - 6.871174e-09 * tt2 + 2.543857e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[13] = 7.485150e-02 + 1.339095e-02 * tt0 - 5.732858e-06 * tt1 + 1.222925e-09 * tt2 - 1.018152e-13 * tt3;
    } else {
      cp0_R[13] = 5.149876e+00 - 1.367098e-02 * tt0 + 4.918006e-05 * tt1 - 4.847430e-08 * tt2 + 1.666940e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[14] = 2.715186e+00 + 2.062527e-03 * tt0 - 9.988258e-07 * tt1 + 2.300530e-10 * tt2 - 2.036477e-14 * tt3;
    } else {
      cp0_R[14] = 3.579533e+00 - 6.103537e-04 * tt0 + 1.016814e-06 * tt1 + 9.070059e-10 * tt2 - 9.044245e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[15] = 3.857460e+00 + 4.414370e-03 * tt0 - 2.214814e-06 * tt1 + 5.234902e-10 * tt2 - 4.720842e-14 * tt3;
    } else {
      cp0_R[15] = 2.356774e+00 + 8.984597e-03 * tt0 - 7.123563e-06 * tt1 + 2.459190e-09 * tt2 - 1.436995e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[16] = 2.772174e+00 + 4.956955e-03 * tt0 - 2.484456e-06 * tt1 + 5.891618e-10 * tt2 - 5.335087e-14 * tt3;
    } else {
      cp0_R[16] = 4.221186e+00 - 3.243925e-03 * tt0 + 1.377994e-05 * tt1 - 1.331441e-08 * tt2 + 4.337689e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[17] = 1.760690e+00 + 9.200001e-03 * tt0 - 4.422588e-06 * tt1 + 1.006412e-09 * tt2 - 8.838556e-14 * tt3;
    } else {
      cp0_R[17] = 4.793723e+00 - 9.908334e-03 * tt0 + 3.732200e-05 * tt1 - 3.792853e-08 * tt2 + 1.317727e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[18] = 3.692666e+00 + 8.645768e-03 * tt0 - 3.751011e-06 * tt1 + 7.872346e-10 * tt2 - 6.485542e-14 * tt3;
    } else {
      cp0_R[18] = 3.863889e+00 + 5.596723e-03 * tt0 + 5.932718e-06 * tt1 - 1.045320e-08 * tt2 + 4.369673e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[19] = 3.770799e+00 + 7.871497e-03 * tt0 - 2.656384e-06 * tt1 + 3.944431e-10 * tt2 - 2.112616e-14 * tt3;
    } else {
      cp0_R[19] = 2.106204e+00 + 7.216595e-03 * tt0 + 5.338472e-06 * tt1 - 7.377636e-09 * tt2 + 2.075610e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[20] = 1.789708e+00 + 1.409383e-02 * tt0 - 6.365008e-06 * tt1 + 1.381711e-09 * tt2 - 1.170602e-13 * tt3;
    } else {
      cp0_R[20] = 5.715396e+00 - 1.523091e-02 * tt0 + 6.524412e-05 * tt1 - 7.108069e-08 * tt2 + 2.613527e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[21] = 3.167807e+00 + 4.752219e-03 * tt0 - 1.837871e-06 * tt1 + 3.041903e-10 * tt2 - 1.772328e-14 * tt3;
    } else {
      cp0_R[21] = 2.889657e+00 + 1.340996e-02 * tt0 - 2.847695e-05 * tt1 + 2.947910e-08 * tt2 - 1.093315e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[22] = 4.147570e+00 + 5.961667e-03 * tt0 - 2.372949e-06 * tt1 + 4.674122e-10 * tt2 - 3.612352e-14 * tt3;
    } else {
      cp0_R[22] = 8.086811e-01 + 2.336156e-02 * tt0 - 3.551718e-05 * tt1 + 2.801524e-08 * tt2 - 8.500730e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[23] = 3.016724e+00 + 1.033023e-02 * tt0 - 4.680823e-06 * tt1 + 1.017633e-09 * tt2 - 8.626070e-14 * tt3;
    } else {
      cp0_R[23] = 3.212466e+00 + 1.514792e-03 * tt0 + 2.592094e-05 * tt1 - 3.576578e-08 * tt2 + 1.471509e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[24] = 2.036111e+00 + 1.464542e-02 * tt0 - 6.710779e-06 * tt1 + 1.472229e-09 * tt2 - 1.257061e-13 * tt3;
    } else {
      cp0_R[24] = 3.959201e+00 - 7.570522e-03 * tt0 + 5.709903e-05 * tt1 - 6.915888e-08 * tt2 + 2.698844e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[25] = 1.954656e+00 + 1.739727e-02 * tt0 - 7.982067e-06 * tt1 + 1.752177e-09 * tt2 - 1.496416e-13 * tt3;
    } else {
      cp0_R[25] = 4.306466e+00 - 4.186589e-03 * tt0 + 4.971428e-05 * tt1 - 5.991266e-08 * tt2 + 2.305090e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[26] = 1.071881e+00 + 2.168527e-02 * tt0 - 1.002561e-05 * tt1 + 2.214120e-09 * tt2 - 1.900029e-13 * tt3;
    } else {
      cp0_R[26] = 4.291425e+00 - 5.501543e-03 * tt0 + 5.994383e-05 * tt1 - 7.084663e-08 * tt2 + 2.686858e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[27] = 5.628206e+00 + 4.085340e-03 * tt0 - 1.593455e-06 * tt1 + 2.862605e-10 * tt2 - 1.940783e-14 * tt3;
    } else {
      cp0_R[27] = 2.251721e+00 + 1.765502e-02 * tt0 - 2.372910e-05 * tt1 + 1.727576e-08 * tt2 - 5.066481e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[28] = 4.511297e+00 + 9.003597e-03 * tt0 - 4.169396e-06 * tt1 + 9.233459e-10 * tt2 - 7.948382e-14 * tt3;
    } else {
      cp0_R[28] = 2.135836e+00 + 1.811887e-02 * tt0 - 1.739475e-05 * tt1 + 9.343976e-09 * tt2 - 2.014576e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[29] = 5.923829e+00 + 6.792360e-03 * tt0 - 2.565856e-06 * tt1 + 4.498784e-10 * tt2 - 2.994010e-14 * tt3;
    } else {
      cp0_R[29] = 1.242373e+00 + 3.107220e-02 * tt0 - 5.086686e-05 * tt1 + 4.313713e-08 * tt2 - 1.401459e-11 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[30] = 2.415943e+00 + 1.748907e-04 * tt0 - 1.190237e-07 * tt1 + 3.022624e-11 * tt2 - 2.036098e-15 * tt3;
    } else {
      cp0_R[30] = 2.500000e+00 - 0.000000e+00 * tt0 - 0.000000e+00 * tt1 - 0.000000e+00 * tt2 - 0.000000e+00 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[31] = 2.783693e+00 + 1.329843e-03 * tt0 - 4.247805e-07 * tt1 + 7.834850e-11 * tt2 - 5.504447e-15 * tt3;
    } else {
      cp0_R[31] = 3.492908e+00 + 3.117920e-04 * tt0 - 1.489048e-06 * tt1 + 2.481644e-09 * tt2 - 1.035697e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[32] = 2.834742e+00 + 3.207308e-03 * tt0 - 9.339080e-07 * tt1 + 1.370295e-10 * tt2 - 7.920614e-15 * tt3;
    } else {
      cp0_R[32] = 4.204003e+00 - 2.106139e-03 * tt0 + 7.106835e-06 * tt1 - 5.611520e-09 * tt2 + 1.644072e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[33] = 2.634452e+00 + 5.666256e-03 * tt0 - 1.727868e-06 * tt1 + 2.386716e-10 * tt2 - 1.257879e-14 * tt3;
    } else {
      cp0_R[33] = 4.286027e+00 - 4.660523e-03 * tt0 + 2.171851e-05 * tt1 - 2.280889e-08 * tt2 + 8.263805e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[34] = 3.766754e+00 + 2.891508e-03 * tt0 - 1.041662e-06 * tt1 + 1.684259e-10 * tt2 - 1.009190e-14 * tt3;
    } else {
      cp0_R[34] = 4.344693e+00 - 4.849707e-03 * tt0 + 2.005946e-05 * tt1 - 2.172646e-08 * tt2 + 7.946954e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[35] = 3.260606e+00 + 1.191104e-03 * tt0 - 4.291705e-07 * tt1 + 6.945767e-11 * tt2 - 4.033610e-15 * tt3;
    } else {
      cp0_R[35] = 4.218476e+00 - 4.638976e-03 * tt0 + 1.104102e-05 * tt1 - 9.336135e-09 * tt2 + 2.803577e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[36] = 4.884754e+00 + 2.172396e-03 * tt0 - 8.280691e-07 * tt1 + 1.574751e-10 * tt2 - 1.051090e-14 * tt3;
    } else {
      cp0_R[36] = 3.944031e+00 - 1.585429e-03 * tt0 + 1.665781e-05 * tt1 - 2.047543e-08 * tt2 + 7.835056e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[37] = 4.823073e+00 + 2.627025e-03 * tt0 - 9.585087e-07 * tt1 + 1.600071e-10 * tt2 - 9.775230e-15 * tt3;
    } else {
      cp0_R[37] = 2.257150e+00 + 1.130473e-02 * tt0 - 1.367132e-05 * tt1 + 9.681981e-09 * tt2 - 2.930718e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[38] = 2.979251e+00 + 3.494406e-03 * tt0 - 7.854978e-07 * tt1 + 5.747959e-11 * tt2 - 1.933592e-16 * tt3;
    } else {
      cp0_R[38] = 4.533492e+00 - 5.669617e-03 * tt0 + 1.847321e-05 * tt1 - 1.713709e-08 * tt2 + 5.545457e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[39] = 3.745980e+00 + 4.345077e-05 * tt0 + 2.970598e-07 * tt1 - 6.865181e-11 * tt2 + 4.413417e-15 * tt3;
    } else {
      cp0_R[39] = 3.612935e+00 - 9.555133e-04 * tt0 + 2.144298e-06 * tt1 - 3.151632e-10 * tt2 - 4.643036e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[40] = 3.802239e+00 + 3.146423e-03 * tt0 - 1.063219e-06 * tt1 + 1.661976e-10 * tt2 - 9.799757e-15 * tt3;
    } else {
      cp0_R[40] = 2.258989e+00 + 1.005117e-02 * tt0 - 1.335176e-05 * tt1 + 1.009235e-08 * tt2 - 3.008903e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[41] = 5.209703e+00 + 2.969291e-03 * tt0 - 2.855589e-07 * tt1 - 1.635550e-10 * tt2 + 3.043259e-14 * tt3;
    } else {
      cp0_R[41] = 2.851661e+00 + 5.695233e-03 * tt0 + 1.071140e-06 * tt1 - 1.622612e-09 * tt2 - 2.351108e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[42] = 5.894636e+00 + 3.989596e-03 * tt0 - 1.598238e-06 * tt1 + 2.924940e-10 * tt2 - 2.009469e-14 * tt3;
    } else {
      cp0_R[42] = 2.524319e+00 + 1.596062e-02 * tt0 - 1.881635e-05 * tt1 + 1.212554e-08 * tt2 - 3.235738e-12 * tt3;
    };

    if(tt0 > 1.382000e+03) {
      cp0_R[43] = 6.598605e+00 + 3.027786e-03 * tt0 - 1.077043e-06 * tt1 + 1.716665e-10 * tt2 - 1.014394e-14 * tt3;
    } else {
      cp0_R[43] = 2.647280e+00 + 1.275053e-02 * tt0 - 1.047942e-05 * tt1 + 4.414328e-09 * tt2 - 7.575215e-13 * tt3;
    };

    if(tt0 > 1.368000e+03) {
      cp0_R[44] = 5.897849e+00 + 3.167894e-03 * tt0 - 1.118011e-06 * tt1 + 1.772431e-10 * tt2 - 1.043392e-14 * tt3;
    } else {
      cp0_R[44] = 3.786050e+00 + 6.886679e-03 * tt0 - 3.214879e-06 * tt1 + 5.171958e-10 * tt2 + 1.193608e-14 * tt3;
    };

    if(tt0 > 1.478000e+03) {
      cp0_R[45] = 6.223951e+00 + 3.178640e-03 * tt0 - 1.093788e-06 * tt1 + 1.707352e-10 * tt2 - 9.950220e-15 * tt3;
    } else {
      cp0_R[45] = 3.630963e+00 + 7.302824e-03 * tt0 - 2.280500e-06 * tt1 - 6.612713e-10 * tt2 + 3.622358e-13 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[46] = 5.152184e+00 + 2.305176e-03 * tt0 - 8.803315e-07 * tt1 + 1.478910e-10 * tt2 - 9.097800e-15 * tt3;
    } else {
      cp0_R[46] = 2.826931e+00 + 8.805169e-03 * tt0 - 8.386613e-06 * tt1 + 4.801696e-09 * tt2 - 1.331360e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[47] = 2.926640e+00 + 1.487977e-03 * tt0 - 5.684760e-07 * tt1 + 1.009704e-10 * tt2 - 6.753351e-15 * tt3;
    } else {
      cp0_R[47] = 3.298677e+00 + 1.408240e-03 * tt0 - 3.963222e-06 * tt1 + 5.641515e-09 * tt2 - 2.444854e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[48] = 2.500000e+00 - 0.000000e+00 * tt0 - 0.000000e+00 * tt1 - 0.000000e+00 * tt2 - 0.000000e+00 * tt3;
    } else {
      cp0_R[48] = 2.500000e+00 - 0.000000e+00 * tt0 - 0.000000e+00 * tt1 - 0.000000e+00 * tt2 - 0.000000e+00 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[49] = 7.702699e+00 + 1.604420e-02 * tt0 - 5.283322e-06 * tt1 + 7.629859e-10 * tt2 - 3.939228e-14 * tt3;
    } else {
      cp0_R[49] = 1.051552e+00 + 2.599198e-02 * tt0 + 2.380054e-06 * tt1 - 1.960957e-08 * tt2 + 9.373247e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[50] = 7.534137e+00 + 1.887224e-02 * tt0 - 6.271849e-06 * tt1 + 9.147565e-10 * tt2 - 4.783807e-14 * tt3;
    } else {
      cp0_R[50] = 9.335538e-01 + 2.642458e-02 * tt0 + 6.105973e-06 * tt1 - 2.197750e-08 * tt2 + 9.514925e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[51] = 5.975670e+00 + 8.130591e-03 * tt0 - 2.743624e-06 * tt1 + 4.070304e-10 * tt2 - 2.176017e-14 * tt3;
    } else {
      cp0_R[51] = 3.409062e+00 + 1.073857e-02 * tt0 + 1.891492e-06 * tt1 - 7.158583e-09 * tt2 + 2.867385e-12 * tt3;
    };

    if(tt0 > 1.000000e+03) {
      cp0_R[52] = 5.404111e+00 + 1.172306e-02 * tt0 - 4.226314e-06 * tt1 + 6.837245e-10 * tt2 - 4.098486e-14 * tt3;
    } else {
      cp0_R[52] = 4.729459e+00 - 3.193286e-03 * tt0 + 4.753492e-05 * tt1 - 5.745861e-08 * tt2 + 2.193111e-11 * tt3;
    };

  };

  void getEnthalpies_RT(double& T, std::vector<double>& h0_RT) {

    double tt0 = T;
    double tt1 = T * tt0;
    double tt2 = T * tt1;
    double tt3 = T * tt2;
    double tt4 = 1.0 / T;
    double tt5 = tt4 / T;
    double tt6 = std::log(tt0) * tt4;

    if(tt0 > 1.000000e+03) {
      h0_RT[0] = 3.337279e+00 - 4.940247e-05 * 0.50 * tt0 + 4.994568e-07 * OneThird * tt1 - 1.795664e-10 * 0.25 * tt2 + 2.002554e-14 * 0.20 * tt3 - 9.501589e+02 * tt4;
    } else {
      h0_RT[0] = 2.344331e+00 + 7.980521e-03 * 0.50 * tt0 - 1.947815e-05 * OneThird * tt1 + 2.015721e-08 * 0.25 * tt2 - 7.376118e-12 * 0.20 * tt3 - 9.179352e+02 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[1] = 2.500000e+00 - 2.308430e-11 * 0.50 * tt0 + 1.615619e-14 * OneThird * tt1 - 4.735152e-18 * 0.25 * tt2 + 4.981974e-22 * 0.20 * tt3 + 2.547366e+04 * tt4;
    } else {
      h0_RT[1] = 2.500000e+00 + 7.053328e-13 * 0.50 * tt0 - 1.995920e-15 * OneThird * tt1 + 2.300816e-18 * 0.25 * tt2 - 9.277323e-22 * 0.20 * tt3 + 2.547366e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[2] = 2.569421e+00 - 8.597411e-05 * 0.50 * tt0 + 4.194846e-08 * OneThird * tt1 - 1.001778e-11 * 0.25 * tt2 + 1.228337e-15 * 0.20 * tt3 + 2.921758e+04 * tt4;
    } else {
      h0_RT[2] = 3.168267e+00 - 3.279319e-03 * 0.50 * tt0 + 6.643064e-06 * OneThird * tt1 - 6.128066e-09 * 0.25 * tt2 + 2.112660e-12 * 0.20 * tt3 + 2.912226e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[3] = 3.282538e+00 + 1.483088e-03 * 0.50 * tt0 - 7.579667e-07 * OneThird * tt1 + 2.094706e-10 * 0.25 * tt2 - 2.167178e-14 * 0.20 * tt3 - 1.088458e+03 * tt4;
    } else {
      h0_RT[3] = 3.782456e+00 - 2.996734e-03 * 0.50 * tt0 + 9.847302e-06 * OneThird * tt1 - 9.681295e-09 * 0.25 * tt2 + 3.243728e-12 * 0.20 * tt3 - 1.063944e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[4] = 3.092888e+00 + 5.484297e-04 * 0.50 * tt0 + 1.265052e-07 * OneThird * tt1 - 8.794616e-11 * 0.25 * tt2 + 1.174124e-14 * 0.20 * tt3 + 3.858657e+03 * tt4;
    } else {
      h0_RT[4] = 3.992015e+00 - 2.401318e-03 * 0.50 * tt0 + 4.617938e-06 * OneThird * tt1 - 3.881133e-09 * 0.25 * tt2 + 1.364115e-12 * 0.20 * tt3 + 3.615081e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[5] = 3.033992e+00 + 2.176918e-03 * 0.50 * tt0 - 1.640725e-07 * OneThird * tt1 - 9.704199e-11 * 0.25 * tt2 + 1.682010e-14 * 0.20 * tt3 - 3.000430e+04 * tt4;
    } else {
      h0_RT[5] = 4.198641e+00 - 2.036434e-03 * 0.50 * tt0 + 6.520402e-06 * OneThird * tt1 - 5.487971e-09 * 0.25 * tt2 + 1.771978e-12 * 0.20 * tt3 - 3.029373e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[6] = 4.017211e+00 + 2.239820e-03 * 0.50 * tt0 - 6.336581e-07 * OneThird * tt1 + 1.142464e-10 * 0.25 * tt2 - 1.079085e-14 * 0.20 * tt3 + 1.118567e+02 * tt4;
    } else {
      h0_RT[6] = 4.301798e+00 - 4.749121e-03 * 0.50 * tt0 + 2.115829e-05 * OneThird * tt1 - 2.427639e-08 * 0.25 * tt2 + 9.292251e-12 * 0.20 * tt3 + 2.948080e+02 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[7] = 4.165003e+00 + 4.908317e-03 * 0.50 * tt0 - 1.901392e-06 * OneThird * tt1 + 3.711860e-10 * 0.25 * tt2 - 2.879083e-14 * 0.20 * tt3 - 1.786179e+04 * tt4;
    } else {
      h0_RT[7] = 4.276113e+00 - 5.428224e-04 * 0.50 * tt0 + 1.673357e-05 * OneThird * tt1 - 2.157708e-08 * 0.25 * tt2 + 8.624544e-12 * 0.20 * tt3 - 1.770258e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[8] = 2.492669e+00 + 4.798893e-05 * 0.50 * tt0 - 7.243350e-08 * OneThird * tt1 + 3.742910e-11 * 0.25 * tt2 - 4.872779e-15 * 0.20 * tt3 + 8.545130e+04 * tt4;
    } else {
      h0_RT[8] = 2.554240e+00 - 3.215377e-04 * 0.50 * tt0 + 7.337922e-07 * OneThird * tt1 - 7.322349e-10 * 0.25 * tt2 + 2.665214e-13 * 0.20 * tt3 + 8.544388e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[9] = 2.878465e+00 + 9.709137e-04 * 0.50 * tt0 + 1.444457e-07 * OneThird * tt1 - 1.306878e-10 * 0.25 * tt2 + 1.760794e-14 * 0.20 * tt3 + 7.101244e+04 * tt4;
    } else {
      h0_RT[9] = 3.489817e+00 + 3.238355e-04 * 0.50 * tt0 - 1.688991e-06 * OneThird * tt1 + 3.162173e-09 * 0.25 * tt2 - 1.406091e-12 * 0.20 * tt3 + 7.079729e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[10] = 2.874101e+00 + 3.656393e-03 * 0.50 * tt0 - 1.408946e-06 * OneThird * tt1 + 2.601795e-10 * 0.25 * tt2 - 1.877276e-14 * 0.20 * tt3 + 4.626360e+04 * tt4;
    } else {
      h0_RT[10] = 3.762679e+00 + 9.688721e-04 * 0.50 * tt0 + 2.794898e-06 * OneThird * tt1 - 3.850912e-09 * 0.25 * tt2 + 1.687417e-12 * 0.20 * tt3 + 4.600404e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[11] = 2.292038e+00 + 4.655886e-03 * 0.50 * tt0 - 2.011919e-06 * OneThird * tt1 + 4.179060e-10 * 0.25 * tt2 - 3.397164e-14 * 0.20 * tt3 + 5.092600e+04 * tt4;
    } else {
      h0_RT[11] = 4.198604e+00 - 2.366614e-03 * 0.50 * tt0 + 8.232962e-06 * OneThird * tt1 - 6.688160e-09 * 0.25 * tt2 + 1.943147e-12 * 0.20 * tt3 + 5.049682e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[12] = 2.285718e+00 + 7.239900e-03 * 0.50 * tt0 - 2.987143e-06 * OneThird * tt1 + 5.956846e-10 * 0.25 * tt2 - 4.671544e-14 * 0.20 * tt3 + 1.677558e+04 * tt4;
    } else {
      h0_RT[12] = 3.673590e+00 + 2.010952e-03 * 0.50 * tt0 + 5.730219e-06 * OneThird * tt1 - 6.871174e-09 * 0.25 * tt2 + 2.543857e-12 * 0.20 * tt3 + 1.644500e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[13] = 7.485150e-02 + 1.339095e-02 * 0.50 * tt0 - 5.732858e-06 * OneThird * tt1 + 1.222925e-09 * 0.25 * tt2 - 1.018152e-13 * 0.20 * tt3 - 9.468345e+03 * tt4;
    } else {
      h0_RT[13] = 5.149876e+00 - 1.367098e-02 * 0.50 * tt0 + 4.918006e-05 * OneThird * tt1 - 4.847430e-08 * 0.25 * tt2 + 1.666940e-11 * 0.20 * tt3 - 1.024665e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[14] = 2.715186e+00 + 2.062527e-03 * 0.50 * tt0 - 9.988258e-07 * OneThird * tt1 + 2.300530e-10 * 0.25 * tt2 - 2.036477e-14 * 0.20 * tt3 - 1.415187e+04 * tt4;
    } else {
      h0_RT[14] = 3.579533e+00 - 6.103537e-04 * 0.50 * tt0 + 1.016814e-06 * OneThird * tt1 + 9.070059e-10 * 0.25 * tt2 - 9.044245e-13 * 0.20 * tt3 - 1.434409e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[15] = 3.857460e+00 + 4.414370e-03 * 0.50 * tt0 - 2.214814e-06 * OneThird * tt1 + 5.234902e-10 * 0.25 * tt2 - 4.720842e-14 * 0.20 * tt3 - 4.875917e+04 * tt4;
    } else {
      h0_RT[15] = 2.356774e+00 + 8.984597e-03 * 0.50 * tt0 - 7.123563e-06 * OneThird * tt1 + 2.459190e-09 * 0.25 * tt2 - 1.436995e-13 * 0.20 * tt3 - 4.837197e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[16] = 2.772174e+00 + 4.956955e-03 * 0.50 * tt0 - 2.484456e-06 * OneThird * tt1 + 5.891618e-10 * 0.25 * tt2 - 5.335087e-14 * 0.20 * tt3 + 4.011918e+03 * tt4;
    } else {
      h0_RT[16] = 4.221186e+00 - 3.243925e-03 * 0.50 * tt0 + 1.377994e-05 * OneThird * tt1 - 1.331441e-08 * 0.25 * tt2 + 4.337689e-12 * 0.20 * tt3 + 3.839565e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[17] = 1.760690e+00 + 9.200001e-03 * 0.50 * tt0 - 4.422588e-06 * OneThird * tt1 + 1.006412e-09 * 0.25 * tt2 - 8.838556e-14 * 0.20 * tt3 - 1.399583e+04 * tt4;
    } else {
      h0_RT[17] = 4.793723e+00 - 9.908334e-03 * 0.50 * tt0 + 3.732200e-05 * OneThird * tt1 - 3.792853e-08 * 0.25 * tt2 + 1.317727e-11 * 0.20 * tt3 - 1.430896e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[18] = 3.692666e+00 + 8.645768e-03 * 0.50 * tt0 - 3.751011e-06 * OneThird * tt1 + 7.872346e-10 * 0.25 * tt2 - 6.485542e-14 * 0.20 * tt3 - 3.242506e+03 * tt4;
    } else {
      h0_RT[18] = 3.863889e+00 + 5.596723e-03 * 0.50 * tt0 + 5.932718e-06 * OneThird * tt1 - 1.045320e-08 * 0.25 * tt2 + 4.369673e-12 * 0.20 * tt3 - 3.193914e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[19] = 3.770799e+00 + 7.871497e-03 * 0.50 * tt0 - 2.656384e-06 * OneThird * tt1 + 3.944431e-10 * 0.25 * tt2 - 2.112616e-14 * 0.20 * tt3 + 1.278325e+02 * tt4;
    } else {
      h0_RT[19] = 2.106204e+00 + 7.216595e-03 * 0.50 * tt0 + 5.338472e-06 * OneThird * tt1 - 7.377636e-09 * 0.25 * tt2 + 2.075610e-12 * 0.20 * tt3 + 9.786011e+02 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[20] = 1.789708e+00 + 1.409383e-02 * 0.50 * tt0 - 6.365008e-06 * OneThird * tt1 + 1.381711e-09 * 0.25 * tt2 - 1.170602e-13 * 0.20 * tt3 - 2.537487e+04 * tt4;
    } else {
      h0_RT[20] = 5.715396e+00 - 1.523091e-02 * 0.50 * tt0 + 6.524412e-05 * OneThird * tt1 - 7.108069e-08 * 0.25 * tt2 + 2.613527e-11 * 0.20 * tt3 - 2.564277e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[21] = 3.167807e+00 + 4.752219e-03 * 0.50 * tt0 - 1.837871e-06 * OneThird * tt1 + 3.041903e-10 * 0.25 * tt2 - 1.772328e-14 * 0.20 * tt3 + 6.712107e+04 * tt4;
    } else {
      h0_RT[21] = 2.889657e+00 + 1.340996e-02 * 0.50 * tt0 - 2.847695e-05 * OneThird * tt1 + 2.947910e-08 * 0.25 * tt2 - 1.093315e-11 * 0.20 * tt3 + 6.683939e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[22] = 4.147570e+00 + 5.961667e-03 * 0.50 * tt0 - 2.372949e-06 * OneThird * tt1 + 4.674122e-10 * 0.25 * tt2 - 3.612352e-14 * 0.20 * tt3 + 2.593600e+04 * tt4;
    } else {
      h0_RT[22] = 8.086811e-01 + 2.336156e-02 * 0.50 * tt0 - 3.551718e-05 * OneThird * tt1 + 2.801524e-08 * 0.25 * tt2 - 8.500730e-12 * 0.20 * tt3 + 2.642898e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[23] = 3.016724e+00 + 1.033023e-02 * 0.50 * tt0 - 4.680823e-06 * OneThird * tt1 + 1.017633e-09 * 0.25 * tt2 - 8.626070e-14 * 0.20 * tt3 + 3.461287e+04 * tt4;
    } else {
      h0_RT[23] = 3.212466e+00 + 1.514792e-03 * 0.50 * tt0 + 2.592094e-05 * OneThird * tt1 - 3.576578e-08 * 0.25 * tt2 + 1.471509e-11 * 0.20 * tt3 + 3.485985e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[24] = 2.036111e+00 + 1.464542e-02 * 0.50 * tt0 - 6.710779e-06 * OneThird * tt1 + 1.472229e-09 * 0.25 * tt2 - 1.257061e-13 * 0.20 * tt3 + 4.939886e+03 * tt4;
    } else {
      h0_RT[24] = 3.959201e+00 - 7.570522e-03 * 0.50 * tt0 + 5.709903e-05 * OneThird * tt1 - 6.915888e-08 * 0.25 * tt2 + 2.698844e-11 * 0.20 * tt3 + 5.089776e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[25] = 1.954656e+00 + 1.739727e-02 * 0.50 * tt0 - 7.982067e-06 * OneThird * tt1 + 1.752177e-09 * 0.25 * tt2 - 1.496416e-13 * 0.20 * tt3 + 1.285752e+04 * tt4;
    } else {
      h0_RT[25] = 4.306466e+00 - 4.186589e-03 * 0.50 * tt0 + 4.971428e-05 * OneThird * tt1 - 5.991266e-08 * 0.25 * tt2 + 2.305090e-11 * 0.20 * tt3 + 1.284163e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[26] = 1.071881e+00 + 2.168527e-02 * 0.50 * tt0 - 1.002561e-05 * OneThird * tt1 + 2.214120e-09 * 0.25 * tt2 - 1.900029e-13 * 0.20 * tt3 - 1.142639e+04 * tt4;
    } else {
      h0_RT[26] = 4.291425e+00 - 5.501543e-03 * 0.50 * tt0 + 5.994383e-05 * OneThird * tt1 - 7.084663e-08 * 0.25 * tt2 + 2.686858e-11 * 0.20 * tt3 - 1.152221e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[27] = 5.628206e+00 + 4.085340e-03 * 0.50 * tt0 - 1.593455e-06 * OneThird * tt1 + 2.862605e-10 * 0.25 * tt2 - 1.940783e-14 * 0.20 * tt3 + 1.932722e+04 * tt4;
    } else {
      h0_RT[27] = 2.251721e+00 + 1.765502e-02 * 0.50 * tt0 - 2.372910e-05 * OneThird * tt1 + 1.727576e-08 * 0.25 * tt2 - 5.066481e-12 * 0.20 * tt3 + 2.005945e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[28] = 4.511297e+00 + 9.003597e-03 * 0.50 * tt0 - 4.169396e-06 * OneThird * tt1 + 9.233459e-10 * 0.25 * tt2 - 7.948382e-14 * 0.20 * tt3 - 7.551053e+03 * tt4;
    } else {
      h0_RT[28] = 2.135836e+00 + 1.811887e-02 * 0.50 * tt0 - 1.739475e-05 * OneThird * tt1 + 9.343976e-09 * 0.25 * tt2 - 2.014576e-12 * 0.20 * tt3 - 7.042918e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[29] = 5.923829e+00 + 6.792360e-03 * 0.50 * tt0 - 2.565856e-06 * OneThird * tt1 + 4.498784e-10 * 0.25 * tt2 - 2.994010e-14 * 0.20 * tt3 + 7.264626e+03 * tt4;
    } else {
      h0_RT[29] = 1.242373e+00 + 3.107220e-02 * 0.50 * tt0 - 5.086686e-05 * OneThird * tt1 + 4.313713e-08 * 0.25 * tt2 - 1.401459e-11 * 0.20 * tt3 + 8.031614e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[30] = 2.415943e+00 + 1.748907e-04 * 0.50 * tt0 - 1.190237e-07 * OneThird * tt1 + 3.022624e-11 * 0.25 * tt2 - 2.036098e-15 * 0.20 * tt3 + 5.613377e+04 * tt4;
    } else {
      h0_RT[30] = 2.500000e+00 - 0.000000e+00 * 0.50 * tt0 - 0.000000e+00 * OneThird * tt1 - 0.000000e+00 * 0.25 * tt2 - 0.000000e+00 * 0.20 * tt3 + 5.610464e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[31] = 2.783693e+00 + 1.329843e-03 * 0.50 * tt0 - 4.247805e-07 * OneThird * tt1 + 7.834850e-11 * 0.25 * tt2 - 5.504447e-15 * 0.20 * tt3 + 4.212085e+04 * tt4;
    } else {
      h0_RT[31] = 3.492908e+00 + 3.117920e-04 * 0.50 * tt0 - 1.489048e-06 * OneThird * tt1 + 2.481644e-09 * 0.25 * tt2 - 1.035697e-12 * 0.20 * tt3 + 4.188063e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[32] = 2.834742e+00 + 3.207308e-03 * 0.50 * tt0 - 9.339080e-07 * OneThird * tt1 + 1.370295e-10 * 0.25 * tt2 - 7.920614e-15 * 0.20 * tt3 + 2.217196e+04 * tt4;
    } else {
      h0_RT[32] = 4.204003e+00 - 2.106139e-03 * 0.50 * tt0 + 7.106835e-06 * OneThird * tt1 - 5.611520e-09 * 0.25 * tt2 + 1.644072e-12 * 0.20 * tt3 + 2.188591e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[33] = 2.634452e+00 + 5.666256e-03 * 0.50 * tt0 - 1.727868e-06 * OneThird * tt1 + 2.386716e-10 * 0.25 * tt2 - 1.257879e-14 * 0.20 * tt3 - 6.544696e+03 * tt4;
    } else {
      h0_RT[33] = 4.286027e+00 - 4.660523e-03 * 0.50 * tt0 + 2.171851e-05 * OneThird * tt1 - 2.280889e-08 * 0.25 * tt2 + 8.263805e-12 * 0.20 * tt3 - 6.741729e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[34] = 3.766754e+00 + 2.891508e-03 * 0.50 * tt0 - 1.041662e-06 * OneThird * tt1 + 1.684259e-10 * 0.25 * tt2 - 1.009190e-14 * 0.20 * tt3 + 2.865070e+04 * tt4;
    } else {
      h0_RT[34] = 4.344693e+00 - 4.849707e-03 * 0.50 * tt0 + 2.005946e-05 * OneThird * tt1 - 2.172646e-08 * 0.25 * tt2 + 7.946954e-12 * 0.20 * tt3 + 2.879197e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[35] = 3.260606e+00 + 1.191104e-03 * 0.50 * tt0 - 4.291705e-07 * OneThird * tt1 + 6.945767e-11 * 0.25 * tt2 - 4.033610e-15 * 0.20 * tt3 + 9.920975e+03 * tt4;
    } else {
      h0_RT[35] = 4.218476e+00 - 4.638976e-03 * 0.50 * tt0 + 1.104102e-05 * OneThird * tt1 - 9.336135e-09 * 0.25 * tt2 + 2.803577e-12 * 0.20 * tt3 + 9.844623e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[36] = 4.884754e+00 + 2.172396e-03 * 0.50 * tt0 - 8.280691e-07 * OneThird * tt1 + 1.574751e-10 * 0.25 * tt2 - 1.051090e-14 * 0.20 * tt3 + 2.316498e+03 * tt4;
    } else {
      h0_RT[36] = 3.944031e+00 - 1.585429e-03 * 0.50 * tt0 + 1.665781e-05 * OneThird * tt1 - 2.047543e-08 * 0.25 * tt2 + 7.835056e-12 * 0.20 * tt3 + 2.896618e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[37] = 4.823073e+00 + 2.627025e-03 * 0.50 * tt0 - 9.585087e-07 * OneThird * tt1 + 1.600071e-10 * 0.25 * tt2 - 9.775230e-15 * 0.20 * tt3 + 8.073405e+03 * tt4;
    } else {
      h0_RT[37] = 2.257150e+00 + 1.130473e-02 * 0.50 * tt0 - 1.367132e-05 * OneThird * tt1 + 9.681981e-09 * 0.25 * tt2 - 2.930718e-12 * 0.20 * tt3 + 8.741774e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[38] = 2.979251e+00 + 3.494406e-03 * 0.50 * tt0 - 7.854978e-07 * OneThird * tt1 + 5.747959e-11 * 0.25 * tt2 - 1.933592e-16 * 0.20 * tt3 + 1.175058e+04 * tt4;
    } else {
      h0_RT[38] = 4.533492e+00 - 5.669617e-03 * 0.50 * tt0 + 1.847321e-05 * OneThird * tt1 - 1.713709e-08 * 0.25 * tt2 + 5.545457e-12 * 0.20 * tt3 + 1.154830e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[39] = 3.745980e+00 + 4.345077e-05 * 0.50 * tt0 + 2.970598e-07 * OneThird * tt1 - 6.865181e-11 * 0.25 * tt2 + 4.413417e-15 * 0.20 * tt3 + 5.153619e+04 * tt4;
    } else {
      h0_RT[39] = 3.612935e+00 - 9.555133e-04 * 0.50 * tt0 + 2.144298e-06 * OneThird * tt1 - 3.151632e-10 * 0.25 * tt2 - 4.643036e-13 * 0.20 * tt3 + 5.170834e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[40] = 3.802239e+00 + 3.146423e-03 * 0.50 * tt0 - 1.063219e-06 * OneThird * tt1 + 1.661976e-10 * 0.25 * tt2 - 9.799757e-15 * 0.20 * tt3 + 1.440729e+04 * tt4;
    } else {
      h0_RT[40] = 2.258989e+00 + 1.005117e-02 * 0.50 * tt0 - 1.335176e-05 * OneThird * tt1 + 1.009235e-08 * 0.25 * tt2 - 3.008903e-12 * 0.20 * tt3 + 1.471263e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[41] = 5.209703e+00 + 2.969291e-03 * 0.50 * tt0 - 2.855589e-07 * OneThird * tt1 - 1.635550e-10 * 0.25 * tt2 + 3.043259e-14 * 0.20 * tt3 + 2.767711e+04 * tt4;
    } else {
      h0_RT[41] = 2.851661e+00 + 5.695233e-03 * 0.50 * tt0 + 1.071140e-06 * OneThird * tt1 - 1.622612e-09 * 0.25 * tt2 - 2.351108e-13 * 0.20 * tt3 + 2.863782e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[42] = 5.894636e+00 + 3.989596e-03 * 0.50 * tt0 - 1.598238e-06 * OneThird * tt1 + 2.924940e-10 * 0.25 * tt2 - 2.009469e-14 * 0.20 * tt3 + 5.345294e+04 * tt4;
    } else {
      h0_RT[42] = 2.524319e+00 + 1.596062e-02 * 0.50 * tt0 - 1.881635e-05 * OneThird * tt1 + 1.212554e-08 * 0.25 * tt2 - 3.235738e-12 * 0.20 * tt3 + 5.426198e+04 * tt4;
    };

    if(tt0 > 1.382000e+03) {
      h0_RT[43] = 6.598605e+00 + 3.027786e-03 * 0.50 * tt0 - 1.077043e-06 * OneThird * tt1 + 1.716665e-10 * 0.25 * tt2 - 1.014394e-14 * 0.20 * tt3 + 1.796613e+04 * tt4;
    } else {
      h0_RT[43] = 2.647280e+00 + 1.275053e-02 * 0.50 * tt0 - 1.047942e-05 * OneThird * tt1 + 4.414328e-09 * 0.25 * tt2 - 7.575215e-13 * 0.20 * tt3 + 1.929903e+04 * tt4;
    };

    if(tt0 > 1.368000e+03) {
      h0_RT[44] = 5.897849e+00 + 3.167894e-03 * 0.50 * tt0 - 1.118011e-06 * OneThird * tt1 + 1.772431e-10 * 0.25 * tt2 - 1.043392e-14 * 0.20 * tt3 - 3.706533e+03 * tt4;
    } else {
      h0_RT[44] = 3.786050e+00 + 6.886679e-03 * 0.50 * tt0 - 3.214879e-06 * OneThird * tt1 + 5.171958e-10 * 0.25 * tt2 + 1.193608e-14 * 0.20 * tt3 - 2.826984e+03 * tt4;
    };

    if(tt0 > 1.478000e+03) {
      h0_RT[45] = 6.223951e+00 + 3.178640e-03 * 0.50 * tt0 - 1.093788e-06 * OneThird * tt1 + 1.707352e-10 * 0.25 * tt2 - 9.950220e-15 * 0.20 * tt3 - 1.665993e+04 * tt4;
    } else {
      h0_RT[45] = 3.630963e+00 + 7.302824e-03 * 0.50 * tt0 - 2.280500e-06 * OneThird * tt1 - 6.612713e-10 * 0.25 * tt2 + 3.622358e-13 * 0.20 * tt3 - 1.558736e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[46] = 5.152184e+00 + 2.305176e-03 * 0.50 * tt0 - 8.803315e-07 * OneThird * tt1 + 1.478910e-10 * 0.25 * tt2 - 9.097800e-15 * 0.20 * tt3 + 1.400412e+04 * tt4;
    } else {
      h0_RT[46] = 2.826931e+00 + 8.805169e-03 * 0.50 * tt0 - 8.386613e-06 * OneThird * tt1 + 4.801696e-09 * 0.25 * tt2 - 1.331360e-12 * 0.20 * tt3 + 1.468248e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[47] = 2.926640e+00 + 1.487977e-03 * 0.50 * tt0 - 5.684760e-07 * OneThird * tt1 + 1.009704e-10 * 0.25 * tt2 - 6.753351e-15 * 0.20 * tt3 - 9.227977e+02 * tt4;
    } else {
      h0_RT[47] = 3.298677e+00 + 1.408240e-03 * 0.50 * tt0 - 3.963222e-06 * OneThird * tt1 + 5.641515e-09 * 0.25 * tt2 - 2.444854e-12 * 0.20 * tt3 - 1.020900e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[48] = 2.500000e+00 - 0.000000e+00 * 0.50 * tt0 - 0.000000e+00 * OneThird * tt1 - 0.000000e+00 * 0.25 * tt2 - 0.000000e+00 * 0.20 * tt3 - 7.453750e+02 * tt4;
    } else {
      h0_RT[48] = 2.500000e+00 - 0.000000e+00 * 0.50 * tt0 - 0.000000e+00 * OneThird * tt1 - 0.000000e+00 * 0.25 * tt2 - 0.000000e+00 * 0.20 * tt3 - 7.453750e+02 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[49] = 7.702699e+00 + 1.604420e-02 * 0.50 * tt0 - 5.283322e-06 * OneThird * tt1 + 7.629859e-10 * 0.25 * tt2 - 3.939228e-14 * 0.20 * tt3 + 8.298434e+03 * tt4;
    } else {
      h0_RT[49] = 1.051552e+00 + 2.599198e-02 * 0.50 * tt0 + 2.380054e-06 * OneThird * tt1 - 1.960957e-08 * 0.25 * tt2 + 9.373247e-12 * 0.20 * tt3 + 1.063186e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[50] = 7.534137e+00 + 1.887224e-02 * 0.50 * tt0 - 6.271849e-06 * OneThird * tt1 + 9.147565e-10 * 0.25 * tt2 - 4.783807e-14 * 0.20 * tt3 - 1.646752e+04 * tt4;
    } else {
      h0_RT[50] = 9.335538e-01 + 2.642458e-02 * 0.50 * tt0 + 6.105973e-06 * OneThird * tt1 - 2.197750e-08 * 0.25 * tt2 + 9.514925e-12 * 0.20 * tt3 - 1.395852e+04 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[51] = 5.975670e+00 + 8.130591e-03 * 0.50 * tt0 - 2.743624e-06 * OneThird * tt1 + 4.070304e-10 * 0.25 * tt2 - 2.176017e-14 * 0.20 * tt3 + 4.903218e+02 * tt4;
    } else {
      h0_RT[51] = 3.409062e+00 + 1.073857e-02 * 0.50 * tt0 + 1.891492e-06 * OneThird * tt1 - 7.158583e-09 * 0.25 * tt2 + 2.867385e-12 * 0.20 * tt3 + 1.521477e+03 * tt4;
    };

    if(tt0 > 1.000000e+03) {
      h0_RT[52] = 5.404111e+00 + 1.172306e-02 * 0.50 * tt0 - 4.226314e-06 * OneThird * tt1 + 6.837245e-10 * 0.25 * tt2 - 4.098486e-14 * 0.20 * tt3 - 2.259312e+04 * tt4;
    } else {
      h0_RT[52] = 4.729459e+00 - 3.193286e-03 * 0.50 * tt0 + 4.753492e-05 * OneThird * tt1 - 5.745861e-08 * 0.25 * tt2 + 2.193111e-11 * 0.20 * tt3 - 2.157288e+04 * tt4;
    };

  };

  void getEntropies_R(double& T, std::vector<double>& s0_R) {

    double tt0 = T;
    double tt1 = T * tt0;
    double tt2 = T * tt1;
    double tt3 = T * tt2;
    double tt4 = 1.0 / T;
    double tt5 = tt4 / T;
    double tt6 = std::log(T);

    if(tt0 > 1.000000e+03) {
      s0_R[0] = 3.337279e+00 * tt6 - 4.940247e-05 * tt0 + 4.994568e-07 * 0.50 * tt1 - 1.795664e-10 * OneThird * tt2 + 2.002554e-14 * 0.25 * tt3 - 3.205023e+00;
    } else {
      s0_R[0] = 2.344331e+00 * tt6 + 7.980521e-03 * tt0 - 1.947815e-05 * 0.50 * tt1 + 2.015721e-08 * OneThird * tt2 - 7.376118e-12 * 0.25 * tt3 + 6.830102e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[1] = 2.500000e+00 * tt6 - 2.308430e-11 * tt0 + 1.615619e-14 * 0.50 * tt1 - 4.735152e-18 * OneThird * tt2 + 4.981974e-22 * 0.25 * tt3 - 4.466829e-01;
    } else {
      s0_R[1] = 2.500000e+00 * tt6 + 7.053328e-13 * tt0 - 1.995920e-15 * 0.50 * tt1 + 2.300816e-18 * OneThird * tt2 - 9.277323e-22 * 0.25 * tt3 - 4.466829e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[2] = 2.569421e+00 * tt6 - 8.597411e-05 * tt0 + 4.194846e-08 * 0.50 * tt1 - 1.001778e-11 * OneThird * tt2 + 1.228337e-15 * 0.25 * tt3 + 4.784339e+00;
    } else {
      s0_R[2] = 3.168267e+00 * tt6 - 3.279319e-03 * tt0 + 6.643064e-06 * 0.50 * tt1 - 6.128066e-09 * OneThird * tt2 + 2.112660e-12 * 0.25 * tt3 + 2.051933e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[3] = 3.282538e+00 * tt6 + 1.483088e-03 * tt0 - 7.579667e-07 * 0.50 * tt1 + 2.094706e-10 * OneThird * tt2 - 2.167178e-14 * 0.25 * tt3 + 5.453231e+00;
    } else {
      s0_R[3] = 3.782456e+00 * tt6 - 2.996734e-03 * tt0 + 9.847302e-06 * 0.50 * tt1 - 9.681295e-09 * OneThird * tt2 + 3.243728e-12 * 0.25 * tt3 + 3.657676e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[4] = 3.092888e+00 * tt6 + 5.484297e-04 * tt0 + 1.265052e-07 * 0.50 * tt1 - 8.794616e-11 * OneThird * tt2 + 1.174124e-14 * 0.25 * tt3 + 4.476696e+00;
    } else {
      s0_R[4] = 3.992015e+00 * tt6 - 2.401318e-03 * tt0 + 4.617938e-06 * 0.50 * tt1 - 3.881133e-09 * OneThird * tt2 + 1.364115e-12 * 0.25 * tt3 - 1.039255e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[5] = 3.033992e+00 * tt6 + 2.176918e-03 * tt0 - 1.640725e-07 * 0.50 * tt1 - 9.704199e-11 * OneThird * tt2 + 1.682010e-14 * 0.25 * tt3 + 4.966770e+00;
    } else {
      s0_R[5] = 4.198641e+00 * tt6 - 2.036434e-03 * tt0 + 6.520402e-06 * 0.50 * tt1 - 5.487971e-09 * OneThird * tt2 + 1.771978e-12 * 0.25 * tt3 - 8.490322e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[6] = 4.017211e+00 * tt6 + 2.239820e-03 * tt0 - 6.336581e-07 * 0.50 * tt1 + 1.142464e-10 * OneThird * tt2 - 1.079085e-14 * 0.25 * tt3 + 3.785102e+00;
    } else {
      s0_R[6] = 4.301798e+00 * tt6 - 4.749121e-03 * tt0 + 2.115829e-05 * 0.50 * tt1 - 2.427639e-08 * OneThird * tt2 + 9.292251e-12 * 0.25 * tt3 + 3.716662e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[7] = 4.165003e+00 * tt6 + 4.908317e-03 * tt0 - 1.901392e-06 * 0.50 * tt1 + 3.711860e-10 * OneThird * tt2 - 2.879083e-14 * 0.25 * tt3 + 2.916157e+00;
    } else {
      s0_R[7] = 4.276113e+00 * tt6 - 5.428224e-04 * tt0 + 1.673357e-05 * 0.50 * tt1 - 2.157708e-08 * OneThird * tt2 + 8.624544e-12 * 0.25 * tt3 + 3.435051e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[8] = 2.492669e+00 * tt6 + 4.798893e-05 * tt0 - 7.243350e-08 * 0.50 * tt1 + 3.742910e-11 * OneThird * tt2 - 4.872779e-15 * 0.25 * tt3 + 4.801504e+00;
    } else {
      s0_R[8] = 2.554240e+00 * tt6 - 3.215377e-04 * tt0 + 7.337922e-07 * 0.50 * tt1 - 7.322349e-10 * OneThird * tt2 + 2.665214e-13 * 0.25 * tt3 + 4.531308e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[9] = 2.878465e+00 * tt6 + 9.709137e-04 * tt0 + 1.444457e-07 * 0.50 * tt1 - 1.306878e-10 * OneThird * tt2 + 1.760794e-14 * 0.25 * tt3 + 5.484980e+00;
    } else {
      s0_R[9] = 3.489817e+00 * tt6 + 3.238355e-04 * tt0 - 1.688991e-06 * 0.50 * tt1 + 3.162173e-09 * OneThird * tt2 - 1.406091e-12 * 0.25 * tt3 + 2.084011e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[10] = 2.874101e+00 * tt6 + 3.656393e-03 * tt0 - 1.408946e-06 * 0.50 * tt1 + 2.601795e-10 * OneThird * tt2 - 1.877276e-14 * 0.25 * tt3 + 6.171193e+00;
    } else {
      s0_R[10] = 3.762679e+00 * tt6 + 9.688721e-04 * tt0 + 2.794898e-06 * 0.50 * tt1 - 3.850912e-09 * OneThird * tt2 + 1.687417e-12 * 0.25 * tt3 + 1.562532e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[11] = 2.292038e+00 * tt6 + 4.655886e-03 * tt0 - 2.011919e-06 * 0.50 * tt1 + 4.179060e-10 * OneThird * tt2 - 3.397164e-14 * 0.25 * tt3 + 8.626502e+00;
    } else {
      s0_R[11] = 4.198604e+00 * tt6 - 2.366614e-03 * tt0 + 8.232962e-06 * 0.50 * tt1 - 6.688160e-09 * OneThird * tt2 + 1.943147e-12 * 0.25 * tt3 - 7.691190e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[12] = 2.285718e+00 * tt6 + 7.239900e-03 * tt0 - 2.987143e-06 * 0.50 * tt1 + 5.956846e-10 * OneThird * tt2 - 4.671544e-14 * 0.25 * tt3 + 8.480072e+00;
    } else {
      s0_R[12] = 3.673590e+00 * tt6 + 2.010952e-03 * tt0 + 5.730219e-06 * 0.50 * tt1 - 6.871174e-09 * OneThird * tt2 + 2.543857e-12 * 0.25 * tt3 + 1.604564e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[13] = 7.485150e-02 * tt6 + 1.339095e-02 * tt0 - 5.732858e-06 * 0.50 * tt1 + 1.222925e-09 * OneThird * tt2 - 1.018152e-13 * 0.25 * tt3 + 1.843732e+01;
    } else {
      s0_R[13] = 5.149876e+00 * tt6 - 1.367098e-02 * tt0 + 4.918006e-05 * 0.50 * tt1 - 4.847430e-08 * OneThird * tt2 + 1.666940e-11 * 0.25 * tt3 - 4.641304e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[14] = 2.715186e+00 * tt6 + 2.062527e-03 * tt0 - 9.988258e-07 * 0.50 * tt1 + 2.300530e-10 * OneThird * tt2 - 2.036477e-14 * 0.25 * tt3 + 7.818688e+00;
    } else {
      s0_R[14] = 3.579533e+00 * tt6 - 6.103537e-04 * tt0 + 1.016814e-06 * 0.50 * tt1 + 9.070059e-10 * OneThird * tt2 - 9.044245e-13 * 0.25 * tt3 + 3.508409e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[15] = 3.857460e+00 * tt6 + 4.414370e-03 * tt0 - 2.214814e-06 * 0.50 * tt1 + 5.234902e-10 * OneThird * tt2 - 4.720842e-14 * 0.25 * tt3 + 2.271638e+00;
    } else {
      s0_R[15] = 2.356774e+00 * tt6 + 8.984597e-03 * tt0 - 7.123563e-06 * 0.50 * tt1 + 2.459190e-09 * OneThird * tt2 - 1.436995e-13 * 0.25 * tt3 + 9.901052e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[16] = 2.772174e+00 * tt6 + 4.956955e-03 * tt0 - 2.484456e-06 * 0.50 * tt1 + 5.891618e-10 * OneThird * tt2 - 5.335087e-14 * 0.25 * tt3 + 9.798345e+00;
    } else {
      s0_R[16] = 4.221186e+00 * tt6 - 3.243925e-03 * tt0 + 1.377994e-05 * 0.50 * tt1 - 1.331441e-08 * OneThird * tt2 + 4.337689e-12 * 0.25 * tt3 + 3.394372e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[17] = 1.760690e+00 * tt6 + 9.200001e-03 * tt0 - 4.422588e-06 * 0.50 * tt1 + 1.006412e-09 * OneThird * tt2 - 8.838556e-14 * 0.25 * tt3 + 1.365632e+01;
    } else {
      s0_R[17] = 4.793723e+00 * tt6 - 9.908334e-03 * tt0 + 3.732200e-05 * 0.50 * tt1 - 3.792853e-08 * OneThird * tt2 + 1.317727e-11 * 0.25 * tt3 + 6.028129e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[18] = 3.692666e+00 * tt6 + 8.645768e-03 * tt0 - 3.751011e-06 * 0.50 * tt1 + 7.872346e-10 * OneThird * tt2 - 6.485542e-14 * 0.25 * tt3 + 5.810432e+00;
    } else {
      s0_R[18] = 3.863889e+00 * tt6 + 5.596723e-03 * tt0 + 5.932718e-06 * 0.50 * tt1 - 1.045320e-08 * OneThird * tt2 + 4.369673e-12 * 0.25 * tt3 + 5.473022e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[19] = 3.770799e+00 * tt6 + 7.871497e-03 * tt0 - 2.656384e-06 * 0.50 * tt1 + 3.944431e-10 * OneThird * tt2 - 2.112616e-14 * 0.25 * tt3 + 2.929575e+00;
    } else {
      s0_R[19] = 2.106204e+00 * tt6 + 7.216595e-03 * tt0 + 5.338472e-06 * 0.50 * tt1 - 7.377636e-09 * OneThird * tt2 + 2.075610e-12 * 0.25 * tt3 + 1.315218e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[20] = 1.789708e+00 * tt6 + 1.409383e-02 * tt0 - 6.365008e-06 * 0.50 * tt1 + 1.381711e-09 * OneThird * tt2 - 1.170602e-13 * 0.25 * tt3 + 1.450236e+01;
    } else {
      s0_R[20] = 5.715396e+00 * tt6 - 1.523091e-02 * tt0 + 6.524412e-05 * 0.50 * tt1 - 7.108069e-08 * OneThird * tt2 + 2.613527e-11 * 0.25 * tt3 - 1.504098e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[21] = 3.167807e+00 * tt6 + 4.752219e-03 * tt0 - 1.837871e-06 * 0.50 * tt1 + 3.041903e-10 * OneThird * tt2 - 1.772328e-14 * 0.25 * tt3 + 6.635895e+00;
    } else {
      s0_R[21] = 2.889657e+00 * tt6 + 1.340996e-02 * tt0 - 2.847695e-05 * 0.50 * tt1 + 2.947910e-08 * OneThird * tt2 - 1.093315e-11 * 0.25 * tt3 + 6.222964e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[22] = 4.147570e+00 * tt6 + 5.961667e-03 * tt0 - 2.372949e-06 * 0.50 * tt1 + 4.674122e-10 * OneThird * tt2 - 3.612352e-14 * 0.25 * tt3 - 1.230281e+00;
    } else {
      s0_R[22] = 8.086811e-01 * tt6 + 2.336156e-02 * tt0 - 3.551718e-05 * 0.50 * tt1 + 2.801524e-08 * OneThird * tt2 - 8.500730e-12 * 0.25 * tt3 + 1.393971e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[23] = 3.016724e+00 * tt6 + 1.033023e-02 * tt0 - 4.680823e-06 * 0.50 * tt1 + 1.017633e-09 * OneThird * tt2 - 8.626070e-14 * 0.25 * tt3 + 7.787324e+00;
    } else {
      s0_R[23] = 3.212466e+00 * tt6 + 1.514792e-03 * tt0 + 2.592094e-05 * 0.50 * tt1 - 3.576578e-08 * OneThird * tt2 + 1.471509e-11 * 0.25 * tt3 + 8.510540e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[24] = 2.036111e+00 * tt6 + 1.464542e-02 * tt0 - 6.710779e-06 * 0.50 * tt1 + 1.472229e-09 * OneThird * tt2 - 1.257061e-13 * 0.25 * tt3 + 1.030537e+01;
    } else {
      s0_R[24] = 3.959201e+00 * tt6 - 7.570522e-03 * tt0 + 5.709903e-05 * 0.50 * tt1 - 6.915888e-08 * OneThird * tt2 + 2.698844e-11 * 0.25 * tt3 + 4.097331e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[25] = 1.954656e+00 * tt6 + 1.739727e-02 * tt0 - 7.982067e-06 * 0.50 * tt1 + 1.752177e-09 * OneThird * tt2 - 1.496416e-13 * 0.25 * tt3 + 1.346243e+01;
    } else {
      s0_R[25] = 4.306466e+00 * tt6 - 4.186589e-03 * tt0 + 4.971428e-05 * 0.50 * tt1 - 5.991266e-08 * OneThird * tt2 + 2.305090e-11 * 0.25 * tt3 + 4.707209e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[26] = 1.071881e+00 * tt6 + 2.168527e-02 * tt0 - 1.002561e-05 * 0.50 * tt1 + 2.214120e-09 * OneThird * tt2 - 1.900029e-13 * 0.25 * tt3 + 1.511561e+01;
    } else {
      s0_R[26] = 4.291425e+00 * tt6 - 5.501543e-03 * tt0 + 5.994383e-05 * 0.50 * tt1 - 7.084663e-08 * OneThird * tt2 + 2.686858e-11 * 0.25 * tt3 + 2.666823e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[27] = 5.628206e+00 * tt6 + 4.085340e-03 * tt0 - 1.593455e-06 * 0.50 * tt1 + 2.862605e-10 * OneThird * tt2 - 1.940783e-14 * 0.25 * tt3 - 3.930260e+00;
    } else {
      s0_R[27] = 2.251721e+00 * tt6 + 1.765502e-02 * tt0 - 2.372910e-05 * 0.50 * tt1 + 1.727576e-08 * OneThird * tt2 - 5.066481e-12 * 0.25 * tt3 + 1.249042e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[28] = 4.511297e+00 * tt6 + 9.003597e-03 * tt0 - 4.169396e-06 * 0.50 * tt1 + 9.233459e-10 * OneThird * tt2 - 7.948382e-14 * 0.25 * tt3 + 6.322472e-01;
    } else {
      s0_R[28] = 2.135836e+00 * tt6 + 1.811887e-02 * tt0 - 1.739475e-05 * 0.50 * tt1 + 9.343976e-09 * OneThird * tt2 - 2.014576e-12 * 0.25 * tt3 + 1.221565e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[29] = 5.923829e+00 * tt6 + 6.792360e-03 * tt0 - 2.565856e-06 * 0.50 * tt1 + 4.498784e-10 * OneThird * tt2 - 2.994010e-14 * 0.25 * tt3 - 7.601774e+00;
    } else {
      s0_R[29] = 1.242373e+00 * tt6 + 3.107220e-02 * tt0 - 5.086686e-05 * 0.50 * tt1 + 4.313713e-08 * OneThird * tt2 - 1.401459e-11 * 0.25 * tt3 + 1.387432e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[30] = 2.415943e+00 * tt6 + 1.748907e-04 * tt0 - 1.190237e-07 * 0.50 * tt1 + 3.022624e-11 * OneThird * tt2 - 2.036098e-15 * 0.25 * tt3 + 4.649610e+00;
    } else {
      s0_R[30] = 2.500000e+00 * tt6 - 0.000000e+00 * tt0 - 0.000000e+00 * 0.50 * tt1 - 0.000000e+00 * OneThird * tt2 - 0.000000e+00 * 0.25 * tt3 + 4.193909e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[31] = 2.783693e+00 * tt6 + 1.329843e-03 * tt0 - 4.247805e-07 * 0.50 * tt1 + 7.834850e-11 * OneThird * tt2 - 5.504447e-15 * 0.25 * tt3 + 5.740780e+00;
    } else {
      s0_R[31] = 3.492908e+00 * tt6 + 3.117920e-04 * tt0 - 1.489048e-06 * 0.50 * tt1 + 2.481644e-09 * OneThird * tt2 - 1.035697e-12 * 0.25 * tt3 + 1.848328e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[32] = 2.834742e+00 * tt6 + 3.207308e-03 * tt0 - 9.339080e-07 * 0.50 * tt1 + 1.370295e-10 * OneThird * tt2 - 7.920614e-15 * 0.25 * tt3 + 6.520416e+00;
    } else {
      s0_R[32] = 4.204003e+00 * tt6 - 2.106139e-03 * tt0 + 7.106835e-06 * 0.50 * tt1 - 5.611520e-09 * OneThird * tt2 + 1.644072e-12 * 0.25 * tt3 - 1.418425e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[33] = 2.634452e+00 * tt6 + 5.666256e-03 * tt0 - 1.727868e-06 * 0.50 * tt1 + 2.386716e-10 * OneThird * tt2 - 1.257879e-14 * 0.25 * tt3 + 6.566293e+00;
    } else {
      s0_R[33] = 4.286027e+00 * tt6 - 4.660523e-03 * tt0 + 2.171851e-05 * 0.50 * tt1 - 2.280889e-08 * OneThird * tt2 + 8.263805e-12 * 0.25 * tt3 - 6.253728e-01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[34] = 3.766754e+00 * tt6 + 2.891508e-03 * tt0 - 1.041662e-06 * 0.50 * tt1 + 1.684259e-10 * OneThird * tt2 - 1.009190e-14 * 0.25 * tt3 + 4.470507e+00;
    } else {
      s0_R[34] = 4.344693e+00 * tt6 - 4.849707e-03 * tt0 + 2.005946e-05 * 0.50 * tt1 - 2.172646e-08 * OneThird * tt2 + 7.946954e-12 * 0.25 * tt3 + 2.977941e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[35] = 3.260606e+00 * tt6 + 1.191104e-03 * tt0 - 4.291705e-07 * 0.50 * tt1 + 6.945767e-11 * OneThird * tt2 - 4.033610e-15 * 0.25 * tt3 + 6.369303e+00;
    } else {
      s0_R[35] = 4.218476e+00 * tt6 - 4.638976e-03 * tt0 + 1.104102e-05 * 0.50 * tt1 - 9.336135e-09 * OneThird * tt2 + 2.803577e-12 * 0.25 * tt3 + 2.280846e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[36] = 4.884754e+00 * tt6 + 2.172396e-03 * tt0 - 8.280691e-07 * 0.50 * tt1 + 1.574751e-10 * OneThird * tt2 - 1.051090e-14 * 0.25 * tt3 - 1.174170e-01;
    } else {
      s0_R[36] = 3.944031e+00 * tt6 - 1.585429e-03 * tt0 + 1.665781e-05 * 0.50 * tt1 - 2.047543e-08 * OneThird * tt2 + 7.835056e-12 * 0.25 * tt3 + 6.311992e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[37] = 4.823073e+00 * tt6 + 2.627025e-03 * tt0 - 9.585087e-07 * 0.50 * tt1 + 1.600071e-10 * OneThird * tt2 - 9.775230e-15 * 0.25 * tt3 - 2.201721e+00;
    } else {
      s0_R[37] = 2.257150e+00 * tt6 + 1.130473e-02 * tt0 - 1.367132e-05 * 0.50 * tt1 + 9.681981e-09 * OneThird * tt2 - 2.930718e-12 * 0.25 * tt3 + 1.075799e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[38] = 2.979251e+00 * tt6 + 3.494406e-03 * tt0 - 7.854978e-07 * 0.50 * tt1 + 5.747959e-11 * OneThird * tt2 - 1.933592e-16 * 0.25 * tt3 + 8.606373e+00;
    } else {
      s0_R[38] = 4.533492e+00 * tt6 - 5.669617e-03 * tt0 + 1.847321e-05 * 0.50 * tt1 - 1.713709e-08 * OneThird * tt2 + 5.545457e-12 * 0.25 * tt3 + 1.749842e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[39] = 3.745980e+00 * tt6 + 4.345077e-05 * tt0 + 2.970598e-07 * 0.50 * tt1 - 6.865181e-11 * OneThird * tt2 + 4.413417e-15 * 0.25 * tt3 + 2.786760e+00;
    } else {
      s0_R[39] = 3.612935e+00 * tt6 - 9.555133e-04 * tt0 + 2.144298e-06 * 0.50 * tt1 - 3.151632e-10 * OneThird * tt2 - 4.643036e-13 * 0.25 * tt3 + 3.980500e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[40] = 3.802239e+00 * tt6 + 3.146423e-03 * tt0 - 1.063219e-06 * 0.50 * tt1 + 1.661976e-10 * OneThird * tt2 - 9.799757e-15 * 0.25 * tt3 + 1.575460e+00;
    } else {
      s0_R[40] = 2.258989e+00 * tt6 + 1.005117e-02 * tt0 - 1.335176e-05 * 0.50 * tt1 + 1.009235e-08 * OneThird * tt2 - 3.008903e-12 * 0.25 * tt3 + 8.916442e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[41] = 5.209703e+00 * tt6 + 2.969291e-03 * tt0 - 2.855589e-07 * 0.50 * tt1 - 1.635550e-10 * OneThird * tt2 + 3.043259e-14 * 0.25 * tt3 - 4.444478e+00;
    } else {
      s0_R[41] = 2.851661e+00 * tt6 + 5.695233e-03 * tt0 + 1.071140e-06 * 0.50 * tt1 - 1.622612e-09 * OneThird * tt2 - 2.351108e-13 * 0.25 * tt3 + 8.992751e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[42] = 5.894636e+00 * tt6 + 3.989596e-03 * tt0 - 1.598238e-06 * 0.50 * tt1 + 2.924940e-10 * OneThird * tt2 - 2.009469e-14 * 0.25 * tt3 - 5.103050e+00;
    } else {
      s0_R[42] = 2.524319e+00 * tt6 + 1.596062e-02 * tt0 - 1.881635e-05 * 0.50 * tt1 + 1.212554e-08 * OneThird * tt2 - 3.235738e-12 * 0.25 * tt3 + 1.167587e+01;
    };

    if(tt0 > 1.382000e+03) {
      s0_R[43] = 6.598605e+00 * tt6 + 3.027786e-03 * tt0 - 1.077043e-06 * 0.50 * tt1 + 1.716665e-10 * OneThird * tt2 - 1.014394e-14 * 0.25 * tt3 - 1.033066e+01;
    } else {
      s0_R[43] = 2.647280e+00 * tt6 + 1.275053e-02 * tt0 - 1.047942e-05 * 0.50 * tt1 + 4.414328e-09 * OneThird * tt2 - 7.575215e-13 * 0.25 * tt3 + 1.073330e+01;
    };

    if(tt0 > 1.368000e+03) {
      s0_R[44] = 5.897849e+00 * tt6 + 3.167894e-03 * tt0 - 1.118011e-06 * 0.50 * tt1 + 1.772431e-10 * OneThird * tt2 - 1.043392e-14 * 0.25 * tt3 - 6.181678e+00;
    } else {
      s0_R[44] = 3.786050e+00 * tt6 + 6.886679e-03 * tt0 - 3.214879e-06 * 0.50 * tt1 + 5.171958e-10 * OneThird * tt2 + 1.193608e-14 * 0.25 * tt3 + 5.632922e+00;
    };

    if(tt0 > 1.478000e+03) {
      s0_R[45] = 6.223951e+00 * tt6 + 3.178640e-03 * tt0 - 1.093788e-06 * 0.50 * tt1 + 1.707352e-10 * OneThird * tt2 - 9.950220e-15 * 0.25 * tt3 - 8.382247e+00;
    } else {
      s0_R[45] = 3.630963e+00 * tt6 + 7.302824e-03 * tt0 - 2.280500e-06 * 0.50 * tt1 - 6.612713e-10 * OneThird * tt2 + 3.622358e-13 * 0.25 * tt3 + 6.194577e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[46] = 5.152184e+00 * tt6 + 2.305176e-03 * tt0 - 8.803315e-07 * 0.50 * tt1 + 1.478910e-10 * OneThird * tt2 - 9.097800e-15 * 0.25 * tt3 - 2.544266e+00;
    } else {
      s0_R[46] = 2.826931e+00 * tt6 + 8.805169e-03 * tt0 - 8.386613e-06 * 0.50 * tt1 + 4.801696e-09 * OneThird * tt2 - 1.331360e-12 * 0.25 * tt3 + 9.550465e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[47] = 2.926640e+00 * tt6 + 1.487977e-03 * tt0 - 5.684760e-07 * 0.50 * tt1 + 1.009704e-10 * OneThird * tt2 - 6.753351e-15 * 0.25 * tt3 + 5.980528e+00;
    } else {
      s0_R[47] = 3.298677e+00 * tt6 + 1.408240e-03 * tt0 - 3.963222e-06 * 0.50 * tt1 + 5.641515e-09 * OneThird * tt2 - 2.444854e-12 * 0.25 * tt3 + 3.950372e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[48] = 2.500000e+00 * tt6 - 0.000000e+00 * tt0 - 0.000000e+00 * 0.50 * tt1 - 0.000000e+00 * OneThird * tt2 - 0.000000e+00 * 0.25 * tt3 + 4.366000e+00;
    } else {
      s0_R[48] = 2.500000e+00 * tt6 - 0.000000e+00 * tt0 - 0.000000e+00 * 0.50 * tt1 - 0.000000e+00 * OneThird * tt2 - 0.000000e+00 * 0.25 * tt3 + 4.366000e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[49] = 7.702699e+00 * tt6 + 1.604420e-02 * tt0 - 5.283322e-06 * 0.50 * tt1 + 7.629859e-10 * OneThird * tt2 - 3.939228e-14 * 0.25 * tt3 - 1.548018e+01;
    } else {
      s0_R[49] = 1.051552e+00 * tt6 + 2.599198e-02 * tt0 + 2.380054e-06 * 0.50 * tt1 - 1.960957e-08 * OneThird * tt2 + 9.373247e-12 * 0.25 * tt3 + 2.112256e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[50] = 7.534137e+00 * tt6 + 1.887224e-02 * tt0 - 6.271849e-06 * 0.50 * tt1 + 9.147565e-10 * OneThird * tt2 - 4.783807e-14 * 0.25 * tt3 - 1.789235e+01;
    } else {
      s0_R[50] = 9.335538e-01 * tt6 + 2.642458e-02 * tt0 + 6.105973e-06 * 0.50 * tt1 - 2.197750e-08 * OneThird * tt2 + 9.514925e-12 * 0.25 * tt3 + 1.920169e+01;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[51] = 5.975670e+00 * tt6 + 8.130591e-03 * tt0 - 2.743624e-06 * 0.50 * tt1 + 4.070304e-10 * OneThird * tt2 - 2.176017e-14 * 0.25 * tt3 - 5.045251e+00;
    } else {
      s0_R[51] = 3.409062e+00 * tt6 + 1.073857e-02 * tt0 + 1.891492e-06 * 0.50 * tt1 - 7.158583e-09 * OneThird * tt2 + 2.867385e-12 * 0.25 * tt3 + 9.558290e+00;
    };

    if(tt0 > 1.000000e+03) {
      s0_R[52] = 5.404111e+00 * tt6 + 1.172306e-02 * tt0 - 4.226314e-06 * 0.50 * tt1 + 6.837245e-10 * OneThird * tt2 - 4.098486e-14 * 0.25 * tt3 - 3.480792e+00;
    } else {
      s0_R[52] = 4.729459e+00 * tt6 - 3.193286e-03 * tt0 + 4.753492e-05 * 0.50 * tt1 - 5.745861e-08 * OneThird * tt2 + 2.193111e-11 * 0.25 * tt3 + 4.103016e+00;
    };

  };

  void getGibbsFunctions_RT(double& T, std::vector<double>& g0_RT) {

    std::vector<double> h0_RT(kk, 0.0);
    std::vector<double> s0_R(kk, 0.0);

    getEnthalpies_RT(T, h0_RT);
    getEntropies_R(T, s0_R);
    for(int k = 0; k < kk; ++k) { g0_RT[k] = h0_RT[k] - s0_R[k]; }

  };

  void getEquilibriumConstants(double& T, std::vector<double>& keq) {

    double            p0 = OneAtm;
    double              RT = GasConstant * T;
    double              C0 = p0 / RT;
    std::vector<double> g0_RT(kk, 0.0);

    getGibbsFunctions_RT(T, g0_RT);
    for(int k = 0; k < kk; ++k) { g0_RT[k] = exp(g0_RT[k]); }

    keq[0] =  C0 * ( g0_RT[3] ) / ( g0_RT[2] * g0_RT[2] );
    keq[1] =  C0 * ( g0_RT[4] ) / ( g0_RT[1] * g0_RT[2] );
    keq[2] = ( g0_RT[1] * g0_RT[4] ) / ( g0_RT[0] * g0_RT[2] );
    keq[3] = ( g0_RT[3] * g0_RT[4] ) / ( g0_RT[6] * g0_RT[2] );
    keq[4] = ( g0_RT[6] * g0_RT[4] ) / ( g0_RT[7] * g0_RT[2] );
    keq[5] = ( g0_RT[14] * g0_RT[1] ) / ( g0_RT[9] * g0_RT[2] );
    keq[6] = ( g0_RT[1] * g0_RT[16] ) / ( g0_RT[10] * g0_RT[2] );
    keq[7] = ( g0_RT[14] * g0_RT[0] ) / ( g0_RT[11] * g0_RT[2] );
    keq[8] = ( g0_RT[1] * g0_RT[16] ) / ( g0_RT[11] * g0_RT[2] );
    keq[9] = ( g0_RT[17] * g0_RT[1] ) / ( g0_RT[12] * g0_RT[2] );
    keq[10] = ( g0_RT[12] * g0_RT[4] ) / ( g0_RT[13] * g0_RT[2] );
    keq[11] =  C0 * ( g0_RT[15] ) / ( g0_RT[14] * g0_RT[2] );
    keq[12] = ( g0_RT[14] * g0_RT[4] ) / ( g0_RT[16] * g0_RT[2] );
    keq[13] = ( g0_RT[15] * g0_RT[1] ) / ( g0_RT[16] * g0_RT[2] );
    keq[14] = ( g0_RT[16] * g0_RT[4] ) / ( g0_RT[17] * g0_RT[2] );
    keq[15] = ( g0_RT[17] * g0_RT[4] ) / ( g0_RT[18] * g0_RT[2] );
    keq[16] = ( g0_RT[17] * g0_RT[4] ) / ( g0_RT[19] * g0_RT[2] );
    keq[17] = ( g0_RT[18] * g0_RT[4] ) / ( g0_RT[20] * g0_RT[2] );
    keq[18] = ( g0_RT[19] * g0_RT[4] ) / ( g0_RT[20] * g0_RT[2] );
    keq[19] = ( g0_RT[9] * g0_RT[14] ) / ( g0_RT[21] * g0_RT[2] );
    keq[20] = ( g0_RT[1] * g0_RT[27] ) / ( g0_RT[22] * g0_RT[2] );
    keq[21] = ( g0_RT[21] * g0_RT[4] ) / ( g0_RT[22] * g0_RT[2] );
    keq[22] = ( g0_RT[10] * g0_RT[14] ) / ( g0_RT[22] * g0_RT[2] );
    keq[23] = ( g0_RT[28] * g0_RT[1] ) / ( g0_RT[23] * g0_RT[2] );
    keq[24] = ( g0_RT[12] * g0_RT[16] ) / ( g0_RT[24] * g0_RT[2] );
    keq[25] = ( g0_RT[17] * g0_RT[12] ) / ( g0_RT[25] * g0_RT[2] );
    keq[26] = ( g0_RT[25] * g0_RT[4] ) / ( g0_RT[26] * g0_RT[2] );
    keq[27] = ( g0_RT[14] * g0_RT[14] * g0_RT[1] ) / ( g0_RT[27] * g0_RT[2] * C0  );
    keq[28] = ( g0_RT[27] * g0_RT[4] ) / ( g0_RT[28] * g0_RT[2] );
    keq[29] = ( g0_RT[10] * g0_RT[15] ) / ( g0_RT[28] * g0_RT[2] );
    keq[30] = ( g0_RT[15] * g0_RT[2] ) / ( g0_RT[14] * g0_RT[3] );
    keq[31] = ( g0_RT[16] * g0_RT[6] ) / ( g0_RT[17] * g0_RT[3] );
    keq[32] =  C0 * ( g0_RT[6] ) / ( g0_RT[1] * g0_RT[3] );
    keq[33] =  C0 * ( g0_RT[6] * g0_RT[3] ) / ( g0_RT[1] * g0_RT[3] * g0_RT[3] );
    keq[34] =  C0 * ( g0_RT[5] * g0_RT[6] ) / ( g0_RT[1] * g0_RT[5] * g0_RT[3] );
    keq[35] =  C0 * ( g0_RT[6] * g0_RT[47] ) / ( g0_RT[1] * g0_RT[47] * g0_RT[3] );
    keq[36] =  C0 * ( g0_RT[48] * g0_RT[6] ) / ( g0_RT[48] * g0_RT[1] * g0_RT[3] );
    keq[37] = ( g0_RT[2] * g0_RT[4] ) / ( g0_RT[1] * g0_RT[3] );
    keq[38] =  C0 * ( g0_RT[0] ) / ( g0_RT[1] * g0_RT[1] );
    keq[39] =  C0 * ( g0_RT[0] * g0_RT[0] ) / ( g0_RT[1] * g0_RT[1] * g0_RT[0] );
    keq[40] =  C0 * ( g0_RT[0] * g0_RT[5] ) / ( g0_RT[1] * g0_RT[1] * g0_RT[5] );
    keq[41] =  C0 * ( g0_RT[15] * g0_RT[0] ) / ( g0_RT[15] * g0_RT[1] * g0_RT[1] );
    keq[42] =  C0 * ( g0_RT[5] ) / ( g0_RT[1] * g0_RT[4] );
    keq[43] = ( g0_RT[5] * g0_RT[2] ) / ( g0_RT[1] * g0_RT[6] );
    keq[44] = ( g0_RT[0] * g0_RT[3] ) / ( g0_RT[1] * g0_RT[6] );
    keq[45] = ( g0_RT[4] * g0_RT[4] ) / ( g0_RT[1] * g0_RT[6] );
    keq[46] = ( g0_RT[0] * g0_RT[6] ) / ( g0_RT[1] * g0_RT[7] );
    keq[47] = ( g0_RT[5] * g0_RT[4] ) / ( g0_RT[1] * g0_RT[7] );
    keq[48] = ( g0_RT[8] * g0_RT[0] ) / ( g0_RT[9] * g0_RT[1] );
    keq[49] =  C0 * ( g0_RT[12] ) / ( g0_RT[10] * g0_RT[1] );
    keq[50] = ( g0_RT[9] * g0_RT[0] ) / ( g0_RT[11] * g0_RT[1] );
    keq[51] =  C0 * ( g0_RT[13] ) / ( g0_RT[12] * g0_RT[1] );
    keq[52] = ( g0_RT[12] * g0_RT[0] ) / ( g0_RT[13] * g0_RT[1] );
    keq[53] =  C0 * ( g0_RT[17] ) / ( g0_RT[1] * g0_RT[16] );
    keq[54] = ( g0_RT[14] * g0_RT[0] ) / ( g0_RT[1] * g0_RT[16] );
    keq[55] =  C0 * ( g0_RT[18] ) / ( g0_RT[17] * g0_RT[1] );
    keq[56] =  C0 * ( g0_RT[19] ) / ( g0_RT[17] * g0_RT[1] );
    keq[57] = ( g0_RT[0] * g0_RT[16] ) / ( g0_RT[17] * g0_RT[1] );
    keq[58] =  C0 * ( g0_RT[20] ) / ( g0_RT[18] * g0_RT[1] );
    keq[59] = ( g0_RT[17] * g0_RT[0] ) / ( g0_RT[18] * g0_RT[1] );
    keq[60] = ( g0_RT[12] * g0_RT[4] ) / ( g0_RT[18] * g0_RT[1] );
    keq[61] = ( g0_RT[11] * g0_RT[5] ) / ( g0_RT[18] * g0_RT[1] );
    keq[62] =  C0 * ( g0_RT[20] ) / ( g0_RT[19] * g0_RT[1] );
    keq[63] = ( g0_RT[18] * g0_RT[1] ) / ( g0_RT[19] * g0_RT[1] );
    keq[64] = ( g0_RT[17] * g0_RT[0] ) / ( g0_RT[19] * g0_RT[1] );
    keq[65] = ( g0_RT[12] * g0_RT[4] ) / ( g0_RT[19] * g0_RT[1] );
    keq[66] = ( g0_RT[11] * g0_RT[5] ) / ( g0_RT[19] * g0_RT[1] );
    keq[67] = ( g0_RT[18] * g0_RT[0] ) / ( g0_RT[20] * g0_RT[1] );
    keq[68] = ( g0_RT[19] * g0_RT[0] ) / ( g0_RT[20] * g0_RT[1] );
    keq[69] =  C0 * ( g0_RT[22] ) / ( g0_RT[21] * g0_RT[1] );
    keq[70] =  C0 * ( g0_RT[23] ) / ( g0_RT[22] * g0_RT[1] );
    keq[71] =  C0 * ( g0_RT[24] ) / ( g0_RT[23] * g0_RT[1] );
    keq[72] = ( g0_RT[22] * g0_RT[0] ) / ( g0_RT[23] * g0_RT[1] );
    keq[73] =  C0 * ( g0_RT[25] ) / ( g0_RT[24] * g0_RT[1] );
    keq[74] = ( g0_RT[23] * g0_RT[0] ) / ( g0_RT[24] * g0_RT[1] );
    keq[75] =  C0 * ( g0_RT[26] ) / ( g0_RT[25] * g0_RT[1] );
    keq[76] = ( g0_RT[24] * g0_RT[0] ) / ( g0_RT[25] * g0_RT[1] );
    keq[77] = ( g0_RT[25] * g0_RT[0] ) / ( g0_RT[26] * g0_RT[1] );
    keq[78] = ( g0_RT[11] * g0_RT[14] ) / ( g0_RT[1] * g0_RT[27] );
    keq[79] = ( g0_RT[0] * g0_RT[27] ) / ( g0_RT[28] * g0_RT[1] );
    keq[80] = ( g0_RT[12] * g0_RT[14] ) / ( g0_RT[28] * g0_RT[1] );
    keq[81] = ( g0_RT[28] * g0_RT[1] ) / ( g0_RT[1] * g0_RT[29] );
    keq[82] =  C0 * ( g0_RT[17] ) / ( g0_RT[14] * g0_RT[0] );
    keq[83] = ( g0_RT[1] * g0_RT[5] ) / ( g0_RT[0] * g0_RT[4] );
    keq[84] =  C0 * ( g0_RT[7] ) / ( g0_RT[4] * g0_RT[4] );
    keq[85] = ( g0_RT[5] * g0_RT[2] ) / ( g0_RT[4] * g0_RT[4] );
    keq[86] = ( g0_RT[5] * g0_RT[3] ) / ( g0_RT[6] * g0_RT[4] );
    keq[87] = ( g0_RT[5] * g0_RT[6] ) / ( g0_RT[7] * g0_RT[4] );
    keq[88] = ( g0_RT[5] * g0_RT[6] ) / ( g0_RT[7] * g0_RT[4] );
    keq[89] = ( g0_RT[14] * g0_RT[1] ) / ( g0_RT[8] * g0_RT[4] );
    keq[90] = ( g0_RT[1] * g0_RT[16] ) / ( g0_RT[9] * g0_RT[4] );
    keq[91] = ( g0_RT[17] * g0_RT[1] ) / ( g0_RT[10] * g0_RT[4] );
    keq[92] = ( g0_RT[9] * g0_RT[5] ) / ( g0_RT[10] * g0_RT[4] );
    keq[93] = ( g0_RT[17] * g0_RT[1] ) / ( g0_RT[11] * g0_RT[4] );
    keq[94] =  C0 * ( g0_RT[20] ) / ( g0_RT[12] * g0_RT[4] );
    keq[95] = ( g0_RT[10] * g0_RT[5] ) / ( g0_RT[12] * g0_RT[4] );
    keq[96] = ( g0_RT[11] * g0_RT[5] ) / ( g0_RT[12] * g0_RT[4] );
    keq[97] = ( g0_RT[12] * g0_RT[5] ) / ( g0_RT[13] * g0_RT[4] );
    keq[98] = ( g0_RT[15] * g0_RT[1] ) / ( g0_RT[14] * g0_RT[4] );
    keq[99] = ( g0_RT[14] * g0_RT[5] ) / ( g0_RT[16] * g0_RT[4] );
    keq[100] = ( g0_RT[5] * g0_RT[16] ) / ( g0_RT[17] * g0_RT[4] );
    keq[101] = ( g0_RT[17] * g0_RT[5] ) / ( g0_RT[18] * g0_RT[4] );
    keq[102] = ( g0_RT[17] * g0_RT[5] ) / ( g0_RT[19] * g0_RT[4] );
    keq[103] = ( g0_RT[18] * g0_RT[5] ) / ( g0_RT[20] * g0_RT[4] );
    keq[104] = ( g0_RT[19] * g0_RT[5] ) / ( g0_RT[20] * g0_RT[4] );
    keq[105] = ( g0_RT[1] * g0_RT[27] ) / ( g0_RT[21] * g0_RT[4] );
    keq[106] = ( g0_RT[28] * g0_RT[1] ) / ( g0_RT[22] * g0_RT[4] );
    keq[107] = ( g0_RT[1] * g0_RT[29] ) / ( g0_RT[22] * g0_RT[4] );
    keq[108] = ( g0_RT[21] * g0_RT[5] ) / ( g0_RT[22] * g0_RT[4] );
    keq[109] = ( g0_RT[12] * g0_RT[14] ) / ( g0_RT[22] * g0_RT[4] );
    keq[110] = ( g0_RT[22] * g0_RT[5] ) / ( g0_RT[23] * g0_RT[4] );
    keq[111] = ( g0_RT[23] * g0_RT[5] ) / ( g0_RT[24] * g0_RT[4] );
    keq[112] = ( g0_RT[25] * g0_RT[5] ) / ( g0_RT[26] * g0_RT[4] );
    keq[113] = ( g0_RT[5] * g0_RT[27] ) / ( g0_RT[28] * g0_RT[4] );
    keq[114] = ( g0_RT[7] * g0_RT[3] ) / ( g0_RT[6] * g0_RT[6] );
    keq[115] = ( g0_RT[7] * g0_RT[3] ) / ( g0_RT[6] * g0_RT[6] );
    keq[116] = ( g0_RT[17] * g0_RT[4] ) / ( g0_RT[10] * g0_RT[6] );
    keq[117] = ( g0_RT[13] * g0_RT[3] ) / ( g0_RT[12] * g0_RT[6] );
    keq[118] = ( g0_RT[19] * g0_RT[4] ) / ( g0_RT[12] * g0_RT[6] );
    keq[119] = ( g0_RT[15] * g0_RT[4] ) / ( g0_RT[14] * g0_RT[6] );
    keq[120] = ( g0_RT[7] * g0_RT[16] ) / ( g0_RT[17] * g0_RT[6] );
    keq[121] = ( g0_RT[14] * g0_RT[2] ) / ( g0_RT[8] * g0_RT[3] );
    keq[122] = ( g0_RT[21] * g0_RT[1] ) / ( g0_RT[8] * g0_RT[10] );
    keq[123] = ( g0_RT[22] * g0_RT[1] ) / ( g0_RT[8] * g0_RT[12] );
    keq[124] = ( g0_RT[16] * g0_RT[2] ) / ( g0_RT[9] * g0_RT[3] );
    keq[125] = ( g0_RT[10] * g0_RT[1] ) / ( g0_RT[9] * g0_RT[0] );
    keq[126] = ( g0_RT[17] * g0_RT[1] ) / ( g0_RT[9] * g0_RT[5] );
    keq[127] = ( g0_RT[22] * g0_RT[1] ) / ( g0_RT[9] * g0_RT[10] );
    keq[128] = ( g0_RT[23] * g0_RT[1] ) / ( g0_RT[9] * g0_RT[12] );
    keq[129] = ( g0_RT[24] * g0_RT[1] ) / ( g0_RT[9] * g0_RT[13] );
    keq[130] =  C0 * ( g0_RT[27] ) / ( g0_RT[9] * g0_RT[14] );
    keq[131] = ( g0_RT[14] * g0_RT[16] ) / ( g0_RT[9] * g0_RT[15] );
    keq[132] = ( g0_RT[28] * g0_RT[1] ) / ( g0_RT[9] * g0_RT[17] );
    keq[133] = ( g0_RT[22] * g0_RT[14] ) / ( g0_RT[9] * g0_RT[27] );
    keq[135] = ( g0_RT[12] * g0_RT[1] ) / ( g0_RT[10] * g0_RT[0] );
    keq[136] = ( g0_RT[22] * g0_RT[0] ) / ( g0_RT[10] * g0_RT[10] );
    keq[137] = ( g0_RT[24] * g0_RT[1] ) / ( g0_RT[10] * g0_RT[12] );
    keq[138] = ( g0_RT[12] * g0_RT[12] ) / ( g0_RT[10] * g0_RT[13] );
    keq[139] =  C0 * ( g0_RT[28] ) / ( g0_RT[10] * g0_RT[14] );
    keq[140] = ( g0_RT[23] * g0_RT[14] ) / ( g0_RT[10] * g0_RT[27] );
    keq[141] = ( g0_RT[10] * g0_RT[47] ) / ( g0_RT[11] * g0_RT[47] );
    keq[142] = ( g0_RT[48] * g0_RT[10] ) / ( g0_RT[48] * g0_RT[11] );
    keq[143] = ( g0_RT[14] * g0_RT[1] * g0_RT[4] ) / ( g0_RT[11] * g0_RT[3] * C0  );
    keq[144] = ( g0_RT[14] * g0_RT[5] ) / ( g0_RT[11] * g0_RT[3] );
    keq[145] = ( g0_RT[12] * g0_RT[1] ) / ( g0_RT[11] * g0_RT[0] );
    keq[146] =  C0 * ( g0_RT[20] ) / ( g0_RT[11] * g0_RT[5] );
    keq[147] = ( g0_RT[10] * g0_RT[5] ) / ( g0_RT[11] * g0_RT[5] );
    keq[148] = ( g0_RT[24] * g0_RT[1] ) / ( g0_RT[11] * g0_RT[12] );
    keq[149] = ( g0_RT[12] * g0_RT[12] ) / ( g0_RT[11] * g0_RT[13] );
    keq[150] = ( g0_RT[10] * g0_RT[14] ) / ( g0_RT[11] * g0_RT[14] );
    keq[151] = ( g0_RT[10] * g0_RT[15] ) / ( g0_RT[11] * g0_RT[15] );
    keq[152] = ( g0_RT[17] * g0_RT[14] ) / ( g0_RT[11] * g0_RT[15] );
    keq[153] = ( g0_RT[25] * g0_RT[12] ) / ( g0_RT[26] * g0_RT[11] );
    keq[154] = ( g0_RT[19] * g0_RT[2] ) / ( g0_RT[12] * g0_RT[3] );
    keq[155] = ( g0_RT[17] * g0_RT[4] ) / ( g0_RT[12] * g0_RT[3] );
    keq[156] = ( g0_RT[13] * g0_RT[6] ) / ( g0_RT[12] * g0_RT[7] );
    keq[157] =  C0 * ( g0_RT[26] ) / ( g0_RT[12] * g0_RT[12] );
    keq[158] = ( g0_RT[25] * g0_RT[1] ) / ( g0_RT[12] * g0_RT[12] );
    keq[159] = ( g0_RT[13] * g0_RT[14] ) / ( g0_RT[12] * g0_RT[16] );
    keq[160] = ( g0_RT[13] * g0_RT[16] ) / ( g0_RT[17] * g0_RT[12] );
    keq[161] = ( g0_RT[18] * g0_RT[13] ) / ( g0_RT[12] * g0_RT[20] );
    keq[162] = ( g0_RT[19] * g0_RT[13] ) / ( g0_RT[12] * g0_RT[20] );
    keq[163] = ( g0_RT[23] * g0_RT[13] ) / ( g0_RT[24] * g0_RT[12] );
    keq[164] = ( g0_RT[25] * g0_RT[13] ) / ( g0_RT[26] * g0_RT[12] );
    keq[165] = ( g0_RT[14] * g0_RT[1] * g0_RT[5] ) / ( g0_RT[5] * g0_RT[16] * C0  );
    keq[166] = ( g0_RT[14] * g0_RT[1] ) / ( g0_RT[16] * C0  );
    keq[167] = ( g0_RT[14] * g0_RT[6] ) / ( g0_RT[16] * g0_RT[3] );
    keq[168] = ( g0_RT[17] * g0_RT[6] ) / ( g0_RT[18] * g0_RT[3] );
    keq[169] = ( g0_RT[17] * g0_RT[6] ) / ( g0_RT[19] * g0_RT[3] );
    keq[170] = ( g0_RT[14] * g0_RT[16] ) / ( g0_RT[21] * g0_RT[3] );
    keq[171] = ( g0_RT[22] * g0_RT[1] ) / ( g0_RT[21] * g0_RT[0] );
    keq[172] = ( g0_RT[17] * g0_RT[16] ) / ( g0_RT[23] * g0_RT[3] );
    keq[173] = ( g0_RT[22] * g0_RT[0] ) / ( g0_RT[24] * C0  );
    keq[174] = ( g0_RT[24] * g0_RT[6] ) / ( g0_RT[25] * g0_RT[3] );
    keq[175] = ( g0_RT[14] * g0_RT[14] * g0_RT[4] ) / ( g0_RT[27] * g0_RT[3] * C0  );
    keq[176] = ( g0_RT[22] * g0_RT[14] * g0_RT[14] ) / ( g0_RT[27] * g0_RT[27] * C0  );
    keq[177] = ( g0_RT[47] * g0_RT[2] ) / ( g0_RT[30] * g0_RT[35] );
    keq[178] = ( g0_RT[35] * g0_RT[2] ) / ( g0_RT[30] * g0_RT[3] );
    keq[179] = ( g0_RT[1] * g0_RT[35] ) / ( g0_RT[30] * g0_RT[4] );
    keq[180] = ( g0_RT[47] * g0_RT[3] ) / ( g0_RT[37] * g0_RT[2] );
    keq[181] = ( g0_RT[35] * g0_RT[35] ) / ( g0_RT[37] * g0_RT[2] );
    keq[182] = ( g0_RT[47] * g0_RT[4] ) / ( g0_RT[1] * g0_RT[37] );
    keq[183] = ( g0_RT[6] * g0_RT[47] ) / ( g0_RT[37] * g0_RT[4] );
    keq[184] = ( g0_RT[47] * g0_RT[2] ) / ( g0_RT[37] * C0  );
    keq[185] = ( g0_RT[36] * g0_RT[4] ) / ( g0_RT[6] * g0_RT[35] );
    keq[186] =  C0 * ( g0_RT[36] ) / ( g0_RT[35] * g0_RT[2] );
    keq[187] = ( g0_RT[35] * g0_RT[3] ) / ( g0_RT[36] * g0_RT[2] );
    keq[188] = ( g0_RT[35] * g0_RT[4] ) / ( g0_RT[1] * g0_RT[36] );
    keq[189] = ( g0_RT[1] * g0_RT[35] ) / ( g0_RT[31] * g0_RT[2] );
    keq[190] = ( g0_RT[0] * g0_RT[30] ) / ( g0_RT[1] * g0_RT[31] );
    keq[191] = ( g0_RT[1] * g0_RT[38] ) / ( g0_RT[31] * g0_RT[4] );
    keq[192] = ( g0_RT[5] * g0_RT[30] ) / ( g0_RT[31] * g0_RT[4] );
    keq[193] = ( g0_RT[38] * g0_RT[2] ) / ( g0_RT[31] * g0_RT[3] );
    keq[194] = ( g0_RT[35] * g0_RT[4] ) / ( g0_RT[31] * g0_RT[3] );
    keq[195] = ( g0_RT[1] * g0_RT[47] ) / ( g0_RT[30] * g0_RT[31] );
    keq[196] = ( g0_RT[0] * g0_RT[38] ) / ( g0_RT[5] * g0_RT[31] );
    keq[197] = ( g0_RT[47] * g0_RT[4] ) / ( g0_RT[31] * g0_RT[35] );
    keq[198] = ( g0_RT[1] * g0_RT[37] ) / ( g0_RT[31] * g0_RT[35] );
    keq[199] = ( g0_RT[31] * g0_RT[4] ) / ( g0_RT[32] * g0_RT[2] );
    keq[200] = ( g0_RT[1] * g0_RT[38] ) / ( g0_RT[32] * g0_RT[2] );
    keq[201] = ( g0_RT[0] * g0_RT[31] ) / ( g0_RT[1] * g0_RT[32] );
    keq[202] = ( g0_RT[5] * g0_RT[31] ) / ( g0_RT[32] * g0_RT[4] );
    keq[203] = ( g0_RT[1] * g0_RT[47] ) / ( g0_RT[34] * C0  );
    keq[204] = ( g0_RT[1] * g0_RT[47] ) / ( g0_RT[34] * C0  );
    keq[205] = ( g0_RT[6] * g0_RT[47] ) / ( g0_RT[34] * g0_RT[3] );
    keq[206] = ( g0_RT[47] * g0_RT[4] ) / ( g0_RT[34] * g0_RT[2] );
    keq[207] = ( g0_RT[31] * g0_RT[35] ) / ( g0_RT[34] * g0_RT[2] );
    keq[208] = ( g0_RT[0] * g0_RT[47] ) / ( g0_RT[1] * g0_RT[34] );
    keq[209] = ( g0_RT[5] * g0_RT[47] ) / ( g0_RT[34] * g0_RT[4] );
    keq[210] = ( g0_RT[13] * g0_RT[47] ) / ( g0_RT[12] * g0_RT[34] );
    keq[211] =  C0 * ( g0_RT[38] ) / ( g0_RT[1] * g0_RT[35] );
    keq[212] = ( g0_RT[35] * g0_RT[4] ) / ( g0_RT[38] * g0_RT[2] );
    keq[213] = ( g0_RT[0] * g0_RT[35] ) / ( g0_RT[1] * g0_RT[38] );
    keq[214] = ( g0_RT[5] * g0_RT[35] ) / ( g0_RT[38] * g0_RT[4] );
    keq[215] = ( g0_RT[6] * g0_RT[35] ) / ( g0_RT[38] * g0_RT[3] );
    keq[216] = ( g0_RT[14] * g0_RT[30] ) / ( g0_RT[39] * g0_RT[2] );
    keq[217] = ( g0_RT[1] * g0_RT[46] ) / ( g0_RT[39] * g0_RT[4] );
    keq[218] = ( g0_RT[40] * g0_RT[4] ) / ( g0_RT[39] * g0_RT[5] );
    keq[219] = ( g0_RT[46] * g0_RT[2] ) / ( g0_RT[39] * g0_RT[3] );
    keq[220] = ( g0_RT[1] * g0_RT[40] ) / ( g0_RT[39] * g0_RT[0] );
    keq[221] = ( g0_RT[14] * g0_RT[35] ) / ( g0_RT[46] * g0_RT[2] );
    keq[222] = ( g0_RT[14] * g0_RT[31] ) / ( g0_RT[1] * g0_RT[46] );
    keq[223] = ( g0_RT[14] * g0_RT[1] * g0_RT[35] ) / ( g0_RT[46] * g0_RT[4] * C0  );
    keq[224] = ( g0_RT[14] * g0_RT[47] ) / ( g0_RT[30] * g0_RT[46] );
    keq[225] = ( g0_RT[15] * g0_RT[35] ) / ( g0_RT[46] * g0_RT[3] );
    keq[226] = ( g0_RT[14] * g0_RT[30] ) / ( g0_RT[46] * C0  );
    keq[227] = ( g0_RT[14] * g0_RT[37] ) / ( g0_RT[46] * g0_RT[35] );
    keq[228] = ( g0_RT[15] * g0_RT[47] ) / ( g0_RT[46] * g0_RT[35] );
    keq[229] = ( g0_RT[39] * g0_RT[1] ) / ( g0_RT[40] * C0  );
    keq[230] = ( g0_RT[1] * g0_RT[46] ) / ( g0_RT[40] * g0_RT[2] );
    keq[231] = ( g0_RT[14] * g0_RT[31] ) / ( g0_RT[40] * g0_RT[2] );
    keq[232] = ( g0_RT[39] * g0_RT[4] ) / ( g0_RT[40] * g0_RT[2] );
    keq[233] = ( g0_RT[1] * g0_RT[44] ) / ( g0_RT[40] * g0_RT[4] );
    keq[234] = ( g0_RT[1] * g0_RT[45] ) / ( g0_RT[40] * g0_RT[4] );
    keq[235] = ( g0_RT[14] * g0_RT[32] ) / ( g0_RT[40] * g0_RT[4] );
    keq[236] =  C0 * ( g0_RT[41] ) / ( g0_RT[1] * g0_RT[40] );
    keq[237] = ( g0_RT[10] * g0_RT[47] ) / ( g0_RT[41] * g0_RT[30] );
    keq[238] = ( g0_RT[39] * g0_RT[30] ) / ( g0_RT[8] * g0_RT[47] );
    keq[239] = ( g0_RT[40] * g0_RT[30] ) / ( g0_RT[9] * g0_RT[47] );
    keq[240] =  C0 * ( g0_RT[42] ) / ( g0_RT[9] * g0_RT[47] );
    keq[241] = ( g0_RT[40] * g0_RT[31] ) / ( g0_RT[10] * g0_RT[47] );
    keq[242] = ( g0_RT[40] * g0_RT[31] ) / ( g0_RT[11] * g0_RT[47] );
    keq[243] = ( g0_RT[39] * g0_RT[2] ) / ( g0_RT[8] * g0_RT[35] );
    keq[244] = ( g0_RT[14] * g0_RT[30] ) / ( g0_RT[8] * g0_RT[35] );
    keq[245] = ( g0_RT[40] * g0_RT[2] ) / ( g0_RT[9] * g0_RT[35] );
    keq[246] = ( g0_RT[1] * g0_RT[46] ) / ( g0_RT[9] * g0_RT[35] );
    keq[247] = ( g0_RT[16] * g0_RT[30] ) / ( g0_RT[9] * g0_RT[35] );
    keq[248] = ( g0_RT[1] * g0_RT[45] ) / ( g0_RT[10] * g0_RT[35] );
    keq[249] = ( g0_RT[40] * g0_RT[4] ) / ( g0_RT[10] * g0_RT[35] );
    keq[250] = ( g0_RT[1] * g0_RT[43] ) / ( g0_RT[10] * g0_RT[35] );
    keq[251] = ( g0_RT[1] * g0_RT[45] ) / ( g0_RT[11] * g0_RT[35] );
    keq[252] = ( g0_RT[40] * g0_RT[4] ) / ( g0_RT[11] * g0_RT[35] );
    keq[253] = ( g0_RT[1] * g0_RT[43] ) / ( g0_RT[11] * g0_RT[35] );
    keq[254] = ( g0_RT[5] * g0_RT[40] ) / ( g0_RT[12] * g0_RT[35] );
    keq[255] = ( g0_RT[41] * g0_RT[4] ) / ( g0_RT[12] * g0_RT[35] );
    keq[256] = ( g0_RT[14] * g0_RT[1] * g0_RT[47] ) / ( g0_RT[42] * g0_RT[2] * C0  );
    keq[257] = ( g0_RT[40] * g0_RT[35] ) / ( g0_RT[42] * g0_RT[2] );
    keq[258] = ( g0_RT[16] * g0_RT[47] * g0_RT[2] ) / ( g0_RT[42] * g0_RT[3] * C0  );
    keq[259] = ( g0_RT[1] * g0_RT[16] * g0_RT[47] ) / ( g0_RT[42] * g0_RT[4] * C0  );
    keq[260] = ( g0_RT[10] * g0_RT[47] ) / ( g0_RT[1] * g0_RT[42] );
    keq[261] = ( g0_RT[15] * g0_RT[31] ) / ( g0_RT[45] * g0_RT[2] );
    keq[262] = ( g0_RT[14] * g0_RT[38] ) / ( g0_RT[45] * g0_RT[2] );
    keq[263] = ( g0_RT[46] * g0_RT[4] ) / ( g0_RT[45] * g0_RT[2] );
    keq[264] = ( g0_RT[14] * g0_RT[32] ) / ( g0_RT[1] * g0_RT[45] );
    keq[265] = ( g0_RT[0] * g0_RT[46] ) / ( g0_RT[1] * g0_RT[45] );
    keq[266] = ( g0_RT[5] * g0_RT[46] ) / ( g0_RT[45] * g0_RT[4] );
    keq[267] = ( g0_RT[15] * g0_RT[32] ) / ( g0_RT[45] * g0_RT[4] );
    keq[268] = ( g0_RT[14] * g0_RT[31] ) / ( g0_RT[45] * C0  );
    keq[269] = ( g0_RT[1] * g0_RT[45] ) / ( g0_RT[1] * g0_RT[43] );
    keq[270] = ( g0_RT[40] * g0_RT[4] ) / ( g0_RT[1] * g0_RT[43] );
    keq[271] = ( g0_RT[14] * g0_RT[32] ) / ( g0_RT[1] * g0_RT[43] );
    keq[272] = ( g0_RT[1] * g0_RT[45] ) / ( g0_RT[1] * g0_RT[44] );
    keq[273] = ( g0_RT[14] * g0_RT[43] ) / ( g0_RT[27] * g0_RT[35] );
    keq[274] = ( g0_RT[1] * g0_RT[41] ) / ( g0_RT[12] * g0_RT[30] );
    keq[275] = ( g0_RT[0] * g0_RT[40] ) / ( g0_RT[12] * g0_RT[30] );
    keq[276] = ( g0_RT[0] * g0_RT[32] ) / ( g0_RT[1] * g0_RT[33] );
    keq[277] = ( g0_RT[5] * g0_RT[32] ) / ( g0_RT[33] * g0_RT[4] );
    keq[278] = ( g0_RT[32] * g0_RT[4] ) / ( g0_RT[33] * g0_RT[2] );
    keq[279] = ( g0_RT[14] * g0_RT[38] ) / ( g0_RT[15] * g0_RT[31] );
    keq[280] = ( g0_RT[46] * g0_RT[35] ) / ( g0_RT[39] * g0_RT[36] );
    keq[281] = ( g0_RT[15] * g0_RT[37] ) / ( g0_RT[46] * g0_RT[36] );
    keq[282] = ( g0_RT[14] * g0_RT[35] ) / ( g0_RT[15] * g0_RT[30] );
    keq[284] = ( g0_RT[51] * g0_RT[1] ) / ( g0_RT[24] * g0_RT[2] );
    keq[285] = ( g0_RT[52] * g0_RT[1] ) / ( g0_RT[25] * g0_RT[2] );
    keq[286] = ( g0_RT[5] * g0_RT[3] ) / ( g0_RT[6] * g0_RT[4] );
    keq[288] =  C0 * ( g0_RT[12] ) / ( g0_RT[9] * g0_RT[0] );
    keq[290] = ( g0_RT[17] * g0_RT[2] ) / ( g0_RT[10] * g0_RT[3] );
    keq[293] = ( g0_RT[51] * g0_RT[2] ) / ( g0_RT[23] * g0_RT[3] );
    keq[294] = ( g0_RT[22] * g0_RT[6] ) / ( g0_RT[23] * g0_RT[3] );
    keq[295] = ( g0_RT[51] * g0_RT[4] ) / ( g0_RT[52] * g0_RT[2] );
    keq[298] = ( g0_RT[51] * g0_RT[0] ) / ( g0_RT[52] * g0_RT[1] );
    keq[303] =  C0 * ( g0_RT[51] ) / ( g0_RT[28] * g0_RT[1] );
    keq[307] = ( g0_RT[12] * g0_RT[16] ) / ( g0_RT[51] * g0_RT[1] );
    keq[308] = ( g0_RT[28] * g0_RT[0] ) / ( g0_RT[51] * g0_RT[1] );
    keq[309] = ( g0_RT[28] * g0_RT[5] ) / ( g0_RT[51] * g0_RT[4] );
    keq[310] = ( g0_RT[18] * g0_RT[16] ) / ( g0_RT[51] * g0_RT[4] );
    keq[311] =  C0 * ( g0_RT[50] ) / ( g0_RT[25] * g0_RT[12] );
    keq[312] = ( g0_RT[49] * g0_RT[4] ) / ( g0_RT[50] * g0_RT[2] );
    keq[313] = ( g0_RT[49] * g0_RT[0] ) / ( g0_RT[50] * g0_RT[1] );
    keq[314] = ( g0_RT[49] * g0_RT[5] ) / ( g0_RT[50] * g0_RT[4] );
    keq[315] = ( g0_RT[50] * g0_RT[6] ) / ( g0_RT[49] * g0_RT[7] );
    keq[316] = ( g0_RT[49] * g0_RT[13] ) / ( g0_RT[50] * g0_RT[12] );
    keq[317] =  C0 * ( g0_RT[49] ) / ( g0_RT[24] * g0_RT[12] );
    keq[318] = ( g0_RT[25] * g0_RT[17] ) / ( g0_RT[49] * g0_RT[2] );
    keq[319] =  C0 * ( g0_RT[50] ) / ( g0_RT[49] * g0_RT[1] );
    keq[320] = ( g0_RT[25] * g0_RT[12] ) / ( g0_RT[49] * g0_RT[1] );
    keq[321] = ( g0_RT[25] * g0_RT[18] ) / ( g0_RT[49] * g0_RT[4] );
    keq[322] = ( g0_RT[50] * g0_RT[3] ) / ( g0_RT[49] * g0_RT[6] );
    keq[324] = ( g0_RT[25] * g0_RT[25] ) / ( g0_RT[49] * g0_RT[12] );

  };

  void getTemperature(double& h, double& Told, std::vector<double>& y, double& T) {

    double            tol   = 1.0e-06;
    int               niter = 500;
    double              RT;
    double              To;
    double              Tp;
    double              dT = 1.0;
    double              fy = h;
    double              jy = 0.0;
    std::vector<double> hk(kk, 0.0);
    std::vector<double> cpk(kk, 0.0);

    To = Told;
    Tp = Told;

    for(int it = 0; it < niter; ++it) { 

      RT = GasConstant * To;
      getSpecificHeats_R(To, cpk);
      getEnthalpies_RT(To, hk);
      for(int k = 0; k < kk; ++k) { hk[k]  = RT * hk[k] / mw[k]; }
      for(int k = 0; k < kk; ++k) { cpk[k] = GasConstant * cpk[k] / mw[k]; }
      for(int k = 0; k < kk; ++k) { fy -=  hk[k] * y[k]; }
      for(int k = 0; k < kk; ++k) { jy -= cpk[k] * y[k]; }
      dT  = -fy / jy;
      Tp  =  To + dT;
      To  =  Tp;

      if( (std::fabs(dT) < tol)) {
	T = Tp;
	return;
      }

      fy = h;
      jy = 0.0;

    }

    T = Tp;

  };

  void getFalloffRates(double& T, std::vector<double>& C, std::vector<double>& kfwd) {

    int TROE = 110;
    double lpr;
    double cc;
    double nn;
    double f1;
    double logT = std::log(T);
    double invT = 1.0/T;
    std::vector<double> khi(ff,0.0);
    std::vector<double> klo(ff,0.0);
    std::vector<double> pr(ff,0.0);
    std::vector<double> work(ff,0.0);
    std::vector<int> falloffType(ff,100);

    khi[0] = std::exp(1.670588e+01 - 1.200179e+03 * invT);
    klo[0] = std::exp(2.021577e+01 - 1.509659e+03 * invT);

    khi[1] = std::exp(2.712020e+01);
    klo[1] = std::exp(4.609092e+01 - 2.760000e+00 * logT - 8.051513e+02 * invT);

    khi[2] = std::exp(3.026291e+01 - 5.340000e-01 * logT - 2.697257e+02 * invT);
    klo[2] = std::exp(6.313297e+01 - 4.760000e+00 * logT - 1.227856e+03 * invT);

    khi[3] = std::exp(2.080944e+01 + 4.800000e-01 * logT + 1.308371e+02 * invT);
    klo[3] = std::exp(4.235075e+01 - 2.570000e+00 * logT - 2.138683e+02 * invT);

    khi[4] = std::exp(2.010708e+01 + 4.540000e-01 * logT - 1.811590e+03 * invT);
    klo[4] = std::exp(6.010623e+01 - 4.820000e+00 * logT - 3.286024e+03 * invT);

    khi[5] = std::exp(2.010708e+01 + 4.540000e-01 * logT - 1.308371e+03 * invT);
    klo[5] = std::exp(5.605050e+01 - 4.800000e+00 * logT - 2.797901e+03 * invT);

    khi[6] = std::exp(2.077681e+01 + 5.000000e-01 * logT - 4.327688e+01 * invT);
    klo[6] = std::exp(5.903710e+01 - 4.650000e+00 * logT - 2.556355e+03 * invT);

    khi[7] = std::exp(2.161116e+01 + 5.150000e-01 * logT - 2.516098e+01 * invT);
    klo[7] = std::exp(8.212949e+01 - 7.440000e+00 * logT - 7.085331e+03 * invT);

    khi[8] = std::exp(3.223619e+01 - 1.000000e+00 * logT);
    klo[8] = std::exp(6.349155e+01 - 4.800000e+00 * logT - 9.561172e+02 * invT);

    khi[9] = std::exp(2.244603e+01 - 1.207727e+03 * invT);
    klo[9] = std::exp(7.962289e+01 - 7.270000e+00 * logT - 3.633245e+03 * invT);

    khi[10] = std::exp(2.252827e+01 + 2.700000e-01 * logT - 1.409015e+02 * invT);
    klo[10] = std::exp(5.559851e+01 - 3.860000e+00 * logT - 1.670689e+03 * invT);

    khi[11] = std::exp(2.010708e+01 + 4.540000e-01 * logT - 9.158596e+02 * invT);
    klo[11] = std::exp(8.238224e+01 - 7.620000e+00 * logT - 3.507440e+03 * invT);

    khi[12] = std::exp(3.388677e+01 - 9.900000e-01 * logT - 7.950869e+02 * invT);
    klo[12] = std::exp(8.127861e+01 - 7.080000e+00 * logT - 3.364023e+03 * invT);

    khi[13] = std::exp(1.066896e+01 + 1.500000e+00 * logT - 4.005628e+04 * invT);
    klo[13] = std::exp(4.997763e+01 - 3.420000e+00 * logT - 4.244657e+04 * invT);

    khi[14] = std::exp(2.502733e+01 - 3.700000e-01 * logT);
    klo[14] = std::exp(2.846393e+01 - 9.000000e-01 * logT + 8.554733e+02 * invT);

    khi[15] = std::exp(3.556482e+01 - 1.430000e+00 * logT - 6.692820e+02 * invT);
    klo[15] = std::exp(7.046385e+01 - 5.920000e+00 * logT - 1.580109e+03 * invT);

    khi[16] = std::exp(2.463529e+01);
    klo[16] = std::exp(5.164641e+01 - 3.740000e+00 * logT - 9.742331e+02 * invT);

    khi[17] = std::exp(2.051254e+01 + 5.000000e-01 * logT - 2.269520e+03 * invT);
    klo[17] = std::exp(6.315934e+01 - 5.110000e+00 * logT - 3.570343e+03 * invT);

    khi[18] = std::exp(3.380897e+01 - 1.160000e+00 * logT - 5.761864e+02 * invT);
    klo[18] = std::exp(7.431399e+01 - 6.360000e+00 * logT - 2.536227e+03 * invT);

    khi[19] = std::exp(3.184611e+01 - 1.180000e+00 * logT - 3.291056e+02 * invT);
    klo[19] = std::exp(8.181425e+01 - 7.030000e+00 * logT - 1.389892e+03 * invT);

    khi[20] = std::exp(2.971046e+01 + 4.400000e-01 * logT - 4.366436e+04 * invT);
    klo[20] = std::exp(1.109815e+02 - 9.300000e+00 * logT - 4.921487e+04 * invT);

    khi[21] = std::exp(2.509398e+01 - 2.819036e+04 * invT);
    klo[21] = std::exp(2.718004e+01 - 2.850236e+04 * invT);

    khi[22] = std::exp(2.421977e+01);
    klo[22] = std::exp(4.638817e+01 - 3.400000e+00 * logT - 9.561172e+02 * invT);

    khi[23] = std::exp(2.185467e+01 + 1.500000e-01 * logT);
    klo[23] = std::exp(4.401148e+01 - 3.160000e+00 * logT - 3.723825e+02 * invT);

    khi[24] = std::exp(2.140130e+01 + 4.300000e-01 * logT + 1.861912e+02 * invT);
    klo[24] = std::exp(4.532189e+01 - 2.800000e+00 * logT - 2.968995e+02 * invT);

    khi[25] = std::exp(2.000275e+01 + 4.220000e-01 * logT + 8.831503e+02 * invT);
    klo[25] = std::exp(8.290499e+01 - 7.630000e+00 * logT - 1.939408e+03 * invT);

    khi[26] = std::exp(2.296716e+01);
    klo[26] = std::exp(1.575727e+02 - 1.682000e+01 * logT - 6.574564e+03 * invT);

    khi[27] = std::exp(7.843849e+00 + 1.600000e+00 * logT - 2.868352e+03 * invT);
    klo[27] = std::exp(1.323460e+02 - 1.460000e+01 * logT - 9.143499e+03 * invT);

    khi[28] = std::exp(2.431039e+01);
    klo[28] = std::exp(1.281283e+02 - 1.354500e+01 * logT - 5.715065e+03 * invT);

    pr[0] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 6.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 3.50e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 5.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[1] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[2] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 3.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[3] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[4] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[5] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[6] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[7] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[8] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[9] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[10] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[11] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[12] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[13] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[14] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[15] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[16] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[17] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[18] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[19] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[20] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[21] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 6.25e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[22] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[23] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 1.00e+00 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[24] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[25] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[26] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[27] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 
    pr[28] = 2.00e+00 * C[0] + 1.00e+00 * C[1] + 1.00e+00 * C[2] + 1.00e+00 * C[3] + 1.00e+00 * C[4] + 6.00e+00 * C[5] + 1.00e+00 * C[6] + 1.00e+00 * C[7] + 1.00e+00 * C[8] + 1.00e+00 * C[9] + 1.00e+00 * C[10] + 1.00e+00 * C[11] + 1.00e+00 * C[12] + 2.00e+00 * C[13] + 1.50e+00 * C[14] + 2.00e+00 * C[15] + 1.00e+00 * C[16] + 1.00e+00 * C[17] + 1.00e+00 * C[18] + 1.00e+00 * C[19] + 1.00e+00 * C[20] + 1.00e+00 * C[21] + 1.00e+00 * C[22] + 1.00e+00 * C[23] + 1.00e+00 * C[24] + 1.00e+00 * C[25] + 3.00e+00 * C[26] + 1.00e+00 * C[27] + 1.00e+00 * C[28] + 1.00e+00 * C[29] + 1.00e+00 * C[30] + 1.00e+00 * C[31] + 1.00e+00 * C[32] + 1.00e+00 * C[33] + 1.00e+00 * C[34] + 1.00e+00 * C[35] + 1.00e+00 * C[36] + 1.00e+00 * C[37] + 1.00e+00 * C[38] + 1.00e+00 * C[39] + 1.00e+00 * C[40] + 1.00e+00 * C[41] + 1.00e+00 * C[42] + 1.00e+00 * C[43] + 1.00e+00 * C[44] + 1.00e+00 * C[45] + 1.00e+00 * C[46] + 1.00e+00 * C[47] + 7.00e-01 * C[48] + 1.00e+00 * C[49] + 1.00e+00 * C[50] + 1.00e+00 * C[51] + 1.00e+00 * C[52]; 

    for(int i = 0; i < ff; ++i) { pr[i] *= (klo[i] / khi[i]); }

    falloffType[0] = 100;
    falloffType[1] = 110;
    falloffType[2] = 110;
    falloffType[3] = 110;
    falloffType[4] = 110;
    falloffType[5] = 110;
    falloffType[6] = 110;
    falloffType[7] = 110;
    falloffType[8] = 110;
    falloffType[9] = 110;
    falloffType[10] = 110;
    falloffType[11] = 110;
    falloffType[12] = 110;
    falloffType[13] = 110;
    falloffType[14] = 110;
    falloffType[15] = 110;
    falloffType[16] = 110;
    falloffType[17] = 110;
    falloffType[18] = 110;
    falloffType[19] = 110;
    falloffType[20] = 110;
    falloffType[21] = 100;
    falloffType[22] = 100;
    falloffType[23] = 110;
    falloffType[24] = 110;
    falloffType[25] = 110;
    falloffType[26] = 110;
    falloffType[27] = 110;
    falloffType[28] = 110;

    work[0] = 1.0;
    work[1] = (1.0 - 5.620000e-01) * std::exp( - 1.098901e-02 * T) + 5.620000e-01 * std::exp( - 1.713502e-04 * T) + std::exp( - 8.552000e+03 * invT);
    work[2] = (1.0 - 7.830000e-01) * std::exp( - 1.351351e-02 * T) + 7.830000e-01 * std::exp( - 3.400204e-04 * T) + std::exp( - 6.964000e+03 * invT);
    work[3] = (1.0 - 7.824000e-01) * std::exp( - 3.690037e-03 * T) + 7.824000e-01 * std::exp( - 3.629764e-04 * T) + std::exp( - 6.570000e+03 * invT);
    work[4] = (1.0 - 7.187000e-01) * std::exp( - 9.708738e-03 * T) + 7.187000e-01 * std::exp( - 7.745933e-04 * T) + std::exp( - 4.160000e+03 * invT);
    work[5] = (1.0 - 7.580000e-01) * std::exp( - 1.063830e-02 * T) + 7.580000e-01 * std::exp( - 6.430868e-04 * T) + std::exp( - 4.200000e+03 * invT);
    work[6] = (1.0 - 6.000000e-01) * std::exp( - 1.000000e-02 * T) + 6.000000e-01 * std::exp( - 1.111111e-05 * T) + std::exp( - 1.000000e+04 * invT);
    work[7] = (1.0 - 7.000000e-01) * std::exp( - 1.000000e-02 * T) + 7.000000e-01 * std::exp( - 1.111111e-05 * T) + std::exp( - 1.000000e+04 * invT);
    work[8] = (1.0 - 6.464000e-01) * std::exp( - 7.575758e-03 * T) + 6.464000e-01 * std::exp( - 7.604563e-04 * T) + std::exp( - 5.566000e+03 * invT);
    work[9] = (1.0 - 7.507000e-01) * std::exp( - 1.015228e-02 * T) + 7.507000e-01 * std::exp( - 7.680492e-04 * T) + std::exp( - 4.167000e+03 * invT);
    work[10] = (1.0 - 7.820000e-01) * std::exp( - 4.819277e-03 * T) + 7.820000e-01 * std::exp( - 3.755163e-04 * T) + std::exp( - 6.095000e+03 * invT);
    work[11] = (1.0 - 9.753000e-01) * std::exp( - 4.761905e-03 * T) + 9.753000e-01 * std::exp( - 1.016260e-03 * T) + std::exp( - 4.374000e+03 * invT);
    work[12] = (1.0 - 8.422000e-01) * std::exp( - 8.000000e-03 * T) + 8.422000e-01 * std::exp( - 4.506534e-04 * T) + std::exp( - 6.882000e+03 * invT);
    work[13] = (1.0 - 9.320000e-01) * std::exp( - 5.076142e-03 * T) + 9.320000e-01 * std::exp( - 6.493506e-04 * T) + std::exp( - 1.030000e+04 * invT);
    work[14] = (1.0 - 7.346000e-01) * std::exp( - 1.063830e-02 * T) + 7.346000e-01 * std::exp( - 5.694761e-04 * T) + std::exp( - 5.182000e+03 * invT);
    work[15] = (1.0 - 4.120000e-01) * std::exp( - 5.128205e-03 * T) + 4.120000e-01 * std::exp( - 1.694915e-04 * T) + std::exp( - 6.394000e+03 * invT);
    work[16] = (1.0 - 5.757000e-01) * std::exp( - 4.219409e-03 * T) + 5.757000e-01 * std::exp( - 6.053269e-04 * T) + std::exp( - 5.069000e+03 * invT);
    work[17] = (1.0 - 5.907000e-01) * std::exp( - 3.636364e-03 * T) + 5.907000e-01 * std::exp( - 8.156607e-04 * T) + std::exp( - 5.185000e+03 * invT);
    work[18] = (1.0 - 6.027000e-01) * std::exp( - 4.807692e-03 * T) + 6.027000e-01 * std::exp( - 2.549720e-04 * T) + std::exp( - 1.018000e+04 * invT);
    work[19] = (1.0 - 6.190000e-01) * std::exp( - 1.366120e-02 * T) + 6.190000e-01 * std::exp( - 8.474576e-04 * T) + std::exp( - 9.999000e+03 * invT);
    work[20] = (1.0 - 7.345000e-01) * std::exp( - 5.555556e-03 * T) + 7.345000e-01 * std::exp( - 9.661836e-04 * T) + std::exp( - 5.417000e+03 * invT);
    work[21] = 1.0;
    work[22] = 1.0;
    work[23] = (1.0 - 6.670000e-01) * std::exp( - 4.255319e-03 * T) + 6.670000e-01 * std::exp( - 4.723666e-04 * T) + std::exp( - 4.536000e+03 * invT);
    work[24] = (1.0 - 5.780000e-01) * std::exp( - 8.196721e-03 * T) + 5.780000e-01 * std::exp( - 3.944773e-04 * T) + std::exp( - 9.365000e+03 * invT);
    work[25] = (1.0 - 4.650000e-01) * std::exp( - 4.975124e-03 * T) + 4.650000e-01 * std::exp( - 5.640158e-04 * T) + std::exp( - 5.333000e+03 * invT);
    work[26] = (1.0 - 1.527000e-01) * std::exp( - 3.436426e-03 * T) + 1.527000e-01 * std::exp( - 3.646973e-04 * T) + std::exp( - 7.748000e+03 * invT);
    work[27] = (1.0 - 1.894000e-01) * std::exp( - 3.610108e-03 * T) + 1.894000e-01 * std::exp( - 1.143118e-04 * T) + std::exp( - 7.891000e+03 * invT);
    work[28] = (1.0 - 3.150000e-01) * std::exp( - 2.710027e-03 * T) + 3.150000e-01 * std::exp( - 3.044140e-04 * T) + std::exp( - 6.667000e+03 * invT);

    for(int i = 0; i < ff; ++i) {
      lpr =  std::log10(pr[i]);
      if(falloffType[i] == TROE) {
        cc      = -0.40 - 0.67 * std::log10(work[i]);
        nn      =  0.75 - 1.27 * std::log10(work[i]);
        f1      =  (lpr + cc)/(nn - 0.14 * (lpr + cc));
        work[i] =  std::log10(work[i])/(1 + f1 * f1);
        work[i] =  std::pow(10.0, work[i]);
      }
      work[i] =  (pr[i] * work[i])/(1 + pr[i]);
    }

    kfwd[11] = khi[0] * work[0];
    kfwd[49] = khi[1] * work[1];
    kfwd[51] = khi[2] * work[2];
    kfwd[53] = khi[3] * work[3];
    kfwd[55] = khi[4] * work[4];
    kfwd[56] = khi[5] * work[5];
    kfwd[58] = khi[6] * work[6];
    kfwd[62] = khi[7] * work[7];
    kfwd[69] = khi[8] * work[8];
    kfwd[70] = khi[9] * work[9];
    kfwd[71] = khi[10] * work[10];
    kfwd[73] = khi[11] * work[11];
    kfwd[75] = khi[12] * work[12];
    kfwd[82] = khi[13] * work[13];
    kfwd[84] = khi[14] * work[14];
    kfwd[94] = khi[15] * work[15];
    kfwd[130] = khi[16] * work[16];
    kfwd[139] = khi[17] * work[17];
    kfwd[146] = khi[18] * work[18];
    kfwd[157] = khi[19] * work[19];
    kfwd[173] = khi[20] * work[20];
    kfwd[184] = khi[21] * work[21];
    kfwd[236] = khi[22] * work[22];
    kfwd[240] = khi[23] * work[23];
    kfwd[288] = khi[24] * work[24];
    kfwd[303] = khi[25] * work[25];
    kfwd[311] = khi[26] * work[26];
    kfwd[317] = khi[27] * work[27];
    kfwd[319] = khi[28] * work[28];

  };

  void getRateCoefficients(double& T, std::vector<double>& C, std::vector<double>& kfwd, std::vector<double>& krev) {

    double logT = std::log(T);
    double invT = 1.0/T;
    std::vector<double> keq(ii,0.0);

    getEquilibriumConstants(T, keq);

    kfwd[0] = std::exp(2.551076e+01 - 1.000000e+00 * logT);
    kfwd[1] = std::exp(2.693787e+01 - 1.000000e+00 * logT);
    kfwd[2] = std::exp(3.655840e+00 + 2.700000e+00 * logT - 3.150154e+03 * invT);
    kfwd[3] = std::exp(2.371900e+01);
    kfwd[4] = std::exp(9.172639e+00 + 2.000000e+00 * logT - 2.012878e+03 * invT);
    kfwd[5] = std::exp(2.476632e+01);
    kfwd[6] = std::exp(2.510529e+01);
    kfwd[7] = std::exp(2.343132e+01);
    kfwd[8] = std::exp(2.343132e+01);
    kfwd[9] = std::exp(2.464722e+01);
    kfwd[10] = std::exp(1.383531e+01 + 1.500000e+00 * logT - 4.327688e+03 * invT);
    kfwd[12] = std::exp(2.412446e+01);
    kfwd[13] = std::exp(2.412446e+01);
    kfwd[14] = std::exp(2.438683e+01 - 1.781397e+03 * invT);
    kfwd[15] = std::exp(2.302585e+01);
    kfwd[16] = std::exp(2.302585e+01);
    kfwd[17] = std::exp(5.961005e+00 + 2.500000e+00 * logT - 1.559981e+03 * invT);
    kfwd[18] = std::exp(4.867534e+00 + 2.500000e+00 * logT - 2.516098e+03 * invT);
    kfwd[19] = std::exp(2.463529e+01);
    kfwd[20] = std::exp(9.510445e+00 + 2.000000e+00 * logT - 9.561172e+02 * invT);
    kfwd[21] = std::exp(3.836742e+01 - 1.410000e+00 * logT - 1.456821e+04 * invT);
    kfwd[22] = std::exp(8.845057e+00 + 2.000000e+00 * logT - 9.561172e+02 * invT);
    kfwd[23] = std::exp(2.412446e+01);
    kfwd[24] = std::exp(9.433484e+00 + 1.830000e+00 * logT - 1.107083e+02 * invT);
    kfwd[25] = std::exp(2.383233e+01);
    kfwd[26] = std::exp(1.140534e+01 + 1.920000e+00 * logT - 2.863319e+03 * invT);
    kfwd[27] = std::exp(2.532844e+01);
    kfwd[28] = std::exp(2.302585e+01 - 4.025757e+03 * invT);
    kfwd[29] = std::exp(2.128288e+01 - 6.793464e+02 * invT);
    kfwd[30] = std::exp(2.163956e+01 - 2.405390e+04 * invT);
    kfwd[31] = std::exp(2.532844e+01 - 2.012878e+04 * invT);
    kfwd[32] = std::exp(2.866064e+01 - 8.600000e-01 * logT);
    kfwd[33] = std::exp(3.066597e+01 - 1.240000e+00 * logT);
    kfwd[34] = std::exp(3.005228e+01 - 7.600000e-01 * logT);
    kfwd[35] = std::exp(3.088912e+01 - 1.240000e+00 * logT);
    kfwd[36] = std::exp(2.727435e+01 - 8.000000e-01 * logT);
    kfwd[37] = std::exp(3.090817e+01 - 6.707000e-01 * logT - 8.575365e+03 * invT);
    kfwd[38] = std::exp(2.763102e+01 - 1.000000e+00 * logT);
    kfwd[39] = std::exp(2.522308e+01 - 6.000000e-01 * logT);
    kfwd[40] = std::exp(3.172537e+01 - 1.250000e+00 * logT);
    kfwd[41] = std::exp(3.394094e+01 - 2.000000e+00 * logT);
    kfwd[42] = std::exp(3.762982e+01 - 2.000000e+00 * logT);
    kfwd[43] = std::exp(2.210203e+01 - 3.376603e+02 * invT);
    kfwd[44] = std::exp(2.452547e+01 - 5.374385e+02 * invT);
    kfwd[45] = std::exp(2.515408e+01 - 3.195444e+02 * invT);
    kfwd[46] = std::exp(9.400961e+00 + 2.000000e+00 * logT - 2.616742e+03 * invT);
    kfwd[47] = std::exp(2.302585e+01 - 1.811590e+03 * invT);
    kfwd[48] = std::exp(2.582921e+01);
    kfwd[50] = std::exp(2.412446e+01);
    kfwd[52] = std::exp(1.340000e+01 + 1.620000e+00 * logT - 5.454900e+03 * invT);
    kfwd[54] = std::exp(2.501919e+01);
    kfwd[57] = std::exp(1.095780e+01 + 1.900000e+00 * logT - 1.379828e+03 * invT);
    kfwd[59] = std::exp(2.371900e+01);
    kfwd[60] = std::exp(1.892146e+01 + 6.500000e-01 * logT + 1.429144e+02 * invT);
    kfwd[61] = std::exp(2.421369e+01 - 9.000000e-02 * logT - 3.069639e+02 * invT);
    kfwd[63] = std::exp(1.063345e+01 + 1.630000e+00 * logT - 9.681944e+02 * invT);
    kfwd[64] = std::exp(2.371900e+01);
    kfwd[65] = std::exp(2.112873e+01 + 5.000000e-01 * logT + 5.535415e+01 * invT);
    kfwd[66] = std::exp(2.629161e+01 - 2.300000e-01 * logT - 5.384449e+02 * invT);
    kfwd[67] = std::exp(9.740969e+00 + 2.100000e+00 * logT - 2.450679e+03 * invT);
    kfwd[68] = std::exp(8.342840e+00 + 2.100000e+00 * logT - 2.450679e+03 * invT);
    kfwd[72] = std::exp(2.412446e+01);
    kfwd[74] = std::exp(7.189168e+00 + 2.530000e+00 * logT - 6.159407e+03 * invT);
    kfwd[76] = std::exp(2.141641e+01);
    kfwd[77] = std::exp(1.165269e+01 + 1.900000e+00 * logT - 3.789243e+03 * invT);
    kfwd[78] = std::exp(2.532844e+01);
    kfwd[79] = std::exp(2.463529e+01 - 4.025757e+03 * invT);
    kfwd[80] = std::exp(2.314807e+01 - 1.725037e+03 * invT);
    kfwd[81] = std::exp(2.302585e+01);
    kfwd[83] = std::exp(1.228303e+01 + 1.510000e+00 * logT - 1.726043e+03 * invT);
    kfwd[85] = std::exp(3.575151e+00 + 2.400000e+00 * logT + 1.061793e+03 * invT);
    kfwd[86] = std::exp(2.339741e+01 + 2.516098e+02 * invT);
    kfwd[87] = std::exp(2.141641e+01 - 2.148748e+02 * invT);
    kfwd[88] = std::exp(3.506940e+01 - 1.479969e+04 * invT);
    kfwd[89] = std::exp(2.463529e+01);
    kfwd[90] = std::exp(2.412446e+01);
    kfwd[91] = std::exp(2.371900e+01);
    kfwd[92] = std::exp(9.332558e+00 + 2.000000e+00 * logT - 1.509659e+03 * invT);
    kfwd[93] = std::exp(2.412446e+01);
    kfwd[95] = std::exp(1.093311e+01 + 1.600000e+00 * logT - 2.727450e+03 * invT);
    kfwd[96] = std::exp(3.409872e+01 - 1.340000e+00 * logT - 7.130621e+02 * invT);
    kfwd[97] = std::exp(1.151293e+01 + 1.600000e+00 * logT - 1.570045e+03 * invT);
    kfwd[98] = std::exp(1.077059e+01 + 1.228000e+00 * logT - 3.522537e+01 * invT);
    kfwd[99] = std::exp(2.463529e+01);
    kfwd[100] = std::exp(1.504807e+01 + 1.180000e+00 * logT + 2.249391e+02 * invT);
    kfwd[101] = std::exp(2.233270e+01);
    kfwd[102] = std::exp(2.233270e+01);
    kfwd[103] = std::exp(7.272398e+00 + 2.000000e+00 * logT + 4.227044e+02 * invT);
    kfwd[104] = std::exp(8.748305e+00 + 2.000000e+00 * logT - 7.548293e+02 * invT);
    kfwd[105] = std::exp(2.371900e+01);
    kfwd[106] = std::exp(-1.533877e+01 + 4.500000e+00 * logT + 5.032196e+02 * invT);
    kfwd[107] = std::exp(6.222576e+00 + 2.300000e+00 * logT - 6.793464e+03 * invT);
    kfwd[108] = std::exp(1.042525e+01 + 2.000000e+00 * logT - 7.045074e+03 * invT);
    kfwd[109] = std::exp(-1.454325e+01 + 4.000000e+00 * logT + 1.006439e+03 * invT);
    kfwd[110] = std::exp(2.233270e+01);
    kfwd[111] = std::exp(8.188689e+00 + 2.000000e+00 * logT - 1.258049e+03 * invT);
    kfwd[112] = std::exp(8.171882e+00 + 2.120000e+00 * logT - 4.378010e+02 * invT);
    kfwd[113] = std::exp(2.273817e+01 - 1.006439e+03 * invT);
    kfwd[114] = std::exp(1.868305e+01 + 8.202479e+02 * invT);
    kfwd[115] = std::exp(2.676352e+01 - 6.038635e+03 * invT);
    kfwd[116] = std::exp(2.371900e+01);
    kfwd[117] = std::exp(2.072327e+01);
    kfwd[118] = std::exp(2.435557e+01);
    kfwd[119] = std::exp(2.573390e+01 - 1.187598e+04 * invT);
    kfwd[120] = std::exp(8.630522e+00 + 2.000000e+00 * logT - 6.038635e+03 * invT);
    kfwd[121] = std::exp(2.478371e+01 - 2.898545e+02 * invT);
    kfwd[122] = std::exp(2.463529e+01);
    kfwd[123] = std::exp(2.463529e+01);
    kfwd[124] = std::exp(2.492945e+01);
    kfwd[125] = std::exp(2.540540e+01 - 1.565013e+03 * invT);
    kfwd[126] = std::exp(2.246548e+01 + 3.799308e+02 * invT);
    kfwd[127] = std::exp(2.441215e+01);
    kfwd[128] = std::exp(2.412446e+01);
    kfwd[129] = std::exp(2.481761e+01);
    kfwd[131] = std::exp(2.597029e+01 - 7.946843e+03 * invT);
    kfwd[132] = std::exp(2.527292e+01 + 2.591581e+02 * invT);
    kfwd[133] = std::exp(2.463529e+01);
    kfwd[134] = std::exp(2.233270e+01 - 7.548293e+02 * invT);
    kfwd[135] = std::exp(6.214608e+00 + 2.000000e+00 * logT - 3.638277e+03 * invT);
    kfwd[136] = std::exp(2.810102e+01 - 6.010454e+03 * invT);
    kfwd[137] = std::exp(2.441215e+01);
    kfwd[138] = std::exp(7.807917e+00 + 2.000000e+00 * logT - 4.161626e+03 * invT);
    kfwd[140] = std::exp(2.412446e+01);
    kfwd[141] = std::exp(2.343132e+01 - 3.019317e+02 * invT);
    kfwd[142] = std::exp(2.292049e+01 - 3.019317e+02 * invT);
    kfwd[143] = std::exp(2.405547e+01);
    kfwd[144] = std::exp(2.320817e+01);
    kfwd[145] = std::exp(2.497176e+01);
    kfwd[147] = std::exp(2.412446e+01);
    kfwd[148] = std::exp(2.320817e+01 + 2.868352e+02 * invT);
    kfwd[149] = std::exp(2.349585e+01 + 2.868352e+02 * invT);
    kfwd[150] = std::exp(2.292049e+01);
    kfwd[151] = std::exp(2.266918e+01);
    kfwd[152] = std::exp(2.336232e+01);
    kfwd[153] = std::exp(2.441215e+01 + 2.767708e+02 * invT);
    kfwd[154] = std::exp(2.429561e+01 - 1.533813e+04 * invT);
    kfwd[155] = std::exp(2.156051e+01 - 1.022291e+04 * invT);
    kfwd[156] = std::exp(3.198673e+00 + 2.470000e+00 * logT - 2.606677e+03 * invT);
    kfwd[158] = std::exp(2.264605e+01 + 1.000000e-01 * logT - 5.334127e+03 * invT);
    kfwd[159] = std::exp(2.399966e+01);
    kfwd[160] = std::exp(1.199965e+00 + 2.810000e+00 * logT - 2.948867e+03 * invT);
    kfwd[161] = std::exp(1.030895e+01 + 1.500000e+00 * logT - 5.002002e+03 * invT);
    kfwd[162] = std::exp(9.210340e+00 + 1.500000e+00 * logT - 5.002002e+03 * invT);
    kfwd[163] = std::exp(5.424950e+00 + 2.000000e+00 * logT - 4.629620e+03 * invT);
    kfwd[164] = std::exp(8.722580e+00 + 1.740000e+00 * logT - 5.258644e+03 * invT);
    kfwd[165] = std::exp(3.494424e+01 - 1.000000e+00 * logT - 8.554733e+03 * invT);
    kfwd[166] = std::exp(3.286213e+01 - 1.000000e+00 * logT - 8.554733e+03 * invT);
    kfwd[167] = std::exp(2.332224e+01 - 2.012878e+02 * invT);
    kfwd[168] = std::exp(2.361364e+01 - 4.528976e+02 * invT);
    kfwd[169] = std::exp(-3.538741e+01 + 7.600000e+00 * logT + 1.776365e+03 * invT);
    kfwd[170] = std::exp(2.302585e+01 + 3.799308e+02 * invT);
    kfwd[171] = std::exp(1.785505e+01 + 9.000000e-01 * logT - 1.002917e+03 * invT);
    kfwd[172] = std::exp(3.145531e+01 - 1.390000e+00 * logT - 5.107679e+02 * invT);
    kfwd[174] = std::exp(2.054891e+01 - 1.949976e+03 * invT);
    kfwd[175] = std::exp(2.188642e+01 - 4.297495e+02 * invT);
    kfwd[176] = std::exp(2.302585e+01);
    kfwd[177] = std::exp(2.401910e+01 - 1.786429e+02 * invT);
    kfwd[178] = std::exp(1.601274e+01 + 1.000000e+00 * logT - 3.270927e+03 * invT);
    kfwd[179] = std::exp(2.423779e+01 - 1.937395e+02 * invT);
    kfwd[180] = std::exp(2.105974e+01 - 5.439803e+03 * invT);
    kfwd[181] = std::exp(2.409056e+01 - 1.164953e+04 * invT);
    kfwd[182] = std::exp(2.668169e+01 - 9.500785e+03 * invT);
    kfwd[183] = std::exp(2.141641e+01 - 1.059780e+04 * invT);
    kfwd[185] = std::exp(2.146995e+01 + 2.415454e+02 * invT);
    kfwd[186] = std::exp(3.229446e+01 - 1.410000e+00 * logT);
    kfwd[187] = std::exp(2.208424e+01 + 1.207727e+02 * invT);
    kfwd[188] = std::exp(2.560607e+01 - 1.811590e+02 * invT);
    kfwd[189] = std::exp(2.441215e+01);
    kfwd[190] = std::exp(2.418900e+01 - 1.660625e+02 * invT);
    kfwd[191] = std::exp(2.371900e+01);
    kfwd[192] = std::exp(1.450866e+01 + 1.200000e+00 * logT);
    kfwd[193] = std::exp(6.133398e+00 + 2.000000e+00 * logT - 3.270927e+03 * invT);
    kfwd[194] = std::exp(7.154615e+00 + 1.500000e+00 * logT - 5.032196e+01 * invT);
    kfwd[195] = std::exp(2.343132e+01);
    kfwd[196] = std::exp(2.371900e+01 - 6.969591e+03 * invT);
    kfwd[197] = std::exp(2.379596e+01 - 2.300000e-01 * logT);
    kfwd[198] = std::exp(2.662316e+01 - 4.500000e-01 * logT);
    kfwd[199] = std::exp(2.182188e+01);
    kfwd[200] = std::exp(2.438683e+01);
    kfwd[201] = std::exp(2.441215e+01 - 1.836751e+03 * invT);
    kfwd[202] = std::exp(1.140756e+01 + 1.500000e+00 * logT + 2.314810e+02 * invT);
    kfwd[203] = std::exp(1.961460e+01);
    kfwd[204] = std::exp(2.559080e+01 - 1.100000e-01 * logT - 2.506033e+03 * invT);
    kfwd[205] = std::exp(2.233270e+01);
    kfwd[206] = std::exp(2.394214e+01);
    kfwd[207] = std::exp(2.497176e+01);
    kfwd[208] = std::exp(2.463529e+01);
    kfwd[209] = std::exp(2.371900e+01);
    kfwd[210] = std::exp(2.394214e+01);
    kfwd[211] = std::exp(3.143323e+01 - 1.320000e+00 * logT - 3.723825e+02 * invT);
    kfwd[212] = std::exp(2.394214e+01);
    kfwd[213] = std::exp(2.061791e+01 + 7.200000e-01 * logT - 3.321249e+02 * invT);
    kfwd[214] = std::exp(9.472705e+00 + 1.900000e+00 * logT + 4.780586e+02 * invT);
    kfwd[215] = std::exp(2.302585e+01 - 6.541854e+03 * invT);
    kfwd[216] = std::exp(2.506707e+01);
    kfwd[217] = std::exp(2.441215e+01);
    kfwd[218] = std::exp(2.280271e+01 - 3.754018e+03 * invT);
    kfwd[219] = std::exp(2.253809e+01 + 2.214166e+02 * invT);
    kfwd[220] = std::exp(5.686975e+00 + 2.450000e+00 * logT - 1.127212e+03 * invT);
    kfwd[221] = std::exp(2.388027e+01);
    kfwd[222] = std::exp(2.471225e+01);
    kfwd[223] = std::exp(2.163956e+01);
    kfwd[224] = std::exp(2.371900e+01);
    kfwd[225] = std::exp(2.141641e+01 - 1.006439e+04 * invT);
    kfwd[226] = std::exp(2.645984e+01 - 2.719902e+04 * invT);
    kfwd[227] = std::exp(3.287805e+01 - 1.520000e+00 * logT - 3.723825e+02 * invT);
    kfwd[228] = std::exp(3.587378e+01 - 2.000000e+00 * logT - 4.025757e+02 * invT);
    kfwd[229] = std::exp(5.990643e+01 - 3.300000e+00 * logT - 6.370760e+04 * invT);
    kfwd[230] = std::exp(3.010621e+00 + 2.640000e+00 * logT - 2.506033e+03 * invT);
    kfwd[231] = std::exp(1.623341e+00 + 2.640000e+00 * logT - 2.506033e+03 * invT);
    kfwd[232] = std::exp(1.517905e+01 + 1.580000e+00 * logT - 1.338564e+04 * invT);
    kfwd[233] = std::exp(7.003065e+00 + 2.030000e+00 * logT - 6.728046e+03 * invT);
    kfwd[234] = std::exp(1.481605e+00 + 2.260000e+00 * logT - 3.220605e+03 * invT);
    kfwd[235] = std::exp(-1.832581e+00 + 2.560000e+00 * logT - 4.528976e+03 * invT);
    kfwd[237] = std::exp(2.481761e+01 - 2.012878e+02 * invT);
    kfwd[238] = std::exp(2.486640e+01 - 2.315816e+04 * invT);
    kfwd[239] = std::exp(1.495334e+01 + 8.800000e-01 * logT - 1.012981e+04 * invT);
    kfwd[241] = std::exp(2.302585e+01 - 3.723825e+04 * invT);
    kfwd[242] = std::exp(1.842068e+01 - 3.270927e+04 * invT);
    kfwd[243] = std::exp(2.366770e+01);
    kfwd[244] = std::exp(2.409056e+01);
    kfwd[245] = std::exp(2.443684e+01);
    kfwd[246] = std::exp(2.350828e+01);
    kfwd[247] = std::exp(2.392601e+01);
    kfwd[248] = std::exp(3.336759e+01 - 1.380000e+00 * logT - 6.390888e+02 * invT);
    kfwd[249] = std::exp(2.639315e+01 - 6.900000e-01 * logT - 3.824469e+02 * invT);
    kfwd[250] = std::exp(2.436085e+01 - 3.600000e-01 * logT - 2.918673e+02 * invT);
    kfwd[251] = std::exp(3.336759e+01 - 1.380000e+00 * logT - 6.390888e+02 * invT);
    kfwd[252] = std::exp(2.639315e+01 - 6.900000e-01 * logT - 3.824469e+02 * invT);
    kfwd[253] = std::exp(2.436085e+01 - 3.600000e-01 * logT - 2.918673e+02 * invT);
    kfwd[254] = std::exp(2.528761e+01 - 1.449272e+04 * invT);
    kfwd[255] = std::exp(2.072327e+01 - 1.094503e+04 * invT);
    kfwd[256] = std::exp(2.381431e+01);
    kfwd[257] = std::exp(2.141641e+01);
    kfwd[258] = std::exp(2.320817e+01);
    kfwd[259] = std::exp(2.320817e+01);
    kfwd[260] = std::exp(2.532844e+01);
    kfwd[261] = std::exp(1.149272e+01 + 1.410000e+00 * logT - 4.277366e+03 * invT);
    kfwd[262] = std::exp(1.191839e+01 + 1.570000e+00 * logT - 2.214166e+04 * invT);
    kfwd[263] = std::exp(7.696213e+00 + 2.110000e+00 * logT - 5.736703e+03 * invT);
    kfwd[264] = std::exp(1.002127e+01 + 1.700000e+00 * logT - 1.912234e+03 * invT);
    kfwd[265] = std::exp(4.653960e+00 + 2.500000e+00 * logT - 6.692820e+03 * invT);
    kfwd[266] = std::exp(1.040426e+01 + 1.500000e+00 * logT - 1.811590e+03 * invT);
    kfwd[267] = std::exp(8.101678e+00 + 1.500000e+00 * logT - 1.811590e+03 * invT);
    kfwd[268] = std::exp(3.009912e+01 - 4.263276e+04 * invT);
    kfwd[269] = std::exp(2.837296e+01 - 6.900000e-01 * logT - 1.434176e+03 * invT);
    kfwd[270] = std::exp(1.941393e+01 + 1.800000e-01 * logT - 1.066825e+03 * invT);
    kfwd[271] = std::exp(2.585906e+01 - 7.500000e-01 * logT - 1.454305e+03 * invT);
    kfwd[272] = std::exp(9.903488e+00 + 2.000000e+00 * logT - 1.006439e+03 * invT);
    kfwd[273] = std::exp(2.292049e+01);
    kfwd[274] = std::exp(2.713672e+01 - 3.100000e-01 * logT - 1.459337e+02 * invT);
    kfwd[275] = std::exp(2.203160e+01 + 1.500000e-01 * logT + 4.528976e+01 * invT);
    kfwd[276] = std::exp(6.291569e+00 + 2.400000e+00 * logT - 4.989422e+03 * invT);
    kfwd[277] = std::exp(1.081978e+01 + 1.600000e+00 * logT - 4.805747e+02 * invT);
    kfwd[278] = std::exp(9.148465e+00 + 1.940000e+00 * logT - 3.250798e+03 * invT);
    kfwd[279] = std::exp(2.302585e+01 - 7.221201e+03 * invT);
    kfwd[280] = std::exp(2.944910e+01 - 7.520000e-01 * logT - 1.736107e+02 * invT);
    kfwd[281] = std::exp(2.190192e+01 + 3.547698e+02 * invT);
    kfwd[282] = std::exp(2.182188e+01 - 5.686381e+03 * invT);
    kfwd[283] = std::exp(2.424076e+01);
    kfwd[284] = std::exp(8.809863e+00 + 1.830000e+00 * logT - 1.107083e+02 * invT);
    kfwd[285] = std::exp(2.542010e+01);
    kfwd[286] = std::exp(2.924046e+01 - 8.720795e+03 * invT);
    kfwd[287] = std::exp(1.589495e+01 + 5.000000e-01 * logT + 8.831503e+02 * invT);
    kfwd[289] = std::exp(2.248112e+01 - 7.548293e+02 * invT);
    kfwd[290] = std::exp(2.159873e+01 - 7.548293e+02 * invT);
    kfwd[291] = std::exp(2.602158e+01 - 5.529880e+03 * invT);
    kfwd[292] = std::exp(1.803796e+01 + 2.500000e-01 * logT + 4.705103e+02 * invT);
    kfwd[293] = std::exp(1.952924e+01 + 2.900000e-01 * logT - 5.535415e+00 * invT);
    kfwd[294] = std::exp(7.198184e+00 + 1.610000e+00 * logT + 1.932363e+02 * invT);
    kfwd[295] = std::exp(2.248800e+01 - 9.098210e+02 * invT);
    kfwd[296] = std::exp(2.248800e+01 - 9.098210e+02 * invT);
    kfwd[297] = std::exp(2.412779e+01 - 1.970105e+04 * invT);
    kfwd[298] = std::exp(1.453335e+01 + 1.160000e+00 * logT - 1.210243e+03 * invT);
    kfwd[299] = std::exp(1.453335e+01 + 1.160000e+00 * logT - 1.210243e+03 * invT);
    kfwd[300] = std::exp(1.696953e+01 + 7.300000e-01 * logT + 5.600834e+02 * invT);
    kfwd[301] = std::exp(2.182521e+01 - 5.999887e+03 * invT);
    kfwd[302] = std::exp(7.908387e+00 + 1.770000e+00 * logT - 2.979060e+03 * invT);
    kfwd[304] = std::exp(2.573390e+01);
    kfwd[305] = std::exp(1.671142e+01);
    kfwd[306] = std::exp(1.697251e+01);
    kfwd[307] = std::exp(2.381431e+01);
    kfwd[308] = std::exp(2.312116e+01);
    kfwd[309] = std::exp(2.320817e+01);
    kfwd[310] = std::exp(2.412779e+01);
    kfwd[312] = std::exp(5.262690e+00 + 2.680000e+00 * logT - 1.869964e+03 * invT);
    kfwd[313] = std::exp(7.185387e+00 + 2.540000e+00 * logT - 3.399751e+03 * invT);
    kfwd[314] = std::exp(1.036091e+01 + 1.800000e+00 * logT - 4.700071e+02 * invT);
    kfwd[315] = std::exp(-9.728611e-01 + 2.720000e+00 * logT - 7.548293e+02 * invT);
    kfwd[316] = std::exp(-7.009788e+00 + 3.650000e+00 * logT - 3.600033e+03 * invT);
    kfwd[318] = std::exp(2.529177e+01);
    kfwd[320] = std::exp(8.308938e+00 + 2.190000e+00 * logT - 4.478654e+02 * invT);
    kfwd[321] = std::exp(2.390548e+01);
    kfwd[322] = std::exp(1.705419e+01 + 2.550000e-01 * logT + 4.745360e+02 * invT);
    kfwd[323] = std::exp(2.390548e+01);
    kfwd[324] = std::exp(2.368182e+01 - 3.200000e-01 * logT);

    kfwd[0] *= ( 2.400e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.540e+01 * C[5] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.750e+00 * C[14] + 3.600e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 8.300e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[1] *= ( 2.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 6.000e+00 * C[5] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.500e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 7.000e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[32] *= ( 1.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[4] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 1.000e+00 * C[13] + 7.500e-01 * C[14] + 1.500e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 1.500e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[38] *= (  + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.000e+00 * C[14] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 6.300e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[42] *= ( 7.300e-01 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 3.650e+00 * C[5] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.000e+00 * C[14] + 1.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 3.800e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[166] *= ( 2.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.500e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 1.000e+00 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[186] *= ( 2.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 6.000e+00 * C[5] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.500e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 7.000e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[204] *= ( 2.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 6.000e+00 * C[5] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.500e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 7.000e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[211] *= ( 2.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 6.000e+00 * C[5] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.500e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 7.000e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[226] *= ( 2.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 6.000e+00 * C[5] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.500e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 7.000e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[229] *= ( 2.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 6.000e+00 * C[5] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.500e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 7.000e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 
    kfwd[268] *= ( 2.000e+00 * C[0] + 1.000e+00 * C[1] + 1.000e+00 * C[2] + 1.000e+00 * C[3] + 1.000e+00 * C[4] + 6.000e+00 * C[5] + 1.000e+00 * C[6] + 1.000e+00 * C[7] + 1.000e+00 * C[8] + 1.000e+00 * C[9] + 1.000e+00 * C[10] + 1.000e+00 * C[11] + 1.000e+00 * C[12] + 2.000e+00 * C[13] + 1.500e+00 * C[14] + 2.000e+00 * C[15] + 1.000e+00 * C[16] + 1.000e+00 * C[17] + 1.000e+00 * C[18] + 1.000e+00 * C[19] + 1.000e+00 * C[20] + 1.000e+00 * C[21] + 1.000e+00 * C[22] + 1.000e+00 * C[23] + 1.000e+00 * C[24] + 1.000e+00 * C[25] + 3.000e+00 * C[26] + 1.000e+00 * C[27] + 1.000e+00 * C[28] + 1.000e+00 * C[29] + 1.000e+00 * C[30] + 1.000e+00 * C[31] + 1.000e+00 * C[32] + 1.000e+00 * C[33] + 1.000e+00 * C[34] + 1.000e+00 * C[35] + 1.000e+00 * C[36] + 1.000e+00 * C[37] + 1.000e+00 * C[38] + 1.000e+00 * C[39] + 1.000e+00 * C[40] + 1.000e+00 * C[41] + 1.000e+00 * C[42] + 1.000e+00 * C[43] + 1.000e+00 * C[44] + 1.000e+00 * C[45] + 1.000e+00 * C[46] + 1.000e+00 * C[47] + 7.000e-01 * C[48] + 1.000e+00 * C[49] + 1.000e+00 * C[50] + 1.000e+00 * C[51] + 1.000e+00 * C[52] ); 

    getFalloffRates(T, C, kfwd);

    for(int i = 0; i < ii; ++i) { krev[i] = kfwd[i] * keq[i]; }

  };

  void getNetRatesOfProgress(double& T, std::vector<double>& C, std::vector<double>& Rnet) {

    std::vector<double> kfwd(ii,0.0);
    std::vector<double> krev(ii,0.0);
    std::vector<double> Rfwd(ii,0.0);
    std::vector<double> Rrev(ii,0.0);

    getRateCoefficients(T, C, kfwd, krev);

    Rfwd[0] = kfwd[0] * C[2] * C[2];
    Rrev[0] = krev[0] * C[3];

    Rfwd[1] = kfwd[1] * C[1] * C[2];
    Rrev[1] = krev[1] * C[4];

    Rfwd[2] = kfwd[2] * C[0] * C[2];
    Rrev[2] = krev[2] * C[1] * C[4];

    Rfwd[3] = kfwd[3] * C[6] * C[2];
    Rrev[3] = krev[3] * C[3] * C[4];

    Rfwd[4] = kfwd[4] * C[7] * C[2];
    Rrev[4] = krev[4] * C[6] * C[4];

    Rfwd[5] = kfwd[5] * C[9] * C[2];
    Rrev[5] = krev[5] * C[14] * C[1];

    Rfwd[6] = kfwd[6] * C[10] * C[2];
    Rrev[6] = krev[6] * C[1] * C[16];

    Rfwd[7] = kfwd[7] * C[11] * C[2];
    Rrev[7] = krev[7] * C[14] * C[0];

    Rfwd[8] = kfwd[8] * C[11] * C[2];
    Rrev[8] = krev[8] * C[1] * C[16];

    Rfwd[9] = kfwd[9] * C[12] * C[2];
    Rrev[9] = krev[9] * C[17] * C[1];

    Rfwd[10] = kfwd[10] * C[13] * C[2];
    Rrev[10] = krev[10] * C[12] * C[4];

    Rfwd[11] = kfwd[11] * C[14] * C[2];
    Rrev[11] = krev[11] * C[15];

    Rfwd[12] = kfwd[12] * C[16] * C[2];
    Rrev[12] = krev[12] * C[14] * C[4];

    Rfwd[13] = kfwd[13] * C[16] * C[2];
    Rrev[13] = krev[13] * C[15] * C[1];

    Rfwd[14] = kfwd[14] * C[17] * C[2];
    Rrev[14] = krev[14] * C[16] * C[4];

    Rfwd[15] = kfwd[15] * C[18] * C[2];
    Rrev[15] = krev[15] * C[17] * C[4];

    Rfwd[16] = kfwd[16] * C[19] * C[2];
    Rrev[16] = krev[16] * C[17] * C[4];

    Rfwd[17] = kfwd[17] * C[20] * C[2];
    Rrev[17] = krev[17] * C[18] * C[4];

    Rfwd[18] = kfwd[18] * C[20] * C[2];
    Rrev[18] = krev[18] * C[19] * C[4];

    Rfwd[19] = kfwd[19] * C[21] * C[2];
    Rrev[19] = krev[19] * C[9] * C[14];

    Rfwd[20] = kfwd[20] * C[22] * C[2];
    Rrev[20] = krev[20] * C[1] * C[27];

    Rfwd[21] = kfwd[21] * C[22] * C[2];
    Rrev[21] = krev[21] * C[21] * C[4];

    Rfwd[22] = kfwd[22] * C[22] * C[2];
    Rrev[22] = krev[22] * C[10] * C[14];

    Rfwd[23] = kfwd[23] * C[23] * C[2];
    Rrev[23] = krev[23] * C[28] * C[1];

    Rfwd[24] = kfwd[24] * C[24] * C[2];
    Rrev[24] = krev[24] * C[12] * C[16];

    Rfwd[25] = kfwd[25] * C[25] * C[2];
    Rrev[25] = krev[25] * C[17] * C[12];

    Rfwd[26] = kfwd[26] * C[26] * C[2];
    Rrev[26] = krev[26] * C[25] * C[4];

    Rfwd[27] = kfwd[27] * C[27] * C[2];
    Rrev[27] = krev[27] * C[14] * C[14] * C[1];

    Rfwd[28] = kfwd[28] * C[28] * C[2];
    Rrev[28] = krev[28] * C[27] * C[4];

    Rfwd[29] = kfwd[29] * C[28] * C[2];
    Rrev[29] = krev[29] * C[10] * C[15];

    Rfwd[30] = kfwd[30] * C[14] * C[3];
    Rrev[30] = krev[30] * C[15] * C[2];

    Rfwd[31] = kfwd[31] * C[17] * C[3];
    Rrev[31] = krev[31] * C[16] * C[6];

    Rfwd[32] = kfwd[32] * C[1] * C[3];
    Rrev[32] = krev[32] * C[6];

    Rfwd[33] = kfwd[33] * C[1] * C[3] * C[3];
    Rrev[33] = krev[33] * C[6] * C[3];

    Rfwd[34] = kfwd[34] * C[1] * C[5] * C[3];
    Rrev[34] = krev[34] * C[5] * C[6];

    Rfwd[35] = kfwd[35] * C[1] * C[47] * C[3];
    Rrev[35] = krev[35] * C[6] * C[47];

    Rfwd[36] = kfwd[36] * C[48] * C[1] * C[3];
    Rrev[36] = krev[36] * C[48] * C[6];

    Rfwd[37] = kfwd[37] * C[1] * C[3];
    Rrev[37] = krev[37] * C[2] * C[4];

    Rfwd[38] = kfwd[38] * C[1] * C[1];
    Rrev[38] = krev[38] * C[0];

    Rfwd[39] = kfwd[39] * C[1] * C[1] * C[0];
    Rrev[39] = krev[39] * C[0] * C[0];

    Rfwd[40] = kfwd[40] * C[1] * C[1] * C[5];
    Rrev[40] = krev[40] * C[0] * C[5];

    Rfwd[41] = kfwd[41] * C[15] * C[1] * C[1];
    Rrev[41] = krev[41] * C[15] * C[0];

    Rfwd[42] = kfwd[42] * C[1] * C[4];
    Rrev[42] = krev[42] * C[5];

    Rfwd[43] = kfwd[43] * C[1] * C[6];
    Rrev[43] = krev[43] * C[5] * C[2];

    Rfwd[44] = kfwd[44] * C[1] * C[6];
    Rrev[44] = krev[44] * C[0] * C[3];

    Rfwd[45] = kfwd[45] * C[1] * C[6];
    Rrev[45] = krev[45] * C[4] * C[4];

    Rfwd[46] = kfwd[46] * C[1] * C[7];
    Rrev[46] = krev[46] * C[0] * C[6];

    Rfwd[47] = kfwd[47] * C[1] * C[7];
    Rrev[47] = krev[47] * C[5] * C[4];

    Rfwd[48] = kfwd[48] * C[9] * C[1];
    Rrev[48] = krev[48] * C[8] * C[0];

    Rfwd[49] = kfwd[49] * C[10] * C[1];
    Rrev[49] = krev[49] * C[12];

    Rfwd[50] = kfwd[50] * C[11] * C[1];
    Rrev[50] = krev[50] * C[9] * C[0];

    Rfwd[51] = kfwd[51] * C[12] * C[1];
    Rrev[51] = krev[51] * C[13];

    Rfwd[52] = kfwd[52] * C[13] * C[1];
    Rrev[52] = krev[52] * C[12] * C[0];

    Rfwd[53] = kfwd[53] * C[1] * C[16];
    Rrev[53] = krev[53] * C[17];

    Rfwd[54] = kfwd[54] * C[1] * C[16];
    Rrev[54] = krev[54] * C[14] * C[0];

    Rfwd[55] = kfwd[55] * C[17] * C[1];
    Rrev[55] = krev[55] * C[18];

    Rfwd[56] = kfwd[56] * C[17] * C[1];
    Rrev[56] = krev[56] * C[19];

    Rfwd[57] = kfwd[57] * C[17] * C[1];
    Rrev[57] = krev[57] * C[0] * C[16];

    Rfwd[58] = kfwd[58] * C[18] * C[1];
    Rrev[58] = krev[58] * C[20];

    Rfwd[59] = kfwd[59] * C[18] * C[1];
    Rrev[59] = krev[59] * C[17] * C[0];

    Rfwd[60] = kfwd[60] * C[18] * C[1];
    Rrev[60] = krev[60] * C[12] * C[4];

    Rfwd[61] = kfwd[61] * C[18] * C[1];
    Rrev[61] = krev[61] * C[11] * C[5];

    Rfwd[62] = kfwd[62] * C[19] * C[1];
    Rrev[62] = krev[62] * C[20];

    Rfwd[63] = kfwd[63] * C[19] * C[1];
    Rrev[63] = krev[63] * C[18] * C[1];

    Rfwd[64] = kfwd[64] * C[19] * C[1];
    Rrev[64] = krev[64] * C[17] * C[0];

    Rfwd[65] = kfwd[65] * C[19] * C[1];
    Rrev[65] = krev[65] * C[12] * C[4];

    Rfwd[66] = kfwd[66] * C[19] * C[1];
    Rrev[66] = krev[66] * C[11] * C[5];

    Rfwd[67] = kfwd[67] * C[20] * C[1];
    Rrev[67] = krev[67] * C[18] * C[0];

    Rfwd[68] = kfwd[68] * C[20] * C[1];
    Rrev[68] = krev[68] * C[19] * C[0];

    Rfwd[69] = kfwd[69] * C[21] * C[1];
    Rrev[69] = krev[69] * C[22];

    Rfwd[70] = kfwd[70] * C[22] * C[1];
    Rrev[70] = krev[70] * C[23];

    Rfwd[71] = kfwd[71] * C[23] * C[1];
    Rrev[71] = krev[71] * C[24];

    Rfwd[72] = kfwd[72] * C[23] * C[1];
    Rrev[72] = krev[72] * C[22] * C[0];

    Rfwd[73] = kfwd[73] * C[24] * C[1];
    Rrev[73] = krev[73] * C[25];

    Rfwd[74] = kfwd[74] * C[24] * C[1];
    Rrev[74] = krev[74] * C[23] * C[0];

    Rfwd[75] = kfwd[75] * C[25] * C[1];
    Rrev[75] = krev[75] * C[26];

    Rfwd[76] = kfwd[76] * C[25] * C[1];
    Rrev[76] = krev[76] * C[24] * C[0];

    Rfwd[77] = kfwd[77] * C[26] * C[1];
    Rrev[77] = krev[77] * C[25] * C[0];

    Rfwd[78] = kfwd[78] * C[1] * C[27];
    Rrev[78] = krev[78] * C[11] * C[14];

    Rfwd[79] = kfwd[79] * C[28] * C[1];
    Rrev[79] = krev[79] * C[0] * C[27];

    Rfwd[80] = kfwd[80] * C[28] * C[1];
    Rrev[80] = krev[80] * C[12] * C[14];

    Rfwd[81] = kfwd[81] * C[1] * C[29];
    Rrev[81] = krev[81] * C[28] * C[1];

    Rfwd[82] = kfwd[82] * C[14] * C[0];
    Rrev[82] = krev[82] * C[17];

    Rfwd[83] = kfwd[83] * C[0] * C[4];
    Rrev[83] = krev[83] * C[1] * C[5];

    Rfwd[84] = kfwd[84] * C[4] * C[4];
    Rrev[84] = krev[84] * C[7];

    Rfwd[85] = kfwd[85] * C[4] * C[4];
    Rrev[85] = krev[85] * C[5] * C[2];

    Rfwd[86] = kfwd[86] * C[6] * C[4];
    Rrev[86] = krev[86] * C[5] * C[3];

    Rfwd[87] = kfwd[87] * C[7] * C[4];
    Rrev[87] = krev[87] * C[5] * C[6];

    Rfwd[88] = kfwd[88] * C[7] * C[4];
    Rrev[88] = krev[88] * C[5] * C[6];

    Rfwd[89] = kfwd[89] * C[8] * C[4];
    Rrev[89] = krev[89] * C[14] * C[1];

    Rfwd[90] = kfwd[90] * C[9] * C[4];
    Rrev[90] = krev[90] * C[1] * C[16];

    Rfwd[91] = kfwd[91] * C[10] * C[4];
    Rrev[91] = krev[91] * C[17] * C[1];

    Rfwd[92] = kfwd[92] * C[10] * C[4];
    Rrev[92] = krev[92] * C[9] * C[5];

    Rfwd[93] = kfwd[93] * C[11] * C[4];
    Rrev[93] = krev[93] * C[17] * C[1];

    Rfwd[94] = kfwd[94] * C[12] * C[4];
    Rrev[94] = krev[94] * C[20];

    Rfwd[95] = kfwd[95] * C[12] * C[4];
    Rrev[95] = krev[95] * C[10] * C[5];

    Rfwd[96] = kfwd[96] * C[12] * C[4];
    Rrev[96] = krev[96] * C[11] * C[5];

    Rfwd[97] = kfwd[97] * C[13] * C[4];
    Rrev[97] = krev[97] * C[12] * C[5];

    Rfwd[98] = kfwd[98] * C[14] * C[4];
    Rrev[98] = krev[98] * C[15] * C[1];

    Rfwd[99] = kfwd[99] * C[16] * C[4];
    Rrev[99] = krev[99] * C[14] * C[5];

    Rfwd[100] = kfwd[100] * C[17] * C[4];
    Rrev[100] = krev[100] * C[5] * C[16];

    Rfwd[101] = kfwd[101] * C[18] * C[4];
    Rrev[101] = krev[101] * C[17] * C[5];

    Rfwd[102] = kfwd[102] * C[19] * C[4];
    Rrev[102] = krev[102] * C[17] * C[5];

    Rfwd[103] = kfwd[103] * C[20] * C[4];
    Rrev[103] = krev[103] * C[18] * C[5];

    Rfwd[104] = kfwd[104] * C[20] * C[4];
    Rrev[104] = krev[104] * C[19] * C[5];

    Rfwd[105] = kfwd[105] * C[21] * C[4];
    Rrev[105] = krev[105] * C[1] * C[27];

    Rfwd[106] = kfwd[106] * C[22] * C[4];
    Rrev[106] = krev[106] * C[28] * C[1];

    Rfwd[107] = kfwd[107] * C[22] * C[4];
    Rrev[107] = krev[107] * C[1] * C[29];

    Rfwd[108] = kfwd[108] * C[22] * C[4];
    Rrev[108] = krev[108] * C[21] * C[5];

    Rfwd[109] = kfwd[109] * C[22] * C[4];
    Rrev[109] = krev[109] * C[12] * C[14];

    Rfwd[110] = kfwd[110] * C[23] * C[4];
    Rrev[110] = krev[110] * C[22] * C[5];

    Rfwd[111] = kfwd[111] * C[24] * C[4];
    Rrev[111] = krev[111] * C[23] * C[5];

    Rfwd[112] = kfwd[112] * C[26] * C[4];
    Rrev[112] = krev[112] * C[25] * C[5];

    Rfwd[113] = kfwd[113] * C[28] * C[4];
    Rrev[113] = krev[113] * C[5] * C[27];

    Rfwd[114] = kfwd[114] * C[6] * C[6];
    Rrev[114] = krev[114] * C[7] * C[3];

    Rfwd[115] = kfwd[115] * C[6] * C[6];
    Rrev[115] = krev[115] * C[7] * C[3];

    Rfwd[116] = kfwd[116] * C[10] * C[6];
    Rrev[116] = krev[116] * C[17] * C[4];

    Rfwd[117] = kfwd[117] * C[12] * C[6];
    Rrev[117] = krev[117] * C[13] * C[3];

    Rfwd[118] = kfwd[118] * C[12] * C[6];
    Rrev[118] = krev[118] * C[19] * C[4];

    Rfwd[119] = kfwd[119] * C[14] * C[6];
    Rrev[119] = krev[119] * C[15] * C[4];

    Rfwd[120] = kfwd[120] * C[17] * C[6];
    Rrev[120] = krev[120] * C[7] * C[16];

    Rfwd[121] = kfwd[121] * C[8] * C[3];
    Rrev[121] = krev[121] * C[14] * C[2];

    Rfwd[122] = kfwd[122] * C[8] * C[10];
    Rrev[122] = krev[122] * C[21] * C[1];

    Rfwd[123] = kfwd[123] * C[8] * C[12];
    Rrev[123] = krev[123] * C[22] * C[1];

    Rfwd[124] = kfwd[124] * C[9] * C[3];
    Rrev[124] = krev[124] * C[16] * C[2];

    Rfwd[125] = kfwd[125] * C[9] * C[0];
    Rrev[125] = krev[125] * C[10] * C[1];

    Rfwd[126] = kfwd[126] * C[9] * C[5];
    Rrev[126] = krev[126] * C[17] * C[1];

    Rfwd[127] = kfwd[127] * C[9] * C[10];
    Rrev[127] = krev[127] * C[22] * C[1];

    Rfwd[128] = kfwd[128] * C[9] * C[12];
    Rrev[128] = krev[128] * C[23] * C[1];

    Rfwd[129] = kfwd[129] * C[9] * C[13];
    Rrev[129] = krev[129] * C[24] * C[1];

    Rfwd[130] = kfwd[130] * C[9] * C[14];
    Rrev[130] = krev[130] * C[27];

    Rfwd[131] = kfwd[131] * C[9] * C[15];
    Rrev[131] = krev[131] * C[14] * C[16];

    Rfwd[132] = kfwd[132] * C[9] * C[17];
    Rrev[132] = krev[132] * C[28] * C[1];

    Rfwd[133] = kfwd[133] * C[9] * C[27];
    Rrev[133] = krev[133] * C[22] * C[14];

    Rfwd[134] = kfwd[134] * C[10] * C[3];

    Rfwd[135] = kfwd[135] * C[10] * C[0];
    Rrev[135] = krev[135] * C[12] * C[1];

    Rfwd[136] = kfwd[136] * C[10] * C[10];
    Rrev[136] = krev[136] * C[22] * C[0];

    Rfwd[137] = kfwd[137] * C[10] * C[12];
    Rrev[137] = krev[137] * C[24] * C[1];

    Rfwd[138] = kfwd[138] * C[10] * C[13];
    Rrev[138] = krev[138] * C[12] * C[12];

    Rfwd[139] = kfwd[139] * C[10] * C[14];
    Rrev[139] = krev[139] * C[28];

    Rfwd[140] = kfwd[140] * C[10] * C[27];
    Rrev[140] = krev[140] * C[23] * C[14];

    Rfwd[141] = kfwd[141] * C[11] * C[47];
    Rrev[141] = krev[141] * C[10] * C[47];

    Rfwd[142] = kfwd[142] * C[48] * C[11];
    Rrev[142] = krev[142] * C[48] * C[10];

    Rfwd[143] = kfwd[143] * C[11] * C[3];
    Rrev[143] = krev[143] * C[14] * C[1] * C[4];

    Rfwd[144] = kfwd[144] * C[11] * C[3];
    Rrev[144] = krev[144] * C[14] * C[5];

    Rfwd[145] = kfwd[145] * C[11] * C[0];
    Rrev[145] = krev[145] * C[12] * C[1];

    Rfwd[146] = kfwd[146] * C[11] * C[5];
    Rrev[146] = krev[146] * C[20];

    Rfwd[147] = kfwd[147] * C[11] * C[5];
    Rrev[147] = krev[147] * C[10] * C[5];

    Rfwd[148] = kfwd[148] * C[11] * C[12];
    Rrev[148] = krev[148] * C[24] * C[1];

    Rfwd[149] = kfwd[149] * C[11] * C[13];
    Rrev[149] = krev[149] * C[12] * C[12];

    Rfwd[150] = kfwd[150] * C[11] * C[14];
    Rrev[150] = krev[150] * C[10] * C[14];

    Rfwd[151] = kfwd[151] * C[11] * C[15];
    Rrev[151] = krev[151] * C[10] * C[15];

    Rfwd[152] = kfwd[152] * C[11] * C[15];
    Rrev[152] = krev[152] * C[17] * C[14];

    Rfwd[153] = kfwd[153] * C[26] * C[11];
    Rrev[153] = krev[153] * C[25] * C[12];

    Rfwd[154] = kfwd[154] * C[12] * C[3];
    Rrev[154] = krev[154] * C[19] * C[2];

    Rfwd[155] = kfwd[155] * C[12] * C[3];
    Rrev[155] = krev[155] * C[17] * C[4];

    Rfwd[156] = kfwd[156] * C[12] * C[7];
    Rrev[156] = krev[156] * C[13] * C[6];

    Rfwd[157] = kfwd[157] * C[12] * C[12];
    Rrev[157] = krev[157] * C[26];

    Rfwd[158] = kfwd[158] * C[12] * C[12];
    Rrev[158] = krev[158] * C[25] * C[1];

    Rfwd[159] = kfwd[159] * C[12] * C[16];
    Rrev[159] = krev[159] * C[13] * C[14];

    Rfwd[160] = kfwd[160] * C[17] * C[12];
    Rrev[160] = krev[160] * C[13] * C[16];

    Rfwd[161] = kfwd[161] * C[12] * C[20];
    Rrev[161] = krev[161] * C[18] * C[13];

    Rfwd[162] = kfwd[162] * C[12] * C[20];
    Rrev[162] = krev[162] * C[19] * C[13];

    Rfwd[163] = kfwd[163] * C[24] * C[12];
    Rrev[163] = krev[163] * C[23] * C[13];

    Rfwd[164] = kfwd[164] * C[26] * C[12];
    Rrev[164] = krev[164] * C[25] * C[13];

    Rfwd[165] = kfwd[165] * C[5] * C[16];
    Rrev[165] = krev[165] * C[14] * C[1] * C[5];

    Rfwd[166] = kfwd[166] * C[16];
    Rrev[166] = krev[166] * C[14] * C[1];

    Rfwd[167] = kfwd[167] * C[16] * C[3];
    Rrev[167] = krev[167] * C[14] * C[6];

    Rfwd[168] = kfwd[168] * C[18] * C[3];
    Rrev[168] = krev[168] * C[17] * C[6];

    Rfwd[169] = kfwd[169] * C[19] * C[3];
    Rrev[169] = krev[169] * C[17] * C[6];

    Rfwd[170] = kfwd[170] * C[21] * C[3];
    Rrev[170] = krev[170] * C[14] * C[16];

    Rfwd[171] = kfwd[171] * C[21] * C[0];
    Rrev[171] = krev[171] * C[22] * C[1];

    Rfwd[172] = kfwd[172] * C[23] * C[3];
    Rrev[172] = krev[172] * C[17] * C[16];

    Rfwd[173] = kfwd[173] * C[24];
    Rrev[173] = krev[173] * C[22] * C[0];

    Rfwd[174] = kfwd[174] * C[25] * C[3];
    Rrev[174] = krev[174] * C[24] * C[6];

    Rfwd[175] = kfwd[175] * C[27] * C[3];
    Rrev[175] = krev[175] * C[14] * C[14] * C[4];

    Rfwd[176] = kfwd[176] * C[27] * C[27];
    Rrev[176] = krev[176] * C[22] * C[14] * C[14];

    Rfwd[177] = kfwd[177] * C[30] * C[35];
    Rrev[177] = krev[177] * C[47] * C[2];

    Rfwd[178] = kfwd[178] * C[30] * C[3];
    Rrev[178] = krev[178] * C[35] * C[2];

    Rfwd[179] = kfwd[179] * C[30] * C[4];
    Rrev[179] = krev[179] * C[1] * C[35];

    Rfwd[180] = kfwd[180] * C[37] * C[2];
    Rrev[180] = krev[180] * C[47] * C[3];

    Rfwd[181] = kfwd[181] * C[37] * C[2];
    Rrev[181] = krev[181] * C[35] * C[35];

    Rfwd[182] = kfwd[182] * C[1] * C[37];
    Rrev[182] = krev[182] * C[47] * C[4];

    Rfwd[183] = kfwd[183] * C[37] * C[4];
    Rrev[183] = krev[183] * C[6] * C[47];

    Rfwd[184] = kfwd[184] * C[37];
    Rrev[184] = krev[184] * C[47] * C[2];

    Rfwd[185] = kfwd[185] * C[6] * C[35];
    Rrev[185] = krev[185] * C[36] * C[4];

    Rfwd[186] = kfwd[186] * C[35] * C[2];
    Rrev[186] = krev[186] * C[36];

    Rfwd[187] = kfwd[187] * C[36] * C[2];
    Rrev[187] = krev[187] * C[35] * C[3];

    Rfwd[188] = kfwd[188] * C[1] * C[36];
    Rrev[188] = krev[188] * C[35] * C[4];

    Rfwd[189] = kfwd[189] * C[31] * C[2];
    Rrev[189] = krev[189] * C[1] * C[35];

    Rfwd[190] = kfwd[190] * C[1] * C[31];
    Rrev[190] = krev[190] * C[0] * C[30];

    Rfwd[191] = kfwd[191] * C[31] * C[4];
    Rrev[191] = krev[191] * C[1] * C[38];

    Rfwd[192] = kfwd[192] * C[31] * C[4];
    Rrev[192] = krev[192] * C[5] * C[30];

    Rfwd[193] = kfwd[193] * C[31] * C[3];
    Rrev[193] = krev[193] * C[38] * C[2];

    Rfwd[194] = kfwd[194] * C[31] * C[3];
    Rrev[194] = krev[194] * C[35] * C[4];

    Rfwd[195] = kfwd[195] * C[30] * C[31];
    Rrev[195] = krev[195] * C[1] * C[47];

    Rfwd[196] = kfwd[196] * C[5] * C[31];
    Rrev[196] = krev[196] * C[0] * C[38];

    Rfwd[197] = kfwd[197] * C[31] * C[35];
    Rrev[197] = krev[197] * C[47] * C[4];

    Rfwd[198] = kfwd[198] * C[31] * C[35];
    Rrev[198] = krev[198] * C[1] * C[37];

    Rfwd[199] = kfwd[199] * C[32] * C[2];
    Rrev[199] = krev[199] * C[31] * C[4];

    Rfwd[200] = kfwd[200] * C[32] * C[2];
    Rrev[200] = krev[200] * C[1] * C[38];

    Rfwd[201] = kfwd[201] * C[1] * C[32];
    Rrev[201] = krev[201] * C[0] * C[31];

    Rfwd[202] = kfwd[202] * C[32] * C[4];
    Rrev[202] = krev[202] * C[5] * C[31];

    Rfwd[203] = kfwd[203] * C[34];
    Rrev[203] = krev[203] * C[1] * C[47];

    Rfwd[204] = kfwd[204] * C[34];
    Rrev[204] = krev[204] * C[1] * C[47];

    Rfwd[205] = kfwd[205] * C[34] * C[3];
    Rrev[205] = krev[205] * C[6] * C[47];

    Rfwd[206] = kfwd[206] * C[34] * C[2];
    Rrev[206] = krev[206] * C[47] * C[4];

    Rfwd[207] = kfwd[207] * C[34] * C[2];
    Rrev[207] = krev[207] * C[31] * C[35];

    Rfwd[208] = kfwd[208] * C[1] * C[34];
    Rrev[208] = krev[208] * C[0] * C[47];

    Rfwd[209] = kfwd[209] * C[34] * C[4];
    Rrev[209] = krev[209] * C[5] * C[47];

    Rfwd[210] = kfwd[210] * C[12] * C[34];
    Rrev[210] = krev[210] * C[13] * C[47];

    Rfwd[211] = kfwd[211] * C[1] * C[35];
    Rrev[211] = krev[211] * C[38];

    Rfwd[212] = kfwd[212] * C[38] * C[2];
    Rrev[212] = krev[212] * C[35] * C[4];

    Rfwd[213] = kfwd[213] * C[1] * C[38];
    Rrev[213] = krev[213] * C[0] * C[35];

    Rfwd[214] = kfwd[214] * C[38] * C[4];
    Rrev[214] = krev[214] * C[5] * C[35];

    Rfwd[215] = kfwd[215] * C[38] * C[3];
    Rrev[215] = krev[215] * C[6] * C[35];

    Rfwd[216] = kfwd[216] * C[39] * C[2];
    Rrev[216] = krev[216] * C[14] * C[30];

    Rfwd[217] = kfwd[217] * C[39] * C[4];
    Rrev[217] = krev[217] * C[1] * C[46];

    Rfwd[218] = kfwd[218] * C[39] * C[5];
    Rrev[218] = krev[218] * C[40] * C[4];

    Rfwd[219] = kfwd[219] * C[39] * C[3];
    Rrev[219] = krev[219] * C[46] * C[2];

    Rfwd[220] = kfwd[220] * C[39] * C[0];
    Rrev[220] = krev[220] * C[1] * C[40];

    Rfwd[221] = kfwd[221] * C[46] * C[2];
    Rrev[221] = krev[221] * C[14] * C[35];

    Rfwd[222] = kfwd[222] * C[1] * C[46];
    Rrev[222] = krev[222] * C[14] * C[31];

    Rfwd[223] = kfwd[223] * C[46] * C[4];
    Rrev[223] = krev[223] * C[14] * C[1] * C[35];

    Rfwd[224] = kfwd[224] * C[30] * C[46];
    Rrev[224] = krev[224] * C[14] * C[47];

    Rfwd[225] = kfwd[225] * C[46] * C[3];
    Rrev[225] = krev[225] * C[15] * C[35];

    Rfwd[226] = kfwd[226] * C[46];
    Rrev[226] = krev[226] * C[14] * C[30];

    Rfwd[227] = kfwd[227] * C[46] * C[35];
    Rrev[227] = krev[227] * C[14] * C[37];

    Rfwd[228] = kfwd[228] * C[46] * C[35];
    Rrev[228] = krev[228] * C[15] * C[47];

    Rfwd[229] = kfwd[229] * C[40];
    Rrev[229] = krev[229] * C[39] * C[1];

    Rfwd[230] = kfwd[230] * C[40] * C[2];
    Rrev[230] = krev[230] * C[1] * C[46];

    Rfwd[231] = kfwd[231] * C[40] * C[2];
    Rrev[231] = krev[231] * C[14] * C[31];

    Rfwd[232] = kfwd[232] * C[40] * C[2];
    Rrev[232] = krev[232] * C[39] * C[4];

    Rfwd[233] = kfwd[233] * C[40] * C[4];
    Rrev[233] = krev[233] * C[1] * C[44];

    Rfwd[234] = kfwd[234] * C[40] * C[4];
    Rrev[234] = krev[234] * C[1] * C[45];

    Rfwd[235] = kfwd[235] * C[40] * C[4];
    Rrev[235] = krev[235] * C[14] * C[32];

    Rfwd[236] = kfwd[236] * C[1] * C[40];
    Rrev[236] = krev[236] * C[41];

    Rfwd[237] = kfwd[237] * C[41] * C[30];
    Rrev[237] = krev[237] * C[10] * C[47];

    Rfwd[238] = kfwd[238] * C[8] * C[47];
    Rrev[238] = krev[238] * C[39] * C[30];

    Rfwd[239] = kfwd[239] * C[9] * C[47];
    Rrev[239] = krev[239] * C[40] * C[30];

    Rfwd[240] = kfwd[240] * C[9] * C[47];
    Rrev[240] = krev[240] * C[42];

    Rfwd[241] = kfwd[241] * C[10] * C[47];
    Rrev[241] = krev[241] * C[40] * C[31];

    Rfwd[242] = kfwd[242] * C[11] * C[47];
    Rrev[242] = krev[242] * C[40] * C[31];

    Rfwd[243] = kfwd[243] * C[8] * C[35];
    Rrev[243] = krev[243] * C[39] * C[2];

    Rfwd[244] = kfwd[244] * C[8] * C[35];
    Rrev[244] = krev[244] * C[14] * C[30];

    Rfwd[245] = kfwd[245] * C[9] * C[35];
    Rrev[245] = krev[245] * C[40] * C[2];

    Rfwd[246] = kfwd[246] * C[9] * C[35];
    Rrev[246] = krev[246] * C[1] * C[46];

    Rfwd[247] = kfwd[247] * C[9] * C[35];
    Rrev[247] = krev[247] * C[16] * C[30];

    Rfwd[248] = kfwd[248] * C[10] * C[35];
    Rrev[248] = krev[248] * C[1] * C[45];

    Rfwd[249] = kfwd[249] * C[10] * C[35];
    Rrev[249] = krev[249] * C[40] * C[4];

    Rfwd[250] = kfwd[250] * C[10] * C[35];
    Rrev[250] = krev[250] * C[1] * C[43];

    Rfwd[251] = kfwd[251] * C[11] * C[35];
    Rrev[251] = krev[251] * C[1] * C[45];

    Rfwd[252] = kfwd[252] * C[11] * C[35];
    Rrev[252] = krev[252] * C[40] * C[4];

    Rfwd[253] = kfwd[253] * C[11] * C[35];
    Rrev[253] = krev[253] * C[1] * C[43];

    Rfwd[254] = kfwd[254] * C[12] * C[35];
    Rrev[254] = krev[254] * C[5] * C[40];

    Rfwd[255] = kfwd[255] * C[12] * C[35];
    Rrev[255] = krev[255] * C[41] * C[4];

    Rfwd[256] = kfwd[256] * C[42] * C[2];
    Rrev[256] = krev[256] * C[14] * C[1] * C[47];

    Rfwd[257] = kfwd[257] * C[42] * C[2];
    Rrev[257] = krev[257] * C[40] * C[35];

    Rfwd[258] = kfwd[258] * C[42] * C[3];
    Rrev[258] = krev[258] * C[16] * C[47] * C[2];

    Rfwd[259] = kfwd[259] * C[42] * C[4];
    Rrev[259] = krev[259] * C[1] * C[16] * C[47];

    Rfwd[260] = kfwd[260] * C[1] * C[42];
    Rrev[260] = krev[260] * C[10] * C[47];

    Rfwd[261] = kfwd[261] * C[45] * C[2];
    Rrev[261] = krev[261] * C[15] * C[31];

    Rfwd[262] = kfwd[262] * C[45] * C[2];
    Rrev[262] = krev[262] * C[14] * C[38];

    Rfwd[263] = kfwd[263] * C[45] * C[2];
    Rrev[263] = krev[263] * C[46] * C[4];

    Rfwd[264] = kfwd[264] * C[1] * C[45];
    Rrev[264] = krev[264] * C[14] * C[32];

    Rfwd[265] = kfwd[265] * C[1] * C[45];
    Rrev[265] = krev[265] * C[0] * C[46];

    Rfwd[266] = kfwd[266] * C[45] * C[4];
    Rrev[266] = krev[266] * C[5] * C[46];

    Rfwd[267] = kfwd[267] * C[45] * C[4];
    Rrev[267] = krev[267] * C[15] * C[32];

    Rfwd[268] = kfwd[268] * C[45];
    Rrev[268] = krev[268] * C[14] * C[31];

    Rfwd[269] = kfwd[269] * C[1] * C[43];
    Rrev[269] = krev[269] * C[1] * C[45];

    Rfwd[270] = kfwd[270] * C[1] * C[43];
    Rrev[270] = krev[270] * C[40] * C[4];

    Rfwd[271] = kfwd[271] * C[1] * C[43];
    Rrev[271] = krev[271] * C[14] * C[32];

    Rfwd[272] = kfwd[272] * C[1] * C[44];
    Rrev[272] = krev[272] * C[1] * C[45];

    Rfwd[273] = kfwd[273] * C[27] * C[35];
    Rrev[273] = krev[273] * C[14] * C[43];

    Rfwd[274] = kfwd[274] * C[12] * C[30];
    Rrev[274] = krev[274] * C[1] * C[41];

    Rfwd[275] = kfwd[275] * C[12] * C[30];
    Rrev[275] = krev[275] * C[0] * C[40];

    Rfwd[276] = kfwd[276] * C[1] * C[33];
    Rrev[276] = krev[276] * C[0] * C[32];

    Rfwd[277] = kfwd[277] * C[33] * C[4];
    Rrev[277] = krev[277] * C[5] * C[32];

    Rfwd[278] = kfwd[278] * C[33] * C[2];
    Rrev[278] = krev[278] * C[32] * C[4];

    Rfwd[279] = kfwd[279] * C[15] * C[31];
    Rrev[279] = krev[279] * C[14] * C[38];

    Rfwd[280] = kfwd[280] * C[39] * C[36];
    Rrev[280] = krev[280] * C[46] * C[35];

    Rfwd[281] = kfwd[281] * C[46] * C[36];
    Rrev[281] = krev[281] * C[15] * C[37];

    Rfwd[282] = kfwd[282] * C[15] * C[30];
    Rrev[282] = krev[282] * C[14] * C[35];

    Rfwd[283] = kfwd[283] * C[12] * C[2];

    Rfwd[284] = kfwd[284] * C[24] * C[2];
    Rrev[284] = krev[284] * C[51] * C[1];

    Rfwd[285] = kfwd[285] * C[25] * C[2];
    Rrev[285] = krev[285] * C[52] * C[1];

    Rfwd[286] = kfwd[286] * C[6] * C[4];
    Rrev[286] = krev[286] * C[5] * C[3];

    Rfwd[287] = kfwd[287] * C[12] * C[4];

    Rfwd[288] = kfwd[288] * C[9] * C[0];
    Rrev[288] = krev[288] * C[12];

    Rfwd[289] = kfwd[289] * C[10] * C[3];

    Rfwd[290] = kfwd[290] * C[10] * C[3];
    Rrev[290] = krev[290] * C[17] * C[2];

    Rfwd[291] = kfwd[291] * C[10] * C[10];

    Rfwd[292] = kfwd[292] * C[11] * C[5];

    Rfwd[293] = kfwd[293] * C[23] * C[3];
    Rrev[293] = krev[293] * C[51] * C[2];

    Rfwd[294] = kfwd[294] * C[23] * C[3];
    Rrev[294] = krev[294] * C[22] * C[6];

    Rfwd[295] = kfwd[295] * C[52] * C[2];
    Rrev[295] = krev[295] * C[51] * C[4];

    Rfwd[296] = kfwd[296] * C[52] * C[2];

    Rfwd[297] = kfwd[297] * C[52] * C[3];

    Rfwd[298] = kfwd[298] * C[52] * C[1];
    Rrev[298] = krev[298] * C[51] * C[0];

    Rfwd[299] = kfwd[299] * C[52] * C[1];

    Rfwd[300] = kfwd[300] * C[52] * C[4];

    Rfwd[301] = kfwd[301] * C[52] * C[6];

    Rfwd[302] = kfwd[302] * C[12] * C[52];

    Rfwd[303] = kfwd[303] * C[28] * C[1];
    Rrev[303] = krev[303] * C[51];

    Rfwd[304] = kfwd[304] * C[51] * C[2];

    Rfwd[305] = kfwd[305] * C[51] * C[3];

    Rfwd[306] = kfwd[306] * C[51] * C[3];

    Rfwd[307] = kfwd[307] * C[51] * C[1];
    Rrev[307] = krev[307] * C[12] * C[16];

    Rfwd[308] = kfwd[308] * C[51] * C[1];
    Rrev[308] = krev[308] * C[28] * C[0];

    Rfwd[309] = kfwd[309] * C[51] * C[4];
    Rrev[309] = krev[309] * C[28] * C[5];

    Rfwd[310] = kfwd[310] * C[51] * C[4];
    Rrev[310] = krev[310] * C[18] * C[16];

    Rfwd[311] = kfwd[311] * C[25] * C[12];
    Rrev[311] = krev[311] * C[50];

    Rfwd[312] = kfwd[312] * C[50] * C[2];
    Rrev[312] = krev[312] * C[49] * C[4];

    Rfwd[313] = kfwd[313] * C[50] * C[1];
    Rrev[313] = krev[313] * C[49] * C[0];

    Rfwd[314] = kfwd[314] * C[50] * C[4];
    Rrev[314] = krev[314] * C[49] * C[5];

    Rfwd[315] = kfwd[315] * C[49] * C[7];
    Rrev[315] = krev[315] * C[50] * C[6];

    Rfwd[316] = kfwd[316] * C[50] * C[12];
    Rrev[316] = krev[316] * C[49] * C[13];

    Rfwd[317] = kfwd[317] * C[24] * C[12];
    Rrev[317] = krev[317] * C[49];

    Rfwd[318] = kfwd[318] * C[49] * C[2];
    Rrev[318] = krev[318] * C[25] * C[17];

    Rfwd[319] = kfwd[319] * C[49] * C[1];
    Rrev[319] = krev[319] * C[50];

    Rfwd[320] = kfwd[320] * C[49] * C[1];
    Rrev[320] = krev[320] * C[25] * C[12];

    Rfwd[321] = kfwd[321] * C[49] * C[4];
    Rrev[321] = krev[321] * C[25] * C[18];

    Rfwd[322] = kfwd[322] * C[49] * C[6];
    Rrev[322] = krev[322] * C[50] * C[3];

    Rfwd[323] = kfwd[323] * C[49] * C[6];

    Rfwd[324] = kfwd[324] * C[49] * C[12];
    Rrev[324] = krev[324] * C[25] * C[25];

    for(int i = 0; i < ii; ++i) { Rnet[i] = Rfwd[i] - Rrev[i]; }

  };

  void getNetProductionRates(double& p, double& T, std::vector<double>& y, std::vector<double>& omega) {

    double W;
    double rho;
    std::vector<double> C(kk,0.0);
    std::vector<double> Rnet(ii,0.0);

    W   = 0.0;
    for(int k = 0; k < kk; ++k) { W += y[k] / mw[k]; }
    W   = 1.0 / W;
    rho = (p * W) / (GasConstant * T);
    for(int k = 0; k < kk; ++k) { C[k] = rho * y[k] / mw[k]; }

    getNetRatesOfProgress(T, C, Rnet);

    omega[0] =  - Rnet[2] + Rnet[7] + Rnet[38] - Rnet[39] + Rnet[39] + Rnet[39] + Rnet[40] + Rnet[41] + Rnet[44] + Rnet[46] + Rnet[48] + Rnet[50] + Rnet[52] + Rnet[54] + Rnet[57] + Rnet[59] + Rnet[64] + Rnet[67] + Rnet[68] + Rnet[72] + Rnet[74] + Rnet[76] + Rnet[77] + Rnet[79] - Rnet[82] - Rnet[83] - Rnet[125] - Rnet[135] + Rnet[136] - Rnet[145] - Rnet[171] + Rnet[173] + Rnet[190] + Rnet[196] + Rnet[201] + Rnet[208] + Rnet[213] - Rnet[220] + Rnet[265] + Rnet[275] + Rnet[276] + Rnet[283] + Rnet[287] - Rnet[288] + Rnet[292] + Rnet[298] + Rnet[299] + Rnet[308] + Rnet[313];
    omega[1] =  - Rnet[1] + Rnet[2] + Rnet[5] + Rnet[6] + Rnet[8] + Rnet[9] + Rnet[13] + Rnet[20] + Rnet[23] + Rnet[27] - Rnet[32] - Rnet[33] - Rnet[34] - Rnet[35] - Rnet[36] - Rnet[37] - Rnet[38] - Rnet[38] - Rnet[39] - Rnet[39] - Rnet[40] - Rnet[40] - Rnet[41] - Rnet[41] - Rnet[42] - Rnet[43] - Rnet[44] - Rnet[45] - Rnet[46] - Rnet[47] - Rnet[48] - Rnet[49] - Rnet[50] - Rnet[51] - Rnet[52] - Rnet[53] - Rnet[54] - Rnet[55] - Rnet[56] - Rnet[57] - Rnet[58] - Rnet[59] - Rnet[60] - Rnet[61] - Rnet[62] - Rnet[63] + Rnet[63] - Rnet[64] - Rnet[65] - Rnet[66] - Rnet[67] - Rnet[68] - Rnet[69] - Rnet[70] - Rnet[71] - Rnet[72] - Rnet[73] - Rnet[74] - Rnet[75] - Rnet[76] - Rnet[77] - Rnet[78] - Rnet[79] - Rnet[80] - Rnet[81] + Rnet[81] + Rnet[83] + Rnet[89] + Rnet[90] + Rnet[91] + Rnet[93] + Rnet[98] + Rnet[105] + Rnet[106] + Rnet[107] + Rnet[122] + Rnet[123] + Rnet[125] + Rnet[126] + Rnet[127] + Rnet[128] + Rnet[129] + Rnet[132] + Rnet[134] + Rnet[135] + Rnet[137] + Rnet[143] + Rnet[145] + Rnet[148] + Rnet[158] + Rnet[165] + Rnet[166] + Rnet[171] + Rnet[179] - Rnet[182] - Rnet[188] + Rnet[189] - Rnet[190] + Rnet[191] + Rnet[195] + Rnet[198] + Rnet[200] - Rnet[201] + Rnet[203] + Rnet[204] - Rnet[208] - Rnet[211] - Rnet[213] + Rnet[217] + Rnet[220] - Rnet[222] + Rnet[223] + Rnet[229] + Rnet[230] + Rnet[233] + Rnet[234] - Rnet[236] + Rnet[246] + Rnet[248] + Rnet[250] + Rnet[251] + Rnet[253] + Rnet[256] + Rnet[259] - Rnet[260] - Rnet[264] - Rnet[265] - Rnet[269] + Rnet[269] - Rnet[270] - Rnet[271] - Rnet[272] + Rnet[272] + Rnet[274] - Rnet[276] + Rnet[283] + Rnet[284] + Rnet[285] + Rnet[289] + Rnet[289] + Rnet[291] + Rnet[291] - Rnet[298] - Rnet[299] - Rnet[303] + Rnet[304] - Rnet[307] - Rnet[308] - Rnet[313] - Rnet[319] - Rnet[320];
    omega[2] =  - Rnet[0] - Rnet[0] - Rnet[1] - Rnet[2] - Rnet[3] - Rnet[4] - Rnet[5] - Rnet[6] - Rnet[7] - Rnet[8] - Rnet[9] - Rnet[10] - Rnet[11] - Rnet[12] - Rnet[13] - Rnet[14] - Rnet[15] - Rnet[16] - Rnet[17] - Rnet[18] - Rnet[19] - Rnet[20] - Rnet[21] - Rnet[22] - Rnet[23] - Rnet[24] - Rnet[25] - Rnet[26] - Rnet[27] - Rnet[28] - Rnet[29] + Rnet[30] + Rnet[37] + Rnet[43] + Rnet[85] + Rnet[121] + Rnet[124] + Rnet[154] + Rnet[177] + Rnet[178] - Rnet[180] - Rnet[181] + Rnet[184] - Rnet[186] - Rnet[187] - Rnet[189] + Rnet[193] - Rnet[199] - Rnet[200] - Rnet[206] - Rnet[207] - Rnet[212] - Rnet[216] + Rnet[219] - Rnet[221] - Rnet[230] - Rnet[231] - Rnet[232] + Rnet[243] + Rnet[245] - Rnet[256] - Rnet[257] + Rnet[258] - Rnet[261] - Rnet[262] - Rnet[263] - Rnet[278] - Rnet[283] - Rnet[284] - Rnet[285] + Rnet[290] + Rnet[293] - Rnet[295] - Rnet[296] - Rnet[304] - Rnet[312] - Rnet[318];
    omega[3] =  + Rnet[0] + Rnet[3] - Rnet[30] - Rnet[31] - Rnet[32] - Rnet[33] - Rnet[33] + Rnet[33] - Rnet[34] - Rnet[35] - Rnet[36] - Rnet[37] + Rnet[44] + Rnet[86] + Rnet[114] + Rnet[115] + Rnet[117] - Rnet[121] - Rnet[124] - Rnet[134] - Rnet[143] - Rnet[144] - Rnet[154] - Rnet[155] - Rnet[167] - Rnet[168] - Rnet[169] - Rnet[170] - Rnet[172] - Rnet[174] - Rnet[175] - Rnet[178] + Rnet[180] + Rnet[187] - Rnet[193] - Rnet[194] - Rnet[205] - Rnet[215] - Rnet[219] - Rnet[225] - Rnet[258] + Rnet[286] - Rnet[289] - Rnet[290] - Rnet[293] - Rnet[294] - Rnet[297] - Rnet[305] - Rnet[306] + Rnet[322];
    omega[4] =  + Rnet[1] + Rnet[2] + Rnet[3] + Rnet[4] + Rnet[10] + Rnet[12] + Rnet[14] + Rnet[15] + Rnet[16] + Rnet[17] + Rnet[18] + Rnet[21] + Rnet[26] + Rnet[28] + Rnet[37] - Rnet[42] + Rnet[45] + Rnet[45] + Rnet[47] + Rnet[60] + Rnet[65] - Rnet[83] - Rnet[84] - Rnet[84] - Rnet[85] - Rnet[85] - Rnet[86] - Rnet[87] - Rnet[88] - Rnet[89] - Rnet[90] - Rnet[91] - Rnet[92] - Rnet[93] - Rnet[94] - Rnet[95] - Rnet[96] - Rnet[97] - Rnet[98] - Rnet[99] - Rnet[100] - Rnet[101] - Rnet[102] - Rnet[103] - Rnet[104] - Rnet[105] - Rnet[106] - Rnet[107] - Rnet[108] - Rnet[109] - Rnet[110] - Rnet[111] - Rnet[112] - Rnet[113] + Rnet[116] + Rnet[118] + Rnet[119] + Rnet[134] + Rnet[143] + Rnet[155] + Rnet[175] - Rnet[179] + Rnet[182] - Rnet[183] + Rnet[185] + Rnet[188] - Rnet[191] - Rnet[192] + Rnet[194] + Rnet[197] + Rnet[199] - Rnet[202] + Rnet[206] - Rnet[209] + Rnet[212] - Rnet[214] - Rnet[217] + Rnet[218] - Rnet[223] + Rnet[232] - Rnet[233] - Rnet[234] - Rnet[235] + Rnet[249] + Rnet[252] + Rnet[255] - Rnet[259] + Rnet[263] - Rnet[266] - Rnet[267] + Rnet[270] - Rnet[277] + Rnet[278] - Rnet[286] - Rnet[287] + Rnet[295] + Rnet[296] - Rnet[300] + Rnet[305] + Rnet[306] - Rnet[309] - Rnet[310] + Rnet[312] - Rnet[314] - Rnet[321] + Rnet[323];
    omega[5] =  - Rnet[34] + Rnet[34] - Rnet[40] + Rnet[40] + Rnet[42] + Rnet[43] + Rnet[47] + Rnet[61] + Rnet[66] + Rnet[83] + Rnet[85] + Rnet[86] + Rnet[87] + Rnet[88] + Rnet[92] + Rnet[95] + Rnet[96] + Rnet[97] + Rnet[99] + Rnet[100] + Rnet[101] + Rnet[102] + Rnet[103] + Rnet[104] + Rnet[108] + Rnet[110] + Rnet[111] + Rnet[112] + Rnet[113] - Rnet[126] + Rnet[144] - Rnet[146] - Rnet[147] + Rnet[147] - Rnet[165] + Rnet[165] + Rnet[192] - Rnet[196] + Rnet[202] + Rnet[209] + Rnet[214] - Rnet[218] + Rnet[254] + Rnet[266] + Rnet[277] + Rnet[286] - Rnet[292] + Rnet[300] + Rnet[309] + Rnet[314];
    omega[6] =  - Rnet[3] + Rnet[4] + Rnet[31] + Rnet[32] + Rnet[33] + Rnet[34] + Rnet[35] + Rnet[36] - Rnet[43] - Rnet[44] - Rnet[45] + Rnet[46] - Rnet[86] + Rnet[87] + Rnet[88] - Rnet[114] - Rnet[114] - Rnet[115] - Rnet[115] - Rnet[116] - Rnet[117] - Rnet[118] - Rnet[119] - Rnet[120] + Rnet[156] + Rnet[167] + Rnet[168] + Rnet[169] + Rnet[174] + Rnet[183] - Rnet[185] + Rnet[205] + Rnet[215] - Rnet[286] + Rnet[294] + Rnet[297] - Rnet[301] + Rnet[315] - Rnet[322] - Rnet[323];
    omega[7] =  - Rnet[4] - Rnet[46] - Rnet[47] + Rnet[84] - Rnet[87] - Rnet[88] + Rnet[114] + Rnet[115] + Rnet[120] - Rnet[156] + Rnet[301] - Rnet[315];
    omega[8] =  + Rnet[48] - Rnet[89] - Rnet[121] - Rnet[122] - Rnet[123] - Rnet[238] - Rnet[243] - Rnet[244];
    omega[9] =  - Rnet[5] + Rnet[19] - Rnet[48] + Rnet[50] - Rnet[90] + Rnet[92] - Rnet[124] - Rnet[125] - Rnet[126] - Rnet[127] - Rnet[128] - Rnet[129] - Rnet[130] - Rnet[131] - Rnet[132] - Rnet[133] - Rnet[239] - Rnet[240] - Rnet[245] - Rnet[246] - Rnet[247] - Rnet[288];
    omega[10] =  - Rnet[6] + Rnet[22] + Rnet[29] - Rnet[49] - Rnet[91] - Rnet[92] + Rnet[95] - Rnet[116] - Rnet[122] + Rnet[125] - Rnet[127] - Rnet[134] - Rnet[135] - Rnet[136] - Rnet[136] - Rnet[137] - Rnet[138] - Rnet[139] - Rnet[140] + Rnet[141] + Rnet[142] + Rnet[147] + Rnet[150] + Rnet[151] + Rnet[237] - Rnet[241] - Rnet[248] - Rnet[249] - Rnet[250] + Rnet[260] - Rnet[289] - Rnet[290] - Rnet[291] - Rnet[291] + Rnet[304];
    omega[11] =  - Rnet[7] - Rnet[8] - Rnet[50] + Rnet[61] + Rnet[66] + Rnet[78] - Rnet[93] + Rnet[96] - Rnet[141] - Rnet[142] - Rnet[143] - Rnet[144] - Rnet[145] - Rnet[146] - Rnet[147] - Rnet[148] - Rnet[149] - Rnet[150] - Rnet[151] - Rnet[152] - Rnet[153] - Rnet[242] - Rnet[251] - Rnet[252] - Rnet[253] - Rnet[292];
    omega[12] =  - Rnet[9] + Rnet[10] + Rnet[24] + Rnet[25] + Rnet[49] - Rnet[51] + Rnet[52] + Rnet[60] + Rnet[65] + Rnet[80] - Rnet[94] - Rnet[95] - Rnet[96] + Rnet[97] + Rnet[109] - Rnet[117] - Rnet[118] - Rnet[123] - Rnet[128] + Rnet[135] - Rnet[137] + Rnet[138] + Rnet[138] + Rnet[145] - Rnet[148] + Rnet[149] + Rnet[149] + Rnet[153] - Rnet[154] - Rnet[155] - Rnet[156] - Rnet[157] - Rnet[157] - Rnet[158] - Rnet[158] - Rnet[159] - Rnet[160] - Rnet[161] - Rnet[162] - Rnet[163] - Rnet[164] - Rnet[210] - Rnet[254] - Rnet[255] - Rnet[274] - Rnet[275] - Rnet[283] - Rnet[287] + Rnet[288] + Rnet[296] + Rnet[297] + Rnet[299] + Rnet[300] + Rnet[301] - Rnet[302] + Rnet[302] + Rnet[307] - Rnet[311] - Rnet[316] - Rnet[317] + Rnet[320] - Rnet[324];
    omega[13] =  - Rnet[10] + Rnet[51] - Rnet[52] - Rnet[97] + Rnet[117] - Rnet[129] - Rnet[138] - Rnet[149] + Rnet[156] + Rnet[159] + Rnet[160] + Rnet[161] + Rnet[162] + Rnet[163] + Rnet[164] + Rnet[210] + Rnet[302] + Rnet[316];
    omega[14] =  + Rnet[5] + Rnet[7] - Rnet[11] + Rnet[12] + Rnet[19] + Rnet[22] + Rnet[27] + Rnet[27] - Rnet[30] + Rnet[54] + Rnet[78] + Rnet[80] - Rnet[82] + Rnet[89] - Rnet[98] + Rnet[99] + Rnet[109] - Rnet[119] + Rnet[121] - Rnet[130] + Rnet[131] + Rnet[133] + Rnet[134] - Rnet[139] + Rnet[140] + Rnet[143] + Rnet[144] - Rnet[150] + Rnet[150] + Rnet[152] + Rnet[159] + Rnet[165] + Rnet[166] + Rnet[167] + Rnet[170] + Rnet[175] + Rnet[175] + Rnet[176] + Rnet[176] + Rnet[216] + Rnet[221] + Rnet[222] + Rnet[223] + Rnet[224] + Rnet[226] + Rnet[227] + Rnet[231] + Rnet[235] + Rnet[244] + Rnet[256] + Rnet[262] + Rnet[264] + Rnet[268] + Rnet[271] + Rnet[273] + Rnet[279] + Rnet[282] + Rnet[283] + Rnet[296] + Rnet[297] + Rnet[299] + Rnet[300] + Rnet[301] + Rnet[302] + Rnet[305];
    omega[15] =  + Rnet[11] + Rnet[13] + Rnet[29] + Rnet[30] - Rnet[41] + Rnet[41] + Rnet[98] + Rnet[119] - Rnet[131] - Rnet[151] + Rnet[151] - Rnet[152] + Rnet[225] + Rnet[228] + Rnet[261] + Rnet[267] - Rnet[279] + Rnet[281] - Rnet[282] + Rnet[289] + Rnet[304];
    omega[16] =  + Rnet[6] + Rnet[8] - Rnet[12] - Rnet[13] + Rnet[14] + Rnet[24] + Rnet[31] - Rnet[53] - Rnet[54] + Rnet[57] + Rnet[90] - Rnet[99] + Rnet[100] + Rnet[120] + Rnet[124] + Rnet[131] - Rnet[159] + Rnet[160] - Rnet[165] - Rnet[166] - Rnet[167] + Rnet[170] + Rnet[172] + Rnet[247] + Rnet[258] + Rnet[259] + Rnet[306] + Rnet[306] + Rnet[307] + Rnet[310];
    omega[17] =  + Rnet[9] - Rnet[14] + Rnet[15] + Rnet[16] + Rnet[25] - Rnet[31] + Rnet[53] - Rnet[55] - Rnet[56] - Rnet[57] + Rnet[59] + Rnet[64] + Rnet[82] + Rnet[91] + Rnet[93] - Rnet[100] + Rnet[101] + Rnet[102] + Rnet[116] - Rnet[120] + Rnet[126] - Rnet[132] + Rnet[152] + Rnet[155] - Rnet[160] + Rnet[168] + Rnet[169] + Rnet[172] + Rnet[287] + Rnet[290] + Rnet[292] + Rnet[305] + Rnet[318] + Rnet[323];
    omega[18] =  - Rnet[15] + Rnet[17] + Rnet[55] - Rnet[58] - Rnet[59] - Rnet[60] - Rnet[61] + Rnet[63] + Rnet[67] - Rnet[101] + Rnet[103] + Rnet[161] - Rnet[168] + Rnet[310] + Rnet[321];
    omega[19] =  - Rnet[16] + Rnet[18] + Rnet[56] - Rnet[62] - Rnet[63] - Rnet[64] - Rnet[65] - Rnet[66] + Rnet[68] - Rnet[102] + Rnet[104] + Rnet[118] + Rnet[154] + Rnet[162] - Rnet[169];
    omega[20] =  - Rnet[17] - Rnet[18] + Rnet[58] + Rnet[62] - Rnet[67] - Rnet[68] + Rnet[94] - Rnet[103] - Rnet[104] + Rnet[146] - Rnet[161] - Rnet[162];
    omega[21] =  - Rnet[19] + Rnet[21] - Rnet[69] - Rnet[105] + Rnet[108] + Rnet[122] - Rnet[170] - Rnet[171];
    omega[22] =  - Rnet[20] - Rnet[21] - Rnet[22] + Rnet[69] - Rnet[70] + Rnet[72] - Rnet[106] - Rnet[107] - Rnet[108] - Rnet[109] + Rnet[110] + Rnet[123] + Rnet[127] + Rnet[133] + Rnet[136] + Rnet[171] + Rnet[173] + Rnet[176] + Rnet[291] + Rnet[294];
    omega[23] =  - Rnet[23] + Rnet[70] - Rnet[71] - Rnet[72] + Rnet[74] - Rnet[110] + Rnet[111] + Rnet[128] + Rnet[140] + Rnet[163] - Rnet[172] - Rnet[293] - Rnet[294];
    omega[24] =  - Rnet[24] + Rnet[71] - Rnet[73] - Rnet[74] + Rnet[76] - Rnet[111] + Rnet[129] + Rnet[137] + Rnet[148] - Rnet[163] - Rnet[173] + Rnet[174] - Rnet[284] - Rnet[317];
    omega[25] =  - Rnet[25] + Rnet[26] + Rnet[73] - Rnet[75] - Rnet[76] + Rnet[77] + Rnet[112] + Rnet[153] + Rnet[158] + Rnet[164] - Rnet[174] - Rnet[285] - Rnet[311] + Rnet[318] + Rnet[320] + Rnet[321] + Rnet[323] + Rnet[324] + Rnet[324];
    omega[26] =  - Rnet[26] + Rnet[75] - Rnet[77] - Rnet[112] - Rnet[153] + Rnet[157] - Rnet[164];
    omega[27] =  + Rnet[20] - Rnet[27] + Rnet[28] - Rnet[78] + Rnet[79] + Rnet[105] + Rnet[113] + Rnet[130] - Rnet[133] - Rnet[140] - Rnet[175] - Rnet[176] - Rnet[176] - Rnet[273];
    omega[28] =  + Rnet[23] - Rnet[28] - Rnet[29] - Rnet[79] - Rnet[80] + Rnet[81] + Rnet[106] - Rnet[113] + Rnet[132] + Rnet[139] - Rnet[303] + Rnet[308] + Rnet[309];
    omega[29] =  - Rnet[81] + Rnet[107];
    omega[30] =  - Rnet[177] - Rnet[178] - Rnet[179] + Rnet[190] + Rnet[192] - Rnet[195] + Rnet[216] - Rnet[224] + Rnet[226] - Rnet[237] + Rnet[238] + Rnet[239] + Rnet[244] + Rnet[247] - Rnet[274] - Rnet[275] - Rnet[282];
    omega[31] =  - Rnet[189] - Rnet[190] - Rnet[191] - Rnet[192] - Rnet[193] - Rnet[194] - Rnet[195] - Rnet[196] - Rnet[197] - Rnet[198] + Rnet[199] + Rnet[201] + Rnet[202] + Rnet[207] + Rnet[222] + Rnet[231] + Rnet[241] + Rnet[242] + Rnet[261] + Rnet[268] - Rnet[279];
    omega[32] =  - Rnet[199] - Rnet[200] - Rnet[201] - Rnet[202] + Rnet[235] + Rnet[264] + Rnet[267] + Rnet[271] + Rnet[276] + Rnet[277] + Rnet[278];
    omega[33] =  - Rnet[276] - Rnet[277] - Rnet[278];
    omega[34] =  - Rnet[203] - Rnet[204] - Rnet[205] - Rnet[206] - Rnet[207] - Rnet[208] - Rnet[209] - Rnet[210];
    omega[35] =  - Rnet[177] + Rnet[178] + Rnet[179] + Rnet[181] + Rnet[181] - Rnet[185] - Rnet[186] + Rnet[187] + Rnet[188] + Rnet[189] + Rnet[194] - Rnet[197] - Rnet[198] + Rnet[207] - Rnet[211] + Rnet[212] + Rnet[213] + Rnet[214] + Rnet[215] + Rnet[221] + Rnet[223] + Rnet[225] - Rnet[227] - Rnet[228] - Rnet[243] - Rnet[244] - Rnet[245] - Rnet[246] - Rnet[247] - Rnet[248] - Rnet[249] - Rnet[250] - Rnet[251] - Rnet[252] - Rnet[253] - Rnet[254] - Rnet[255] + Rnet[257] - Rnet[273] + Rnet[280] + Rnet[282];
    omega[36] =  + Rnet[185] + Rnet[186] - Rnet[187] - Rnet[188] - Rnet[280] - Rnet[281];
    omega[37] =  - Rnet[180] - Rnet[181] - Rnet[182] - Rnet[183] - Rnet[184] + Rnet[198] + Rnet[227] + Rnet[281];
    omega[38] =  + Rnet[191] + Rnet[193] + Rnet[196] + Rnet[200] + Rnet[211] - Rnet[212] - Rnet[213] - Rnet[214] - Rnet[215] + Rnet[262] + Rnet[279];
    omega[39] =  - Rnet[216] - Rnet[217] - Rnet[218] - Rnet[219] - Rnet[220] + Rnet[229] + Rnet[232] + Rnet[238] + Rnet[243] - Rnet[280];
    omega[40] =  + Rnet[218] + Rnet[220] - Rnet[229] - Rnet[230] - Rnet[231] - Rnet[232] - Rnet[233] - Rnet[234] - Rnet[235] - Rnet[236] + Rnet[239] + Rnet[241] + Rnet[242] + Rnet[245] + Rnet[249] + Rnet[252] + Rnet[254] + Rnet[257] + Rnet[270] + Rnet[275];
    omega[41] =  + Rnet[236] - Rnet[237] + Rnet[255] + Rnet[274];
    omega[42] =  + Rnet[240] - Rnet[256] - Rnet[257] - Rnet[258] - Rnet[259] - Rnet[260];
    omega[43] =  + Rnet[250] + Rnet[253] - Rnet[269] - Rnet[270] - Rnet[271] + Rnet[273];
    omega[44] =  + Rnet[233] - Rnet[272];
    omega[45] =  + Rnet[234] + Rnet[248] + Rnet[251] - Rnet[261] - Rnet[262] - Rnet[263] - Rnet[264] - Rnet[265] - Rnet[266] - Rnet[267] - Rnet[268] + Rnet[269] + Rnet[272];
    omega[46] =  + Rnet[217] + Rnet[219] - Rnet[221] - Rnet[222] - Rnet[223] - Rnet[224] - Rnet[225] - Rnet[226] - Rnet[227] - Rnet[228] + Rnet[230] + Rnet[246] + Rnet[263] + Rnet[265] + Rnet[266] + Rnet[280] - Rnet[281];
    omega[47] =  - Rnet[35] + Rnet[35] - Rnet[141] + Rnet[141] + Rnet[177] + Rnet[180] + Rnet[182] + Rnet[183] + Rnet[184] + Rnet[195] + Rnet[197] + Rnet[203] + Rnet[204] + Rnet[205] + Rnet[206] + Rnet[208] + Rnet[209] + Rnet[210] + Rnet[224] + Rnet[228] + Rnet[237] - Rnet[238] - Rnet[239] - Rnet[240] - Rnet[241] - Rnet[242] + Rnet[256] + Rnet[258] + Rnet[259] + Rnet[260];
    omega[48] =  - Rnet[36] + Rnet[36] - Rnet[142] + Rnet[142];
    omega[49] =  + Rnet[312] + Rnet[313] + Rnet[314] - Rnet[315] + Rnet[316] + Rnet[317] - Rnet[318] - Rnet[319] - Rnet[320] - Rnet[321] - Rnet[322] - Rnet[323] - Rnet[324];
    omega[50] =  + Rnet[311] - Rnet[312] - Rnet[313] - Rnet[314] + Rnet[315] - Rnet[316] + Rnet[319] + Rnet[322];
    omega[51] =  + Rnet[284] + Rnet[293] + Rnet[295] + Rnet[298] + Rnet[303] - Rnet[304] - Rnet[305] - Rnet[306] - Rnet[307] - Rnet[308] - Rnet[309] - Rnet[310];
    omega[52] =  + Rnet[285] - Rnet[295] - Rnet[296] - Rnet[297] - Rnet[298] - Rnet[299] - Rnet[300] - Rnet[301] - Rnet[302];

  };

}
